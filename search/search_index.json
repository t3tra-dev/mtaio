{"config":{"lang":["en","ja"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"mtaio Documentation","text":"<p>mtaio (Multi-threaded Async I/O) is a comprehensive Python framework for building efficient asynchronous applications. It provides a robust set of tools and utilities for handling async I/O operations, event processing, caching, monitoring, and more.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Async-First Design: Built from the ground up with Python's <code>asyncio</code> for optimal performance</li> <li>Resource Management: Efficient handling of system resources with built-in rate limiting and timeout controls</li> <li>Event Processing: Robust event emitter and handler system for building event-driven applications</li> <li>Caching System: Flexible caching mechanisms including TTL and distributed caching support</li> <li>Protocol Support: Built-in support for ASGI, MQTT, and mail protocols</li> <li>Monitoring &amp; Profiling: Comprehensive tools for system monitoring and performance profiling</li> <li>Type Safety: Full type hints support with mypy compatibility</li> <li>Extensible Architecture: Easy to extend and customize for your specific needs</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from mtaio.core import TaskExecutor\nfrom mtaio.cache import TTLCache\nfrom mtaio.events import EventEmitter\n\n# Task execution with concurrency control\nasync with TaskExecutor() as executor:\n    results = await executor.gather(\n        task1(), \n        task2(),\n        limit=5  # Maximum concurrent tasks\n    )\n\n# Caching with TTL\ncache = TTLCache[str](\n    default_ttl=300.0,  # 5 minutes\n    max_size=1000\n)\nawait cache.set(\"key\", \"value\")\nvalue = await cache.get(\"key\")\n\n# Event handling\nemitter = EventEmitter()\n\n@emitter.on(\"user_login\")\nasync def handle_login(event):\n    user = event.data\n    print(f\"User {user.name} logged in\")\n\nawait emitter.emit(\"user_login\", user_data)\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>This documentation is organized into several sections:</p> <ul> <li>Getting Started: Quick introduction to mtaio</li> <li>Installation: Installation instructions and requirements</li> <li>Basic Usage: Essential concepts and basic usage patterns</li> <li>Advanced Usage: In-depth guides and advanced features</li> <li>API Reference: Complete API documentation</li> <li>Deployment: Production deployment guidelines</li> <li>Troubleshooting: Common issues and solutions</li> </ul>"},{"location":"#getting-help","title":"Getting Help","text":"<ul> <li>GitHub Issues: Report bugs and request features on our GitHub repository</li> <li>Documentation: Browse the comprehensive documentation sections listed above</li> <li>Examples: Check out the examples directory in our repository</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.11 or later</li> <li>Operating System: Platform independent</li> </ul>"},{"location":"#license","title":"License","text":"<p>mtaio is released under the MIT License. See the LICENSE file for details.</p>"},{"location":"404/","title":"404 Not Found","text":""},{"location":"api/","title":"API Reference","text":"<p>mtaio provides a comprehensive set of APIs for building asynchronous applications. This reference documents all the modules and their components in detail.</p>"},{"location":"api/#core-components","title":"Core Components","text":"<ul> <li>Core: Fundamental components for asynchronous operations, including task execution and queues</li> <li>Cache: In-memory and distributed caching mechanisms</li> <li>Events: Event emitting and handling system</li> <li>Data: Data processing and transformation tools</li> <li>Resources: System resource management utilities</li> </ul>"},{"location":"api/#protocol-support","title":"Protocol Support","text":"<ul> <li>Protocols: Network protocol implementations (ASGI, MQTT, mail)</li> </ul>"},{"location":"api/#development-tools","title":"Development Tools","text":"<ul> <li>Monitoring: System monitoring and performance profiling</li> <li>Logging: Asynchronous logging functionality</li> <li>Optimization: Performance optimization utilities</li> <li>Exceptions: Error handling and exception hierarchy</li> </ul>"},{"location":"api/#type-system","title":"Type System","text":"<ul> <li>Typing: Type definitions and protocols</li> <li>Decorators: Utility decorators for enhancing async functions</li> </ul>"},{"location":"api/#module-organization","title":"Module Organization","text":"<p>The API is organized into logical modules, each focusing on a specific aspect of async programming:</p> <pre><code>mtaio/\n\u251c\u2500\u2500 core/        # Core async functionality\n\u251c\u2500\u2500 cache/       # Caching implementations\n\u251c\u2500\u2500 events/      # Event handling system\n\u251c\u2500\u2500 data/        # Data processing tools\n\u251c\u2500\u2500 protocols/   # Protocol implementations\n\u251c\u2500\u2500 resources/   # Resource management\n\u251c\u2500\u2500 monitoring/  # System monitoring\n\u251c\u2500\u2500 logging/     # Logging utilities\n\u251c\u2500\u2500 typing/      # Type definitions\n\u2514\u2500\u2500 decorators/  # Utility decorators\n</code></pre>"},{"location":"api/#using-the-api","title":"Using the API","text":"<p>Each module's documentation includes:</p> <ul> <li>Detailed class and function references</li> <li>Usage examples</li> <li>Best practices</li> <li>Common patterns</li> <li>Error handling</li> <li>Performance considerations</li> </ul> <p>Select a module from the navigation menu to view its detailed documentation.</p>"},{"location":"api/#api-stability","title":"API Stability","text":"<p>mtaio follows semantic versioning (SemVer):</p> <ul> <li>Major version changes (x.0.0) may include breaking API changes</li> <li>Minor version changes (0.x.0) add functionality in a backward-compatible manner</li> <li>Patch version changes (0.0.x) include backward-compatible bug fixes</li> </ul> <p>Any breaking changes will be clearly documented in the release notes.</p>"},{"location":"api/cache/","title":"Cache API Reference","text":"<p>The <code>mtaio.cache</code> module provides various caching mechanisms for storing and retrieving data asynchronously.</p>"},{"location":"api/cache/#overview","title":"Overview","text":"<p>The cache module includes the following main components:</p> <ul> <li><code>TTLCache</code>: Time-to-live cache implementation</li> <li><code>DistributedCache</code>: Distributed caching across multiple nodes</li> <li>Various cache policies (LRU, LFU, FIFO)</li> </ul>"},{"location":"api/cache/#ttlcache","title":"TTLCache","text":"<p><code>TTLCache[T]</code> is a generic cache implementation with time-to-live support.</p>"},{"location":"api/cache/#basic-usage","title":"Basic Usage","text":"<pre><code>from mtaio.cache import TTLCache\n\n# Create cache instance\ncache = TTLCache[str](\n    default_ttl=300.0,  # 5 minutes TTL\n    max_size=1000\n)\n\n# Set value\nawait cache.set(\"key\", \"value\")\n\n# Get value\nvalue = await cache.get(\"key\")\n</code></pre>"},{"location":"api/cache/#class-reference","title":"Class Reference","text":"<pre><code>class TTLCache[T]:\n    def __init__(\n        self,\n        default_ttl: float = 300.0,\n        max_size: Optional[int] = None,\n        cleanup_interval: float = 60.0,\n        eviction_policy: EvictionPolicy = EvictionPolicy.LRU,\n        on_evicted: Optional[Callable[[str, T], Awaitable[None]]] = None,\n    ):\n        \"\"\"\n        Initialize TTL cache.\n\n        Args:\n            default_ttl (float): Default time-to-live in seconds\n            max_size (Optional[int]): Maximum cache size (None for unlimited)\n            cleanup_interval (float): Cleanup interval in seconds\n            eviction_policy (EvictionPolicy): Cache eviction policy\n            on_evicted (Optional[Callable[[str, T], Awaitable[None]]]): Callback for evicted items\n        \"\"\"\n</code></pre>"},{"location":"api/cache/#methods","title":"Methods","text":""},{"location":"api/cache/#async-def-setkey-str-value-t-ttl-optionalfloat-none-none","title":"<code>async def set(key: str, value: T, ttl: Optional[float] = None) -&gt; None</code>","text":"<p>Set a cache value with optional TTL override.</p> <pre><code># Set with default TTL\nawait cache.set(\"key\", \"value\")\n\n# Set with custom TTL\nawait cache.set(\"key\", \"value\", ttl=60.0)  # 1 minute TTL\n</code></pre>"},{"location":"api/cache/#async-def-getkey-str-default-optionalt-none-optionalt","title":"<code>async def get(key: str, default: Optional[T] = None) -&gt; Optional[T]</code>","text":"<p>Get a cache value.</p> <pre><code># Get value with default\nvalue = await cache.get(\"key\", default=\"default_value\")\n\n# Check if value exists\nif (value := await cache.get(\"key\")) is not None:\n    print(f\"Found value: {value}\")\n</code></pre>"},{"location":"api/cache/#async-def-deletekey-str-none","title":"<code>async def delete(key: str) -&gt; None</code>","text":"<p>Delete a cache value.</p> <pre><code>await cache.delete(\"key\")\n</code></pre>"},{"location":"api/cache/#async-def-clear-none","title":"<code>async def clear() -&gt; None</code>","text":"<p>Clear all cache entries.</p> <pre><code>await cache.clear()\n</code></pre>"},{"location":"api/cache/#async-def-touchkey-str-ttl-optionalfloat-none-bool","title":"<code>async def touch(key: str, ttl: Optional[float] = None) -&gt; bool</code>","text":"<p>Update item TTL.</p> <pre><code># Extend TTL\nif await cache.touch(\"key\", ttl=300.0):\n    print(\"TTL updated\")\n</code></pre>"},{"location":"api/cache/#batch-operations","title":"Batch Operations","text":"<pre><code># Set multiple values\nawait cache.set_many({\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n})\n\n# Get multiple values\nvalues = await cache.get_many([\"key1\", \"key2\"])\n\n# Delete multiple values\nawait cache.delete_many([\"key1\", \"key2\"])\n</code></pre>"},{"location":"api/cache/#distributedcache","title":"DistributedCache","text":"<p><code>DistributedCache[T]</code> provides distributed caching across multiple nodes.</p>"},{"location":"api/cache/#basic-usage_1","title":"Basic Usage","text":"<pre><code>from mtaio.cache import DistributedCache\n\n# Create distributed cache\ncache = DistributedCache[str](\n    nodes=[\n        (\"localhost\", 5000),\n        (\"localhost\", 5001)\n    ],\n    replication_factor=2,\n    read_quorum=1\n)\n\nasync with cache:\n    await cache.set(\"key\", \"value\")\n    value = await cache.get(\"key\")\n</code></pre>"},{"location":"api/cache/#class-reference_1","title":"Class Reference","text":"<pre><code>class DistributedCache[T]:\n    def __init__(\n        self,\n        nodes: List[Tuple[str, int]],\n        replication_factor: int = 2,\n        read_quorum: int = 1,\n    ):\n        \"\"\"\n        Initialize distributed cache.\n\n        Args:\n            nodes (List[Tuple[str, int]]): List of cache node addresses\n            replication_factor (int): Number of replicas\n            read_quorum (int): Number of nodes for read consensus\n        \"\"\"\n</code></pre>"},{"location":"api/cache/#methods_1","title":"Methods","text":"<p>Similar to TTLCache, but with distributed functionality:</p>"},{"location":"api/cache/#async-def-setkey-str-value-t-ttl-optionalfloat-none-none_1","title":"<code>async def set(key: str, value: T, ttl: Optional[float] = None) -&gt; None</code>","text":"<p>Set value across distributed nodes.</p> <pre><code>await cache.set(\"key\", \"value\")\n</code></pre>"},{"location":"api/cache/#async-def-getkey-str-optionalt","title":"<code>async def get(key: str) -&gt; Optional[T]</code>","text":"<p>Get value from distributed cache with quorum.</p> <pre><code>value = await cache.get(\"key\")\n</code></pre>"},{"location":"api/cache/#cache-policies","title":"Cache Policies","text":""},{"location":"api/cache/#evictionpolicy","title":"EvictionPolicy","text":"<p>Enum defining cache eviction policies:</p> <pre><code>class EvictionPolicy(Enum):\n    LRU = auto()  # Least Recently Used\n    LFU = auto()  # Least Frequently Used\n    FIFO = auto() # First In First Out\n</code></pre>"},{"location":"api/cache/#specialized-cache-classes","title":"Specialized Cache Classes","text":""},{"location":"api/cache/#ttllrucache","title":"TTLLRUCache","text":"<p>LRU-specific TTL cache implementation.</p> <pre><code>from mtaio.cache import TTLLRUCache\n\ncache = TTLLRUCache[str](max_size=1000)\nawait cache.set(\"key\", \"value\")\n</code></pre>"},{"location":"api/cache/#ttllfucache","title":"TTLLFUCache","text":"<p>LFU-specific TTL cache implementation.</p> <pre><code>from mtaio.cache import TTLLFUCache\n\ncache = TTLLFUCache[str](max_size=1000)\nawait cache.set(\"key\", \"value\")\n</code></pre>"},{"location":"api/cache/#ttlfifocache","title":"TTLFIFOCache","text":"<p>FIFO-specific TTL cache implementation.</p> <pre><code>from mtaio.cache import TTLFIFOCache\n\ncache = TTLFIFOCache[str](max_size=1000)\nawait cache.set(\"key\", \"value\")\n</code></pre>"},{"location":"api/cache/#statistics-and-monitoring","title":"Statistics and Monitoring","text":"<p>Cache implementations provide statistics tracking:</p> <pre><code>from mtaio.cache import TTLCache\n\ncache = TTLCache[str]()\n\n# Get cache statistics\nstats = cache.get_stats()\nprint(f\"Cache hits: {stats.hits}\")\nprint(f\"Cache misses: {stats.misses}\")\nprint(f\"Hit rate: {stats.hit_rate:.2f}\")\n</code></pre>"},{"location":"api/cache/#cachestats-class","title":"CacheStats Class","text":"<pre><code>@dataclass\nclass CacheStats:\n    hits: int = 0\n    misses: int = 0\n    evictions: int = 0\n    expirations: int = 0\n    items: int = 0\n</code></pre>"},{"location":"api/cache/#error-handling","title":"Error Handling","text":"<p>The cache module defines several exception types:</p> <pre><code>from mtaio.exceptions import (\n    CacheError,          # Base cache exception\n    CacheKeyError,       # Invalid or not found key\n    CacheConnectionError # Connection failure\n)\n\ntry:\n    await cache.get(\"key\")\nexcept CacheKeyError:\n    print(\"Key not found\")\nexcept CacheConnectionError:\n    print(\"Connection failed\")\nexcept CacheError as e:\n    print(f\"Cache error: {e}\")\n</code></pre>"},{"location":"api/cache/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api/cache/#custom-cache-implementations","title":"Custom Cache Implementations","text":"<p>Creating a custom cache implementation:</p> <pre><code>from mtaio.cache import TTLCache\nfrom mtaio.typing import CacheKey, CacheValue\n\nclass CustomCache(TTLCache[str]):\n    async def pre_set(self, key: str, value: str) -&gt; None:\n        # Pre-processing before cache set\n        pass\n\n    async def post_get(self, key: str, value: Optional[str]) -&gt; Optional[str]:\n        # Post-processing after cache get\n        return value\n</code></pre>"},{"location":"api/cache/#cache-decorators","title":"Cache Decorators","text":"<p>Using cache decorators for function results:</p> <pre><code>from mtaio.decorators import with_cache\nfrom mtaio.cache import TTLCache\n\ncache = TTLCache[str]()\n\n@with_cache(cache)\nasync def expensive_operation(param: str) -&gt; str:\n    # Expensive computation\n    return result\n</code></pre>"},{"location":"api/cache/#best-practices","title":"Best Practices","text":"<ol> <li> <p>TTL Configuration <pre><code># Short TTL for frequently changing data\nvolatile_cache = TTLCache[str](default_ttl=60.0)\n\n# Longer TTL for stable data\nstable_cache = TTLCache[str](default_ttl=3600.0)\n</code></pre></p> </li> <li> <p>Resource Management <pre><code>async with TTLCache[str]() as cache:\n    # Cache is automatically cleaned up\n    pass\n</code></pre></p> </li> <li> <p>Error Handling <pre><code>try:\n    async with cache.transaction() as txn:\n        await txn.set(\"key\", \"value\")\nexcept CacheError:\n    # Handle cache errors\n    pass\n</code></pre></p> </li> <li> <p>Monitoring <pre><code># Monitor cache performance\nstats = cache.get_stats()\nif stats.hit_rate &lt; 0.5:\n    logger.warning(\"Low cache hit rate\")\n</code></pre></p> </li> </ol>"},{"location":"api/cache/#see-also","title":"See Also","text":"<ul> <li>Core API Reference for base functionality</li> <li>Events API Reference for cache events</li> <li>Resources API Reference for resource management</li> <li>Examples Repository</li> </ul>"},{"location":"api/core/","title":"Core API Reference","text":"<p>The <code>mtaio.core</code> module provides fundamental components for asynchronous operations, including task execution, queues, and primitive data structures.</p>"},{"location":"api/core/#task-execution","title":"Task Execution","text":""},{"location":"api/core/#taskexecutor","title":"TaskExecutor","text":"<p>The <code>TaskExecutor</code> class provides controlled execution of asynchronous tasks with concurrency limits and resource management.</p>"},{"location":"api/core/#basic-usage","title":"Basic Usage","text":"<pre><code>from mtaio.core import TaskExecutor\n\nasync def process_item(item: str) -&gt; str:\n    return f\"Processed: {item}\"\n\n# Basic execution\nasync with TaskExecutor() as executor:\n    # Single task\n    result = await executor.run(process_item(\"data\"))\n\n    # Multiple tasks with concurrency limit\n    items = [\"item1\", \"item2\", \"item3\"]\n    results = await executor.gather(\n        *(process_item(item) for item in items),\n        limit=2  # Maximum 2 concurrent tasks\n    )\n</code></pre>"},{"location":"api/core/#class-reference","title":"Class Reference","text":"<pre><code>class TaskExecutor:\n    def __init__(\n        self,\n        thread_pool: Optional[concurrent.futures.ThreadPoolExecutor] = None\n    ):\n        \"\"\"\n        Initialize task executor.\n\n        Args:\n            thread_pool: Optional thread pool for executing synchronous functions\n        \"\"\"\n\n    async def run(\n        self,\n        coro: Awaitable[T],\n        *,\n        timeout: Optional[float] = None\n    ) -&gt; T:\n        \"\"\"\n        Run a single coroutine with optional timeout.\n\n        Args:\n            coro: Coroutine to execute\n            timeout: Optional timeout in seconds\n\n        Returns:\n            Result of the coroutine\n\n        Raises:\n            TimeoutError: If operation times out\n            ExecutionError: If execution fails\n        \"\"\"\n\n    async def gather(\n        self,\n        *coroutines: Coroutine[Any, Any, T],\n        limit: Optional[int] = None,\n        return_exceptions: bool = False,\n    ) -&gt; List[T]:\n        \"\"\"\n        Execute multiple coroutines with optional concurrency limit.\n\n        Args:\n            *coroutines: Coroutines to execute\n            limit: Maximum number of concurrent executions\n            return_exceptions: Whether to return exceptions instead of raising\n\n        Returns:\n            List of results in the order of input coroutines\n\n        Raises:\n            ExecutionError: If execution fails and return_exceptions is False\n        \"\"\"\n\n    async def map(\n        self,\n        func: AsyncCallable[T],\n        *iterables: Any,\n        limit: Optional[int] = None,\n        return_exceptions: bool = False,\n    ) -&gt; List[T]:\n        \"\"\"\n        Apply function to every item of iterables concurrently.\n\n        Args:\n            func: Async function to apply\n            *iterables: Input iterables\n            limit: Maximum number of concurrent executions\n            return_exceptions: Whether to return exceptions instead of raising\n\n        Returns:\n            List of results\n        \"\"\"\n</code></pre>"},{"location":"api/core/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api/core/#thread-pool-execution","title":"Thread Pool Execution","text":"<pre><code>from mtaio.core import TaskExecutor\n\nasync def process_with_thread_pool():\n    async with TaskExecutor() as executor:\n        # Run CPU-bound function in thread pool\n        result = await executor.run_in_thread(\n            cpu_intensive_function,\n            arg1,\n            arg2\n        )\n</code></pre>"},{"location":"api/core/#error-handling","title":"Error Handling","text":"<pre><code>from mtaio.exceptions import ExecutionError, TimeoutError\n\nasync def handle_execution_errors():\n    try:\n        async with TaskExecutor() as executor:\n            results = await executor.gather(\n                *tasks,\n                return_exceptions=True\n            )\n\n            for result in results:\n                if isinstance(result, Exception):\n                    print(f\"Task failed: {result}\")\n    except ExecutionError as e:\n        print(f\"Execution failed: {e}\")\n</code></pre>"},{"location":"api/core/#queues","title":"Queues","text":""},{"location":"api/core/#asyncqueue","title":"AsyncQueue","text":"<p>Generic asynchronous queue implementation.</p>"},{"location":"api/core/#basic-usage_1","title":"Basic Usage","text":"<pre><code>from mtaio.core import AsyncQueue\n\nasync def producer_consumer():\n    queue: AsyncQueue[str] = AsyncQueue(maxsize=10)\n\n    # Producer\n    await queue.put(\"item\")\n\n    # Consumer\n    item = await queue.get()\n    queue.task_done()\n\n    # Wait for queue to be empty\n    await queue.join()\n</code></pre>"},{"location":"api/core/#class-reference_1","title":"Class Reference","text":"<pre><code>class AsyncQueue[T]:\n    def __init__(self, maxsize: int = 0):\n        \"\"\"\n        Initialize async queue.\n\n        Args:\n            maxsize: Maximum queue size (0 for unlimited)\n        \"\"\"\n\n    async def put(self, item: T) -&gt; None:\n        \"\"\"Put an item into the queue.\"\"\"\n\n    async def get(self) -&gt; T:\n        \"\"\"Remove and return an item from the queue.\"\"\"\n\n    def task_done(self) -&gt; None:\n        \"\"\"Indicate that a formerly enqueued task is complete.\"\"\"\n\n    async def join(self) -&gt; None:\n        \"\"\"Wait until all items in the queue have been processed.\"\"\"\n\n    def qsize(self) -&gt; int:\n        \"\"\"Return the current size of the queue.\"\"\"\n\n    def empty(self) -&gt; bool:\n        \"\"\"Return True if the queue is empty.\"\"\"\n\n    def full(self) -&gt; bool:\n        \"\"\"Return True if the queue is full.\"\"\"\n</code></pre>"},{"location":"api/core/#specialized-queues","title":"Specialized Queues","text":""},{"location":"api/core/#priorityqueue","title":"PriorityQueue","text":"<p>Queue that retrieves items based on priority.</p> <pre><code>from mtaio.core import PriorityQueue\n\nasync def priority_queue_example():\n    queue: PriorityQueue[str] = PriorityQueue()\n\n    # Add items with priority (lower number = higher priority)\n    await queue.put(\"normal task\", priority=2)\n    await queue.put(\"urgent task\", priority=1)\n\n    # Items are retrieved in priority order\n    item = await queue.get()  # Returns \"urgent task\"\n</code></pre>"},{"location":"api/core/#lifoqueue","title":"LIFOQueue","text":"<p>Last-In-First-Out queue implementation.</p> <pre><code>from mtaio.core import LIFOQueue\n\nasync def lifo_queue_example():\n    stack: LIFOQueue[str] = LIFOQueue()\n\n    await stack.put(\"first\")\n    await stack.put(\"second\")\n\n    item = await stack.get()  # Returns \"second\"\n</code></pre>"},{"location":"api/core/#synchronization-primitives","title":"Synchronization Primitives","text":""},{"location":"api/core/#latch","title":"Latch","text":"<p>Countdown latch implementation for synchronization.</p> <pre><code>from mtaio.core import Latch\n\nasync def latch_example():\n    # Create latch with count of 3\n    latch = Latch(3)\n\n    # Decrease count\n    await latch.count_down()\n\n    # Wait for count to reach 0\n    await latch.wait(timeout=5.0)  # Optional timeout\n</code></pre>"},{"location":"api/core/#class-reference_2","title":"Class Reference","text":"<pre><code>class Latch:\n    def __init__(self, count: int):\n        \"\"\"\n        Initialize latch.\n\n        Args:\n            count: Initial count\n        \"\"\"\n\n    async def count_down(self) -&gt; None:\n        \"\"\"Decrease the count by one.\"\"\"\n\n    async def wait(self, timeout: Optional[float] = None) -&gt; bool:\n        \"\"\"\n        Wait for count to reach zero.\n\n        Args:\n            timeout: Maximum time to wait in seconds\n\n        Returns:\n            True if count reached zero, False if timeout occurred\n        \"\"\"\n\n    def get_count(self) -&gt; int:\n        \"\"\"Get current count.\"\"\"\n</code></pre>"},{"location":"api/core/#best-practices","title":"Best Practices","text":""},{"location":"api/core/#resource-management","title":"Resource Management","text":"<pre><code># Always use async context managers for cleanup\nasync with TaskExecutor() as executor:\n    # Resources are automatically cleaned up\n    pass\n\n# Handle queue cleanup\nqueue = AsyncQueue[str]()\ntry:\n    await queue.put(\"item\")\n    item = await queue.get()\nfinally:\n    # Clean up any remaining items\n    while not queue.empty():\n        await queue.get()\n</code></pre>"},{"location":"api/core/#concurrency-control","title":"Concurrency Control","text":"<pre><code># Limit concurrent tasks\nasync with TaskExecutor() as executor:\n    results = await executor.gather(\n        *long_running_tasks,\n        limit=5  # Prevent too many concurrent tasks\n    )\n\n# Control queue size\nqueue = AsyncQueue[str](maxsize=100)  # Prevent unbounded growth\n</code></pre>"},{"location":"api/core/#error-handling_1","title":"Error Handling","text":"<pre><code>from mtaio.exceptions import ExecutionError\n\nasync def handle_execution():\n    try:\n        async with TaskExecutor() as executor:\n            await executor.run(risky_operation())\n    except ExecutionError as e:\n        # Handle execution error\n        logger.error(f\"Execution failed: {e}\")\n    except TimeoutError as e:\n        # Handle timeout\n        logger.error(f\"Operation timed out: {e}\")\n</code></pre>"},{"location":"api/core/#performance-tips","title":"Performance Tips","text":"<ol> <li> <p>Task Batching <pre><code># Process tasks in batches for better throughput\nasync with TaskExecutor() as executor:\n    for batch in chunks(tasks, size=10):\n        await executor.gather(*batch, limit=5)\n</code></pre></p> </li> <li> <p>Queue Sizing <pre><code># Set appropriate queue sizes\nqueue = AsyncQueue[str](\n    maxsize=1000  # Prevent memory issues\n)\n</code></pre></p> </li> <li> <p>Resource Limits <pre><code># Control resource usage\nexecutor = TaskExecutor(\n    thread_pool=ThreadPoolExecutor(max_workers=4)\n)\n</code></pre></p> </li> </ol>"},{"location":"api/core/#see-also","title":"See Also","text":"<ul> <li>Cache API Reference for caching functionality</li> <li>Events API Reference for event handling</li> <li>Resources API Reference for resource management</li> <li>Examples Repository</li> </ul>"},{"location":"api/data/","title":"Data API Reference","text":"<p>The <code>mtaio.data</code> module provides components for data processing and transformation, including pipelines, streams, and observables.</p>"},{"location":"api/data/#pipeline-processing","title":"Pipeline Processing","text":""},{"location":"api/data/#pipeline","title":"Pipeline","text":"<p>The <code>Pipeline</code> class provides a framework for sequential data processing through configurable stages.</p>"},{"location":"api/data/#basic-usage","title":"Basic Usage","text":"<pre><code>from mtaio.data import Pipeline, Stage\n\n# Define processing stages\nclass ValidationStage(Stage[dict, dict]):\n    async def process(self, data: dict) -&gt; dict:\n        if \"id\" not in data:\n            raise ValueError(\"Missing id field\")\n        return data\n\nclass EnrichmentStage(Stage[dict, dict]):\n    async def process(self, data: dict) -&gt; dict:\n        data[\"timestamp\"] = time.time()\n        return data\n\n# Create and use pipeline\nasync def process_data():\n    pipeline = Pipeline()\n    pipeline.add_stage(ValidationStage())\n    pipeline.add_stage(EnrichmentStage())\n\n    async with pipeline:\n        result = await pipeline.process({\"id\": \"123\"})\n</code></pre>"},{"location":"api/data/#class-reference","title":"Class Reference","text":"<pre><code>class Pipeline[T, U]:\n    def __init__(self, buffer_size: int = 0):\n        \"\"\"\n        Initialize pipeline.\n\n        Args:\n            buffer_size: Size of the buffer between stages\n        \"\"\"\n\n    def add_stage(self, stage: Stage) -&gt; \"Pipeline\":\n        \"\"\"Add a processing stage.\"\"\"\n\n    async def process(self, data: T) -&gt; U:\n        \"\"\"Process a single item through the pipeline.\"\"\"\n\n    async def process_many(\n        self,\n        items: Union[Iterable[T], AsyncIterable[T]]\n    ) -&gt; List[U]:\n        \"\"\"Process multiple items through the pipeline.\"\"\"\n</code></pre>"},{"location":"api/data/#stage","title":"Stage","text":"<p>Base class for pipeline stages.</p> <pre><code>from mtaio.data import Stage\n\nclass CustomStage(Stage[T, U]):\n    async def process(self, data: T) -&gt; U:\n        \"\"\"Process a single item.\"\"\"\n        return processed_data\n\n    async def setup(self) -&gt; None:\n        \"\"\"Called when pipeline starts.\"\"\"\n        pass\n\n    async def cleanup(self) -&gt; None:\n        \"\"\"Called when pipeline ends.\"\"\"\n        pass\n</code></pre>"},{"location":"api/data/#provided-stages","title":"Provided Stages","text":""},{"location":"api/data/#batchstage","title":"BatchStage","text":"<p>Processes data in batches.</p> <pre><code>from mtaio.data import BatchStage\n\nclass AverageBatchStage(BatchStage[float, float]):\n    def __init__(self, batch_size: int = 10):\n        super().__init__(batch_size)\n\n    async def process_batch(self, batch: List[float]) -&gt; float:\n        return sum(batch) / len(batch)\n</code></pre>"},{"location":"api/data/#filterstage","title":"FilterStage","text":"<p>Filters data based on a predicate.</p> <pre><code>from mtaio.data import FilterStage\n\n# Create filter stage\nfilter_stage = FilterStage(lambda x: x &gt; 0)\n\n# Or with async predicate\nasync def async_predicate(x):\n    return x &gt; await get_threshold()\n\nfilter_stage = FilterStage(async_predicate)\n</code></pre>"},{"location":"api/data/#mapstage","title":"MapStage","text":"<p>Transforms data using a mapping function.</p> <pre><code>from mtaio.data import MapStage\n\n# Create map stage\nmap_stage = MapStage(lambda x: x * 2)\n\n# Or with async mapping\nasync def async_transform(x):\n    return await process_value(x)\n\nmap_stage = MapStage(async_transform)\n</code></pre>"},{"location":"api/data/#stream-processing","title":"Stream Processing","text":""},{"location":"api/data/#stream","title":"Stream","text":"<p>The <code>Stream</code> class provides a fluent interface for processing sequences of data.</p>"},{"location":"api/data/#basic-usage_1","title":"Basic Usage","text":"<pre><code>from mtaio.data import Stream\n\nasync def process_stream():\n    stream = Stream.from_iterable([1, 2, 3, 4, 5])\n\n    result = await (stream\n        .map(lambda x: x * 2)\n        .filter(lambda x: x &gt; 5)\n        .reduce(lambda acc, x: acc + x))\n</code></pre>"},{"location":"api/data/#class-reference_1","title":"Class Reference","text":"<pre><code>class Stream[T]:\n    @classmethod\n    def from_iterable(\n        cls,\n        iterable: Union[Iterable[T], AsyncIterable[T]]\n    ) -&gt; \"Stream[T]\":\n        \"\"\"Create stream from iterable.\"\"\"\n\n    def map(\n        self,\n        func: Union[Callable[[T], U], Callable[[T], Awaitable[U]]]\n    ) -&gt; \"Stream[U]\":\n        \"\"\"Transform items using mapping function.\"\"\"\n\n    def filter(\n        self,\n        predicate: Union[Callable[[T], bool], Callable[[T], Awaitable[bool]]]\n    ) -&gt; \"Stream[T]\":\n        \"\"\"Filter items using predicate.\"\"\"\n\n    async def reduce(\n        self,\n        func: Union[Callable[[U, T], U], Callable[[U, T], Awaitable[U]]],\n        initial: Optional[U] = None,\n    ) -&gt; U:\n        \"\"\"Reduce stream to single value.\"\"\"\n</code></pre>"},{"location":"api/data/#stream-operations","title":"Stream Operations","text":""},{"location":"api/data/#windowing","title":"Windowing","text":"<pre><code>from mtaio.data import Stream\n\nasync def window_example():\n    stream = Stream.from_iterable(range(10))\n\n    # Sliding window\n    async for window in stream.window(size=3, step=1):\n        print(f\"Window: {window}\")  # [0,1,2], [1,2,3], ...\n</code></pre>"},{"location":"api/data/#batching","title":"Batching","text":"<pre><code>from mtaio.data import Stream\n\nasync def batch_example():\n    stream = Stream.from_iterable(range(10))\n\n    # Process in batches\n    async for batch in stream.batch(size=3):\n        print(f\"Batch: {batch}\")  # [0,1,2], [3,4,5], ...\n</code></pre>"},{"location":"api/data/#observable-pattern","title":"Observable Pattern","text":""},{"location":"api/data/#observable","title":"Observable","text":"<p>The <code>Observable</code> class implements the observer pattern for reactive data processing.</p>"},{"location":"api/data/#basic-usage_2","title":"Basic Usage","text":"<pre><code>from mtaio.data import Observable, Change, ChangeType\n\nclass DataStore(Observable[dict]):\n    def __init__(self):\n        super().__init__()\n        self._data = {}\n\n    async def update(self, key: str, value: Any) -&gt; None:\n        old_value = self._data.get(key)\n        self._data[key] = value\n\n        await self.notify(Change(\n            type=ChangeType.UPDATE,\n            path=f\"data.{key}\",\n            value=value,\n            old_value=old_value\n        ))\n</code></pre>"},{"location":"api/data/#observers","title":"Observers","text":"<pre><code># Add observer\n@data_store.on_change\nasync def handle_change(change: Change[dict]):\n    print(f\"Value changed: {change.value}\")\n\n# One-time observer\n@data_store.once\nasync def handle_first_change(change: Change[dict]):\n    print(\"First change only\")\n</code></pre>"},{"location":"api/data/#batch-operations","title":"Batch Operations","text":"<pre><code>from mtaio.data import Observable\n\nasync def batch_updates():\n    store = DataStore()\n\n    async with store.batch_operations():\n        await store.update(\"key1\", \"value1\")\n        await store.update(\"key2\", \"value2\")\n        # Observers notified once with all changes\n</code></pre>"},{"location":"api/data/#best-practices","title":"Best Practices","text":""},{"location":"api/data/#pipeline-design","title":"Pipeline Design","text":"<pre><code># Use type hints for clarity\nclass ProcessingPipeline(Pipeline[dict, dict]):\n    def __init__(self):\n        super().__init__()\n        self.add_stage(ValidationStage())\n        self.add_stage(TransformationStage())\n        self.add_stage(EnrichmentStage())\n\n# Handle cleanup properly\nasync with ProcessingPipeline() as pipeline:\n    results = await pipeline.process_many(items)\n</code></pre>"},{"location":"api/data/#stream-processing_1","title":"Stream Processing","text":"<pre><code># Chain operations efficiently\nresult = await (Stream.from_iterable(data)\n    .filter(is_valid)\n    .map(transform)\n    .batch(100)\n    .reduce(aggregate))\n\n# Use async predicates when needed\nasync def is_valid(item: dict) -&gt; bool:\n    return await validate(item)\n</code></pre>"},{"location":"api/data/#observable-implementation","title":"Observable Implementation","text":"<pre><code># Implement custom observable\nclass DataManager(Observable[T]):\n    def __init__(self):\n        super().__init__()\n        self._cleanup_handlers = []\n\n    async def cleanup(self):\n        for handler in self._cleanup_handlers:\n            self.remove_observer(handler)\n</code></pre>"},{"location":"api/data/#performance-considerations","title":"Performance Considerations","text":"<ol> <li> <p>Pipeline Buffering <pre><code># Use appropriate buffer sizes\npipeline = Pipeline(buffer_size=1000)\n</code></pre></p> </li> <li> <p>Batch Processing <pre><code># Process data in optimal batch sizes\nasync for batch in stream.batch(size=optimal_batch_size):\n    await process_batch(batch)\n</code></pre></p> </li> <li> <p>Observer Cleanup <pre><code># Remove observers when no longer needed\nobservable.remove_observer(handler)\n</code></pre></p> </li> </ol>"},{"location":"api/data/#see-also","title":"See Also","text":"<ul> <li>Core API Reference for basic functionality</li> <li>Cache API Reference for caching operations</li> <li>Events API Reference for event handling</li> <li>Examples Repository</li> </ul>"},{"location":"api/decorators/","title":"Decorators API Reference","text":"<p>The <code>mtaio.decorators</code> module provides utility decorators for enhancing async functions with additional functionality such as caching, retries, rate limiting, and more.</p>"},{"location":"api/decorators/#adapters","title":"Adapters","text":"<p>Decorators for adapting between different async patterns.</p>"},{"location":"api/decorators/#async_adapter","title":"async_adapter","text":"<p>Converts synchronous functions to asynchronous functions.</p> <pre><code>from mtaio.decorators import async_adapter\n\n# Basic usage\n@async_adapter\ndef cpu_intensive(data: str) -&gt; str:\n    # CPU-intensive operation\n    return processed_data\n\n# With custom executor\n@async_adapter(executor=ThreadPoolExecutor(max_workers=4))\ndef parallel_operation(data: str) -&gt; str:\n    return processed_data\n\n# Using the decorated function\nasync def main():\n    result = await cpu_intensive(\"data\")\n</code></pre>"},{"location":"api/decorators/#async_iterator","title":"async_iterator","text":"<p>Converts synchronous iterables to async iterators.</p> <pre><code>from mtaio.decorators import async_iterator\n\n@async_iterator(chunk_size=10)\ndef generate_data() -&gt; Iterable[int]:\n    return range(1000)\n\nasync def process_data():\n    async for items in generate_data():\n        # Process chunk of items\n        pass\n</code></pre>"},{"location":"api/decorators/#async_context_adapter","title":"async_context_adapter","text":"<p>Converts synchronous context managers to async context managers.</p> <pre><code>from mtaio.decorators import async_context_adapter\nfrom contextlib import contextmanager\n\n@async_context_adapter\n@contextmanager\ndef resource_manager():\n    resource = acquire_resource()\n    try:\n        yield resource\n    finally:\n        release_resource(resource)\n\nasync def use_resource():\n    async with resource_manager() as resource:\n        await process(resource)\n</code></pre>"},{"location":"api/decorators/#control-flow","title":"Control Flow","text":"<p>Decorators for controlling function execution.</p>"},{"location":"api/decorators/#with_timeout","title":"with_timeout","text":"<p>Adds timeout control to async functions.</p> <pre><code>from mtaio.decorators import with_timeout\n\n@with_timeout(5.0)  # 5 seconds timeout\nasync def api_call() -&gt; dict:\n    return await make_request()\n\n# With custom error message\n@with_timeout(10.0, error_message=\"API call timed out\")\nasync def long_operation() -&gt; None:\n    await process_data()\n</code></pre>"},{"location":"api/decorators/#with_retry","title":"with_retry","text":"<p>Adds retry logic for failed operations.</p> <pre><code>from mtaio.decorators import with_retry\n\n# Basic retry\n@with_retry(max_attempts=3)\nasync def unstable_operation() -&gt; str:\n    return await flaky_service_call()\n\n# Advanced retry configuration\n@with_retry(\n    max_attempts=5,\n    delay=1.0,\n    backoff_factor=2.0,\n    exceptions=(ConnectionError, TimeoutError)\n)\nasync def network_operation() -&gt; bytes:\n    return await fetch_data()\n</code></pre>"},{"location":"api/decorators/#with_rate_limit","title":"with_rate_limit","text":"<p>Adds rate limiting to function calls.</p> <pre><code>from mtaio.decorators import with_rate_limit\n\n@with_rate_limit(10.0)  # 10 calls per second\nasync def rate_limited_api() -&gt; dict:\n    return await api_call()\n\n# With burst allowance\n@with_rate_limit(rate=5.0, burst=10)\nasync def burst_allowed_operation() -&gt; None:\n    await process()\n</code></pre>"},{"location":"api/decorators/#with_circuit_breaker","title":"with_circuit_breaker","text":"<p>Implements the circuit breaker pattern.</p> <pre><code>from mtaio.decorators import with_circuit_breaker\n\n@with_circuit_breaker(\n    failure_threshold=5,    # Open after 5 failures\n    reset_timeout=60.0,     # Try to reset after 60 seconds\n    half_open_timeout=5.0   # Allow one test call after timeout\n)\nasync def protected_operation() -&gt; str:\n    return await external_service_call()\n</code></pre>"},{"location":"api/decorators/#with_fallback","title":"with_fallback","text":"<p>Provides fallback behavior for failed operations.</p> <pre><code>from mtaio.decorators import with_fallback\n\n# With static fallback\n@with_fallback(\"default_value\")\nasync def get_data() -&gt; str:\n    return await fetch_data()\n\n# With fallback function\n@with_fallback(lambda: get_cached_data())\nasync def fetch_user(user_id: str) -&gt; dict:\n    return await db_query(user_id)\n</code></pre>"},{"location":"api/decorators/#with_cache","title":"with_cache","text":"<p>Adds caching to function results.</p> <pre><code>from mtaio.decorators import with_cache\nfrom mtaio.cache import TTLCache\n\ncache = TTLCache[str]()\n\n@with_cache(cache)\nasync def expensive_calculation(input: str) -&gt; str:\n    return await compute_result(input)\n\n# With custom key function\n@with_cache(cache, key_func=lambda x, y: f\"{x}:{y}\")\nasync def parameterized_operation(x: int, y: int) -&gt; int:\n    return await compute(x, y)\n</code></pre>"},{"location":"api/decorators/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api/decorators/#combining-decorators","title":"Combining Decorators","text":"<p>Decorators can be combined to add multiple behaviors:</p> <pre><code>@with_timeout(5.0)\n@with_retry(max_attempts=3)\n@with_cache(cache)\nasync def robust_operation() -&gt; dict:\n    return await fetch_data()\n</code></pre>"},{"location":"api/decorators/#custom-adapters","title":"Custom Adapters","text":"<p>Creating custom adapters:</p> <pre><code>from mtaio.decorators import CallbackAdapter\n\nclass CustomAdapter:\n    def __init__(self, timeout: float = 30.0):\n        self.adapter = CallbackAdapter[str](timeout)\n\n    def callback(self, result: str) -&gt; None:\n        self.adapter.callback(result)\n\n    async def wait(self) -&gt; str:\n        return await self.adapter.wait()\n</code></pre>"},{"location":"api/decorators/#error-handling","title":"Error Handling","text":"<p>Handling decorator-specific errors:</p> <pre><code>from mtaio.exceptions import (\n    TimeoutError,\n    RetryError,\n    RateLimitError,\n    CircuitBreakerError\n)\n\nasync def handle_errors():\n    try:\n        await protected_operation()\n    except TimeoutError:\n        # Handle timeout\n        pass\n    except RetryError as e:\n        # Handle retry exhaustion\n        print(f\"Failed after {e.attempts} attempts\")\n    except RateLimitError as e:\n        # Handle rate limit\n        print(f\"Rate limit exceeded: {e.limit}\")\n</code></pre>"},{"location":"api/decorators/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Order of Decorators <pre><code># Timeout should be outermost to properly control execution time\n@with_timeout(5.0)\n@with_retry(max_attempts=3)\n@with_cache(cache)\nasync def optimized_operation():\n    pass\n</code></pre></p> </li> <li> <p>Resource Cleanup <pre><code># Use async context managers for proper cleanup\n@async_context_adapter\n@contextmanager\ndef managed_resource():\n    try:\n        yield setup_resource()\n    finally:\n        cleanup_resource()\n</code></pre></p> </li> <li> <p>Error Handling <pre><code># Handle specific exceptions for better error control\n@with_fallback(\n    fallback=default_value,\n    exceptions=(ConnectionError, TimeoutError)\n)\nasync def safe_operation():\n    pass\n</code></pre></p> </li> </ol>"},{"location":"api/decorators/#performance-considerations","title":"Performance Considerations","text":"<ol> <li> <p>Caching Strategy <pre><code># Use appropriate cache settings\n@with_cache(\n    TTLCache[str](\n        default_ttl=300.0,  # 5 minutes\n        max_size=1000\n    )\n)\nasync def cached_operation():\n    pass\n</code></pre></p> </li> <li> <p>Rate Limiting <pre><code># Balance between protection and performance\n@with_rate_limit(\n    rate=100.0,    # 100 calls per second\n    burst=20       # Allow bursts\n)\nasync def high_throughput_operation():\n    pass\n</code></pre></p> </li> <li> <p>Retry Timing <pre><code># Use exponential backoff for retries\n@with_retry(\n    delay=1.0,\n    backoff_factor=2.0  # 1s, 2s, 4s, 8s...\n)\nasync def network_operation():\n    pass\n</code></pre></p> </li> </ol>"},{"location":"api/decorators/#see-also","title":"See Also","text":"<ul> <li>Core API Reference for base functionality</li> <li>Cache API Reference for caching operations</li> <li>Resources API Reference for resource management</li> <li>Examples Repository</li> </ul>"},{"location":"api/events/","title":"Events API Reference","text":"<p>The <code>mtaio.events</code> module provides a robust event handling system for building event-driven applications.</p>"},{"location":"api/events/#eventemitter","title":"EventEmitter","text":""},{"location":"api/events/#basic-usage","title":"Basic Usage","text":"<pre><code>from mtaio.events import EventEmitter\n\n# Create emitter\nemitter = EventEmitter()\n\n# Define handler\n@emitter.on(\"user_login\")\nasync def handle_login(event):\n    user = event.data\n    print(f\"User {user['name']} logged in\")\n\n# Emit event\nawait emitter.emit(\"user_login\", {\n    \"name\": \"John\",\n    \"id\": \"123\"\n})\n</code></pre>"},{"location":"api/events/#class-reference","title":"Class Reference","text":"<pre><code>class EventEmitter:\n    def __init__(self):\n        \"\"\"Initialize event emitter.\"\"\"\n\n    def on(\n        self,\n        event_name: str,\n        priority: EventPriority = EventPriority.NORMAL\n    ) -&gt; Callable:\n        \"\"\"\n        Decorator to register an event handler.\n\n        Args:\n            event_name: Name of the event to handle\n            priority: Handler priority level\n\n        Returns:\n            Decorated event handler\n        \"\"\"\n\n    def once(\n        self,\n        event_name: str,\n        priority: EventPriority = EventPriority.NORMAL\n    ) -&gt; Callable:\n        \"\"\"Register one-time event handler.\"\"\"\n\n    async def emit(\n        self,\n        event_name: str,\n        data: Any,\n        metadata: Optional[Dict[str, Any]] = None\n    ) -&gt; None:\n        \"\"\"\n        Emit an event.\n\n        Args:\n            event_name: Name of the event\n            data: Event data\n            metadata: Optional event metadata\n        \"\"\"\n</code></pre>"},{"location":"api/events/#event-types","title":"Event Types","text":""},{"location":"api/events/#event","title":"Event","text":"<p>Base event container class.</p> <pre><code>from mtaio.events import Event, ChangeType\n\n@dataclass\nclass Event[T]:\n    name: str              # Event name\n    data: T               # Event data\n    propagate: bool = True # Whether to continue propagation\n    metadata: Dict[str, Any] = field(default_factory=dict)\n</code></pre>"},{"location":"api/events/#eventpriority","title":"EventPriority","text":"<p>Priority levels for event handlers.</p> <pre><code>class EventPriority(Enum):\n    LOWEST = auto()   # Lowest priority\n    LOW = auto()      # Low priority\n    NORMAL = auto()   # Normal priority\n    HIGH = auto()     # High priority\n    HIGHEST = auto()  # Highest priority\n    MONITOR = auto()  # Monitoring only\n</code></pre>"},{"location":"api/events/#advanced-features","title":"Advanced Features","text":""},{"location":"api/events/#event-filtering","title":"Event Filtering","text":"<p>Filter events based on conditions:</p> <pre><code>from mtaio.events import EventEmitter\n\nemitter = EventEmitter()\n\n# Create filtered emitter\nfiltered = emitter.filter(\n    lambda event: event.data.get(\"priority\") == \"high\"\n)\n\n@filtered.on(\"alert\")\nasync def handle_high_priority_alert(event):\n    alert = event.data\n    print(f\"High priority alert: {alert['message']}\")\n</code></pre>"},{"location":"api/events/#event-transformation","title":"Event Transformation","text":"<p>Transform events before handling:</p> <pre><code>from mtaio.events import EventEmitter, Event\n\n# Create transformed emitter\ntransformed = emitter.map(\n    lambda event: Event(\n        name=event.name,\n        data={**event.data, \"processed\": True}\n    )\n)\n\n@transformed.on(\"data_event\")\nasync def handle_processed_data(event):\n    # Handle transformed event\n    pass\n</code></pre>"},{"location":"api/events/#batch-operations","title":"Batch Operations","text":"<p>Group multiple events:</p> <pre><code>from mtaio.events import EventEmitter\n\nemitter = EventEmitter()\n\nasync def batch_operations():\n    async with emitter.batch_operations():\n        # Events are batched\n        await emitter.emit(\"event1\", data1)\n        await emitter.emit(\"event2\", data2)\n        # Handlers are called once with all events\n</code></pre>"},{"location":"api/events/#event-channels","title":"Event Channels","text":"<p>Create event channels for specific purposes:</p> <pre><code>from mtaio.events import Channel, Subscriber\n\nasync def channel_example():\n    channel = Channel[str](\"notifications\")\n\n    # Subscribe to channel\n    subscriber = await channel.subscribe()\n\n    # Publish message\n    await channel.publish(\"Hello subscribers!\")\n\n    # Receive message\n    message = await subscriber.receive()\n</code></pre>"},{"location":"api/events/#topic-based-events","title":"Topic-based Events","text":"<p>Handle events by topic:</p> <pre><code>from mtaio.events import Channel\n\nasync def topic_example():\n    channel = Channel[str](\"events\")\n\n    # Subscribe to specific topics\n    subscriber = await channel.subscribe([\"user.*\", \"system.*\"])\n\n    # Publish to topic\n    await channel.publish(\n        \"User logged in\",\n        topic=\"user.login\"\n    )\n</code></pre>"},{"location":"api/events/#error-handling","title":"Error Handling","text":""},{"location":"api/events/#event-errors","title":"Event Errors","text":"<p>Handle event-related errors:</p> <pre><code>from mtaio.exceptions import (\n    EventError,\n    EventEmitError,\n    EventHandlerError\n)\n\nasync def handle_errors():\n    try:\n        await emitter.emit(\"event\", data)\n    except EventEmitError:\n        # Handle emission error\n        pass\n    except EventHandlerError:\n        # Handle handler error\n        pass\n</code></pre>"},{"location":"api/events/#error-events","title":"Error Events","text":"<p>Emit error events:</p> <pre><code>@emitter.on(\"error\")\nasync def handle_error(event):\n    error = event.data\n    print(f\"Error occurred: {error}\")\n\n# Emit error event\ntry:\n    await process_data()\nexcept Exception as e:\n    await emitter.emit(\"error\", e)\n</code></pre>"},{"location":"api/events/#best-practices","title":"Best Practices","text":""},{"location":"api/events/#event-handler-organization","title":"Event Handler Organization","text":"<pre><code>class UserEventHandlers:\n    def __init__(self, emitter: EventEmitter):\n        self.emitter = emitter\n        self.setup_handlers()\n\n    def setup_handlers(self):\n        @self.emitter.on(\"user.created\")\n        async def handle_user_created(event):\n            pass\n\n        @self.emitter.on(\"user.updated\")\n        async def handle_user_updated(event):\n            pass\n\n# Usage\nhandlers = UserEventHandlers(emitter)\n</code></pre>"},{"location":"api/events/#resource-management","title":"Resource Management","text":"<pre><code>class EventManager:\n    def __init__(self):\n        self.emitter = EventEmitter()\n        self._handlers = []\n\n    def register_handler(self, event: str, handler: Callable):\n        self._handlers.append((event, handler))\n        self.emitter.on(event)(handler)\n\n    async def cleanup(self):\n        for event, handler in self._handlers:\n            self.emitter.remove_listener(event, handler)\n</code></pre>"},{"location":"api/events/#performance-optimization","title":"Performance Optimization","text":"<ol> <li> <p>Event Batching <pre><code>async with emitter.batch_operations():\n    for item in items:\n        await emitter.emit(\"item.processed\", item)\n</code></pre></p> </li> <li> <p>Priority Handling <pre><code>@emitter.on(\"critical\", priority=EventPriority.HIGHEST)\nasync def handle_critical(event):\n    # Handle critical events first\n    pass\n</code></pre></p> </li> <li> <p>Event Filtering <pre><code># Filter events early\nfiltered = emitter.filter(lambda e: e.data.get(\"important\"))\n\n@filtered.on(\"event\")\nasync def handle_important_events(event):\n    pass\n</code></pre></p> </li> </ol>"},{"location":"api/events/#examples","title":"Examples","text":""},{"location":"api/events/#event-driven-data-processing","title":"Event-driven Data Processing","text":"<pre><code>from mtaio.events import EventEmitter\n\nclass DataProcessor:\n    def __init__(self):\n        self.emitter = EventEmitter()\n\n    async def process(self, data: dict):\n        # Emit preprocessing event\n        await self.emitter.emit(\"process.start\", data)\n\n        try:\n            result = await self.process_data(data)\n            await self.emitter.emit(\"process.complete\", result)\n        except Exception as e:\n            await self.emitter.emit(\"process.error\", e)\n</code></pre>"},{"location":"api/events/#event-monitoring","title":"Event Monitoring","text":"<pre><code>class EventMonitor:\n    def __init__(self, emitter: EventEmitter):\n        @emitter.on(\"*\", priority=EventPriority.MONITOR)\n        async def monitor_all(event):\n            await self.log_event(event)\n\n    async def log_event(self, event: Event):\n        print(f\"Event: {event.name}, Data: {event.data}\")\n</code></pre>"},{"location":"api/events/#see-also","title":"See Also","text":"<ul> <li>Core API Reference for base functionality</li> <li>Decorators API Reference for decorators</li> <li>Examples Repository</li> </ul>"},{"location":"api/exceptions/","title":"Exceptions API Reference","text":"<p>The <code>mtaio.exceptions</code> module provides a comprehensive exception hierarchy for error handling in mtaio applications.</p>"},{"location":"api/exceptions/#exception-hierarchy","title":"Exception Hierarchy","text":""},{"location":"api/exceptions/#base-exception","title":"Base Exception","text":"<pre><code>class MTAIOError(Exception):\n    \"\"\"Base exception for all mtaio errors.\"\"\"\n    def __init__(self, message: str, *args: Any, **kwargs: Any) -&gt; None:\n        self.message = message\n        super().__init__(message, *args)\n</code></pre> <p>All mtaio exceptions inherit from this base class.</p>"},{"location":"api/exceptions/#core-exceptions","title":"Core Exceptions","text":""},{"location":"api/exceptions/#executionerror","title":"ExecutionError","text":"<p>Raised when task execution fails.</p> <pre><code>from mtaio.exceptions import ExecutionError\n\ntry:\n    async with TaskExecutor() as executor:\n        await executor.run(task)\nexcept ExecutionError as e:\n    print(f\"Task execution failed: {e}\")\n</code></pre>"},{"location":"api/exceptions/#timeouterror","title":"TimeoutError","text":"<p>Raised when an operation times out.</p> <pre><code>from mtaio.exceptions import TimeoutError\n\ntry:\n    async with TimeoutManager(5.0):\n        await long_running_operation()\nexcept TimeoutError as e:\n    print(f\"Operation timed out: {e}\")\n</code></pre>"},{"location":"api/exceptions/#retryerror","title":"RetryError","text":"<p>Raised when retry attempts are exhausted.</p> <pre><code>class RetryError(MTAIOError):\n    def __init__(\n        self,\n        message: str,\n        attempts: Optional[int] = None,\n        last_error: Optional[Exception] = None,\n    ):\n        super().__init__(message)\n        self.attempts = attempts\n        self.last_error = last_error\n\n# Usage example\ntry:\n    @with_retry(max_attempts=3)\n    async def unstable_operation():\n        pass\nexcept RetryError as e:\n    print(f\"Failed after {e.attempts} attempts\")\n    if e.last_error:\n        print(f\"Last error: {e.last_error}\")\n</code></pre>"},{"location":"api/exceptions/#resource-management-exceptions","title":"Resource Management Exceptions","text":""},{"location":"api/exceptions/#resourcelimiterror","title":"ResourceLimitError","text":"<p>Raised when resource limits are exceeded.</p> <pre><code>from mtaio.exceptions import ResourceLimitError\n\ntry:\n    limiter = RateLimiter(10.0)  # 10 ops/second\n    await limiter.acquire()\nexcept ResourceLimitError as e:\n    print(f\"Rate limit exceeded: {e}\")\n</code></pre>"},{"location":"api/exceptions/#resourcelockerror","title":"ResourceLockError","text":"<p>Raised when resource lock operations fail.</p> <pre><code>from mtaio.exceptions import ResourceLockError\n\ntry:\n    async with resource_lock:\n        await process_resource()\nexcept ResourceLockError as e:\n    print(f\"Failed to acquire lock: {e}\")\n</code></pre>"},{"location":"api/exceptions/#cache-exceptions","title":"Cache Exceptions","text":""},{"location":"api/exceptions/#cacheerror","title":"CacheError","text":"<p>Base exception for cache operations.</p> <pre><code>class CacheError(MTAIOError):\n    \"\"\"Base exception for cache-related errors.\"\"\"\n    pass\n\nclass CacheKeyError(CacheError):\n    \"\"\"Raised when a cache key is invalid or not found.\"\"\"\n    pass\n\nclass CacheConnectionError(CacheError):\n    \"\"\"Raised when cache connection fails.\"\"\"\n    pass\n\n# Usage example\ntry:\n    await cache.get(\"key\")\nexcept CacheKeyError:\n    print(\"Key not found\")\nexcept CacheConnectionError:\n    print(\"Failed to connect to cache\")\nexcept CacheError as e:\n    print(f\"Cache operation failed: {e}\")\n</code></pre>"},{"location":"api/exceptions/#event-exceptions","title":"Event Exceptions","text":""},{"location":"api/exceptions/#eventerror","title":"EventError","text":"<p>Base exception for event operations.</p> <pre><code>class EventError(MTAIOError):\n    \"\"\"Base exception for event-related errors.\"\"\"\n    pass\n\nclass EventEmitError(EventError):\n    \"\"\"Raised when event emission fails.\"\"\"\n    pass\n\nclass EventHandlerError(EventError):\n    \"\"\"Raised when event handler fails.\"\"\"\n    pass\n\n# Usage example\ntry:\n    await emitter.emit(\"event\", data)\nexcept EventEmitError:\n    print(\"Failed to emit event\")\nexcept EventHandlerError:\n    print(\"Event handler failed\")\n</code></pre>"},{"location":"api/exceptions/#protocol-exceptions","title":"Protocol Exceptions","text":""},{"location":"api/exceptions/#protocolerror","title":"ProtocolError","text":"<p>Base exception for protocol operations.</p> <pre><code>class ProtocolError(MTAIOError):\n    \"\"\"Base exception for protocol-related errors.\"\"\"\n    pass\n\nclass ASGIError(ProtocolError):\n    \"\"\"Raised when ASGI protocol error occurs.\"\"\"\n    pass\n\nclass MQTTError(ProtocolError):\n    \"\"\"Raised when MQTT protocol error occurs.\"\"\"\n    pass\n\n# Usage example\ntry:\n    await mqtt_client.connect()\nexcept MQTTError as e:\n    print(f\"MQTT connection failed: {e}\")\n</code></pre>"},{"location":"api/exceptions/#error-handling-best-practices","title":"Error Handling Best Practices","text":""},{"location":"api/exceptions/#specific-exception-handling","title":"Specific Exception Handling","text":"<p>Handle exceptions from most specific to most general:</p> <pre><code>try:\n    await operation()\nexcept CacheKeyError:\n    # Handle specific key error\n    pass\nexcept CacheError:\n    # Handle general cache error\n    pass\nexcept MTAIOError:\n    # Handle any mtaio error\n    pass\nexcept Exception:\n    # Handle unexpected errors\n    pass\n</code></pre>"},{"location":"api/exceptions/#custom-exception-classes","title":"Custom Exception Classes","text":"<p>Creating custom exceptions:</p> <pre><code>class CustomOperationError(MTAIOError):\n    def __init__(\n        self,\n        message: str,\n        operation_id: str,\n        *args: Any\n    ) -&gt; None:\n        super().__init__(message, *args)\n        self.operation_id = operation_id\n\n# Usage\ntry:\n    raise CustomOperationError(\n        \"Operation failed\",\n        operation_id=\"123\"\n    )\nexcept CustomOperationError as e:\n    print(f\"Operation {e.operation_id} failed: {e.message}\")\n</code></pre>"},{"location":"api/exceptions/#exception-utility-functions","title":"Exception Utility Functions","text":"<pre><code>from mtaio.exceptions import format_exception, wrap_exception\n\n# Format exception with details\ntry:\n    await operation()\nexcept MTAIOError as e:\n    error_message = format_exception(e)\n    logger.error(error_message)\n\n# Wrap exception with new type\ntry:\n    await operation()\nexcept ConnectionError as e:\n    raise wrap_exception(\n        e,\n        CacheConnectionError,\n        \"Cache connection failed\"\n    )\n</code></pre>"},{"location":"api/exceptions/#async-context-manager-error-handling","title":"Async Context Manager Error Handling","text":"<pre><code>class SafeResource:\n    async def __aenter__(self):\n        try:\n            await self.connect()\n            return self\n        except Exception as e:\n            raise ResourceError(\"Failed to acquire resource\") from e\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        try:\n            await self.disconnect()\n        except Exception as e:\n            # Log but don't raise during cleanup\n            logger.error(f\"Cleanup error: {e}\")\n</code></pre>"},{"location":"api/exceptions/#common-error-patterns","title":"Common Error Patterns","text":""},{"location":"api/exceptions/#retry-pattern","title":"Retry Pattern","text":"<pre><code>async def with_retry(\n    operation: Callable,\n    max_attempts: int = 3,\n    exceptions: Tuple[Type[Exception], ...] = (MTAIOError,)\n):\n    last_error = None\n    for attempt in range(max_attempts):\n        try:\n            return await operation()\n        except exceptions as e:\n            last_error = e\n            if attempt == max_attempts - 1:\n                raise RetryError(\n                    \"Operation failed after retries\",\n                    attempts=attempt + 1,\n                    last_error=last_error\n                )\n            await asyncio.sleep(2 ** attempt)\n</code></pre>"},{"location":"api/exceptions/#circuit-breaker-pattern","title":"Circuit Breaker Pattern","text":"<pre><code>class CircuitBreakerError(MTAIOError):\n    def __init__(\n        self,\n        message: str,\n        failures: Optional[int] = None,\n        reset_timeout: Optional[float] = None\n    ):\n        super().__init__(message)\n        self.failures = failures\n        self.reset_timeout = reset_timeout\n\n# Usage\nbreaker = CircuitBreaker(failure_threshold=5)\ntry:\n    await breaker.call(operation)\nexcept CircuitBreakerError as e:\n    print(f\"Circuit breaker open: {e.failures} failures\")\n</code></pre>"},{"location":"api/exceptions/#see-also","title":"See Also","text":"<ul> <li>Core API Reference for core functionality</li> <li>Events API Reference for event handling</li> <li>Examples Repository</li> </ul>"},{"location":"api/logging/","title":"Logging API Reference","text":"<p>The <code>mtaio.logging</code> module provides asynchronous logging functionality with support for various handlers and formatters.</p>"},{"location":"api/logging/#asynclogger","title":"AsyncLogger","text":"<p>The main logging class that provides asynchronous logging capabilities.</p>"},{"location":"api/logging/#basic-usage","title":"Basic Usage","text":"<pre><code>from mtaio.logging import AsyncLogger, AsyncFileHandler\n\n# Create logger\nlogger = AsyncLogger(\"app\")\n\n# Add handler\nhandler = AsyncFileHandler(\"app.log\")\nawait logger.add_handler(handler)\n\n# Log messages\nawait logger.info(\"Application started\")\nawait logger.error(\"An error occurred\", extra={\"details\": \"error info\"})\n</code></pre>"},{"location":"api/logging/#class-reference","title":"Class Reference","text":"<pre><code>class AsyncLogger:\n    def __init__(\n        self,\n        name: str,\n        level: int = logging.NOTSET,\n        handlers: Optional[List[AsyncLogHandler]] = None\n    ):\n        \"\"\"\n        Initialize async logger.\n\n        Args:\n            name: Logger name\n            level: Minimum log level\n            handlers: Optional list of handlers\n        \"\"\"\n\n    async def debug(\n        self,\n        message: str,\n        *,\n        exc_info: Optional[tuple] = None,\n        stack_info: Optional[str] = None,\n        extra: Optional[Dict[str, Any]] = None\n    ) -&gt; None:\n        \"\"\"Log debug message.\"\"\"\n\n    async def info(self, message: str, **kwargs) -&gt; None:\n        \"\"\"Log info message.\"\"\"\n\n    async def warning(self, message: str, **kwargs) -&gt; None:\n        \"\"\"Log warning message.\"\"\"\n\n    async def error(self, message: str, **kwargs) -&gt; None:\n        \"\"\"Log error message.\"\"\"\n\n    async def critical(self, message: str, **kwargs) -&gt; None:\n        \"\"\"Log critical message.\"\"\"\n</code></pre>"},{"location":"api/logging/#handlers","title":"Handlers","text":""},{"location":"api/logging/#asyncfilehandler","title":"AsyncFileHandler","text":"<p>File-based log handler with async I/O.</p> <pre><code>from mtaio.logging import AsyncFileHandler\n\nhandler = AsyncFileHandler(\n    filename=\"app.log\",\n    mode=\"a\",\n    encoding=\"utf-8\",\n    max_bytes=10_000_000,  # 10MB\n    backup_count=5\n)\n\n# Add formatter\nformatter = logging.Formatter(\n    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\nhandler.setFormatter(formatter)\n</code></pre>"},{"location":"api/logging/#asyncrotatingfilehandler","title":"AsyncRotatingFileHandler","text":"<p>File handler with rotation support.</p> <pre><code>from mtaio.logging import AsyncRotatingFileHandler\n\nhandler = AsyncRotatingFileHandler(\n    filename=\"app.log\",\n    max_bytes=1_000_000,  # 1MB\n    backup_count=3,\n    encoding=\"utf-8\"\n)\n</code></pre>"},{"location":"api/logging/#asyncjsonfilehandler","title":"AsyncJsonFileHandler","text":"<p>JSON-formatted log file handler.</p> <pre><code>from mtaio.logging import AsyncJsonFileHandler\n\nhandler = AsyncJsonFileHandler(\n    filename=\"app.log.json\",\n    encoder_cls=json.JSONEncoder\n)\n\n# Log entries will be written as JSON\nawait logger.info(\n    \"User action\",\n    extra={\n        \"user_id\": \"123\",\n        \"action\": \"login\"\n    }\n)\n</code></pre>"},{"location":"api/logging/#log-records","title":"Log Records","text":""},{"location":"api/logging/#logrecord","title":"LogRecord","text":"<p>Container for log record data.</p> <pre><code>@dataclass\nclass LogRecord:\n    level: int\n    message: str\n    timestamp: float\n    logger_name: str\n    extra: Dict[str, Any]\n    exc_info: Optional[tuple] = None\n    stack_info: Optional[str] = None\n\n    @property\n    def levelname(self) -&gt; str:\n        \"\"\"Get level name.\"\"\"\n        return logging.getLevelName(self.level)\n</code></pre>"},{"location":"api/logging/#advanced-features","title":"Advanced Features","text":""},{"location":"api/logging/#transaction-logging","title":"Transaction Logging","text":"<p>Group related log messages in a transaction:</p> <pre><code>async with logger.transaction(exc_level=logging.ERROR):\n    # All logs in this block are grouped\n    await logger.info(\"Starting transaction\")\n    await process_data()\n    await logger.info(\"Transaction complete\")\n</code></pre>"},{"location":"api/logging/#batch-logging","title":"Batch Logging","text":"<p>Log multiple messages efficiently:</p> <pre><code>messages = [\n    \"Starting process\",\n    \"Step 1 complete\",\n    \"Step 2 complete\",\n    \"Process finished\"\n]\n\nawait logger.batch(logging.INFO, messages)\n</code></pre>"},{"location":"api/logging/#error-logging","title":"Error Logging","text":"<p>Comprehensive error logging with context:</p> <pre><code>try:\n    await operation()\nexcept Exception as e:\n    await logger.error(\n        \"Operation failed\",\n        exc_info=True,\n        extra={\n            \"operation_id\": \"123\",\n            \"details\": str(e)\n        }\n    )\n</code></pre>"},{"location":"api/logging/#best-practices","title":"Best Practices","text":""},{"location":"api/logging/#handler-configuration","title":"Handler Configuration","text":"<pre><code>async def setup_logging():\n    # Create logger\n    logger = AsyncLogger(\"app\", level=logging.INFO)\n\n    # File handler for all logs\n    file_handler = AsyncRotatingFileHandler(\n        \"app.log\",\n        max_bytes=10_000_000,\n        backup_count=5\n    )\n    file_handler.setLevel(logging.DEBUG)\n\n    # JSON handler for important logs\n    json_handler = AsyncJsonFileHandler(\"important.log.json\")\n    json_handler.setLevel(logging.ERROR)\n\n    # Add handlers\n    await logger.add_handler(file_handler)\n    await logger.add_handler(json_handler)\n\n    return logger\n</code></pre>"},{"location":"api/logging/#contextual-logging","title":"Contextual Logging","text":"<pre><code>class RequestLogger:\n    def __init__(self, logger: AsyncLogger):\n        self.logger = logger\n\n    async def log_request(\n        self,\n        request_id: str,\n        message: str,\n        **kwargs\n    ) -&gt; None:\n        await self.logger.info(\n            message,\n            extra={\n                \"request_id\": request_id,\n                **kwargs\n            }\n        )\n</code></pre>"},{"location":"api/logging/#structured-logging","title":"Structured Logging","text":"<pre><code>class StructuredLogger:\n    def __init__(self, logger: AsyncLogger):\n        self.logger = logger\n\n    async def log_event(\n        self,\n        event_name: str,\n        **data: Any\n    ) -&gt; None:\n        await self.logger.info(\n            f\"Event: {event_name}\",\n            extra={\n                \"event_type\": event_name,\n                \"event_data\": data,\n                \"timestamp\": time.time()\n            }\n        )\n</code></pre>"},{"location":"api/logging/#performance-considerations","title":"Performance Considerations","text":"<ol> <li> <p>Batch Processing <pre><code># Efficient batch logging\nasync def log_operations(operations: List[str]):\n    await logger.batch(\n        logging.INFO,\n        [f\"Operation: {op}\" for op in operations]\n    )\n</code></pre></p> </li> <li> <p>Log Level Filtering <pre><code># Set appropriate log levels\nlogger.setLevel(logging.INFO)  # Production\nhandler.setLevel(logging.ERROR)  # Important errors only\n</code></pre></p> </li> <li> <p>Async Handler Management <pre><code># Clean up handlers properly\nasync def cleanup_logging():\n    for handler in logger.handlers:\n        await handler.stop()\n        await handler.close()\n</code></pre></p> </li> </ol>"},{"location":"api/logging/#error-handling","title":"Error Handling","text":"<pre><code>from mtaio.exceptions import LoggingError\n\ntry:\n    await logger.info(\"Message\")\nexcept LoggingError as e:\n    print(f\"Logging failed: {e}\")\n    # Fall back to standard logging\n    import logging\n    logging.error(\"Fallback log message\")\n</code></pre>"},{"location":"api/logging/#integration-examples","title":"Integration Examples","text":""},{"location":"api/logging/#web-application-logging","title":"Web Application Logging","text":"<pre><code>class WebAppLogger:\n    def __init__(self):\n        self.logger = AsyncLogger(\"webapp\")\n        self.setup_handlers()\n\n    async def log_request(self, request, response):\n        await self.logger.info(\n            f\"Request: {request.method} {request.path}\",\n            extra={\n                \"method\": request.method,\n                \"path\": request.path,\n                \"status\": response.status_code,\n                \"duration\": response.duration\n            }\n        )\n</code></pre>"},{"location":"api/logging/#task-monitoring","title":"Task Monitoring","text":"<pre><code>class TaskLogger:\n    def __init__(self, logger: AsyncLogger):\n        self.logger = logger\n\n    @contextmanager\n    async def track_task(self, task_id: str):\n        start_time = time.time()\n        try:\n            await self.logger.info(f\"Task {task_id} started\")\n            yield\n            duration = time.time() - start_time\n            await self.logger.info(\n                f\"Task {task_id} completed\",\n                extra={\"duration\": duration}\n            )\n        except Exception as e:\n            await self.logger.error(\n                f\"Task {task_id} failed\",\n                exc_info=True,\n                extra={\"duration\": time.time() - start_time}\n            )\n</code></pre>"},{"location":"api/logging/#see-also","title":"See Also","text":"<ul> <li>Core API Reference for base functionality</li> <li>Exceptions API Reference for error handling</li> <li>Examples Repository</li> </ul>"},{"location":"api/monitoring/","title":"Monitoring API Reference","text":"<p>The <code>mtaio.monitoring</code> module provides tools for monitoring system resources, application metrics, and performance profiling.</p>"},{"location":"api/monitoring/#resourcemonitor","title":"ResourceMonitor","text":""},{"location":"api/monitoring/#basic-usage","title":"Basic Usage","text":"<pre><code>from mtaio.monitoring import ResourceMonitor\n\n# Create monitor\nmonitor = ResourceMonitor(interval=1.0)  # 1 second interval\n\n# Set up alert handlers\n@monitor.on_threshold_exceeded\nasync def handle_alert(metric: str, value: float, threshold: float):\n    print(f\"Alert: {metric} exceeded threshold ({value} &gt; {threshold})\")\n\n# Configure thresholds\nmonitor.set_threshold(\"cpu_usage\", 80.0)  # 80% CPU usage\nmonitor.set_threshold(\"memory_usage\", 90.0)  # 90% memory usage\n\n# Start monitoring\nawait monitor.start()\n</code></pre>"},{"location":"api/monitoring/#class-reference","title":"Class Reference","text":"<pre><code>class ResourceMonitor:\n    def __init__(\n        self,\n        interval: float = 1.0,\n        history_size: int = 3600\n    ):\n        \"\"\"\n        Initialize resource monitor.\n\n        Args:\n            interval: Monitoring interval in seconds\n            history_size: Number of historical stats to keep\n        \"\"\"\n\n    async def start(self) -&gt; None:\n        \"\"\"Start monitoring.\"\"\"\n\n    async def stop(self) -&gt; None:\n        \"\"\"Stop monitoring.\"\"\"\n\n    def set_threshold(\n        self,\n        metric: str,\n        value: float\n    ) -&gt; None:\n        \"\"\"Set threshold for metric.\"\"\"\n\n    async def get_current_stats(self) -&gt; SystemStats:\n        \"\"\"Get current system statistics.\"\"\"\n</code></pre>"},{"location":"api/monitoring/#system-statistics","title":"System Statistics","text":""},{"location":"api/monitoring/#systemstats","title":"SystemStats","text":"<p>Container for system statistics data.</p> <pre><code>@dataclass\nclass SystemStats:\n    timestamp: float\n    cpu: CPUStats\n    memory: MemoryStats\n    io: IOStats\n\n@dataclass\nclass CPUStats:\n    usage_percent: float\n    load_average: List[float]\n    thread_count: int\n\n@dataclass\nclass MemoryStats:\n    total: int\n    available: int\n    used: int\n    percent: float\n\n@dataclass\nclass IOStats:\n    read_bytes: int\n    write_bytes: int\n    read_count: int\n    write_count: int\n</code></pre>"},{"location":"api/monitoring/#profiler","title":"Profiler","text":""},{"location":"api/monitoring/#basic-usage_1","title":"Basic Usage","text":"<pre><code>from mtaio.monitoring import Profiler\n\n# Create profiler\nprofiler = Profiler()\n\n# Profile function execution\n@profiler.trace\nasync def monitored_function():\n    await perform_operation()\n\n# Profile code block\nasync with profiler.trace_context(\"operation\"):\n    await perform_operation()\n\n# Get profile data\nprofile = await profiler.get_profile()\nprint(f\"Total execution time: {profile.total_time:.2f}s\")\n</code></pre>"},{"location":"api/monitoring/#class-reference_1","title":"Class Reference","text":"<pre><code>class Profiler:\n    def __init__(\n        self,\n        enabled: bool = True,\n        trace_async_tasks: bool = True,\n        collect_stack_trace: bool = False\n    ):\n        \"\"\"\n        Initialize profiler.\n\n        Args:\n            enabled: Whether profiling is enabled\n            trace_async_tasks: Whether to trace async tasks\n            collect_stack_trace: Whether to collect stack traces\n        \"\"\"\n\n    def trace(\n        self,\n        func: Optional[Callable[..., Awaitable[T]]] = None,\n        *,\n        name: Optional[str] = None\n    ) -&gt; Callable:\n        \"\"\"Decorator to trace async functions.\"\"\"\n</code></pre>"},{"location":"api/monitoring/#performance-metrics","title":"Performance Metrics","text":""},{"location":"api/monitoring/#profile-data","title":"Profile Data","text":"<pre><code>@dataclass\nclass ProfileTrace:\n    name: str\n    start_time: float\n    end_time: float\n    metadata: Dict[str, Any] = field(default_factory=dict)\n    stack_trace: Optional[str] = None\n    memory_start: int = 0\n    memory_end: int = 0\n\n    @property\n    def duration(self) -&gt; float:\n        \"\"\"Get operation duration.\"\"\"\n        return self.end_time - self.start_time\n\n    @property\n    def memory_delta(self) -&gt; int:\n        \"\"\"Get memory usage delta.\"\"\"\n        return self.memory_end - self.memory_start\n</code></pre>"},{"location":"api/monitoring/#advanced-features","title":"Advanced Features","text":""},{"location":"api/monitoring/#custom-metrics-collection","title":"Custom Metrics Collection","text":"<pre><code>from mtaio.monitoring import ResourceMonitor\nfrom dataclasses import dataclass\n\n@dataclass\nclass CustomMetrics:\n    request_count: int = 0\n    error_count: int = 0\n    average_response_time: float = 0.0\n\nclass ApplicationMonitor(ResourceMonitor):\n    def __init__(self):\n        super().__init__()\n        self.metrics = CustomMetrics()\n\n    async def collect_metrics(self) -&gt; None:\n        while True:\n            # Update metrics\n            stats = await self.get_current_stats()\n\n            # Process metrics\n            if self.metrics.error_count &gt; 100:\n                await self.alert(\"High error rate detected\")\n\n            await asyncio.sleep(60)\n</code></pre>"},{"location":"api/monitoring/#performance-profiling","title":"Performance Profiling","text":"<pre><code>from mtaio.monitoring import Profiler\n\nclass PerformanceProfiler:\n    def __init__(self):\n        self.profiler = Profiler(\n            trace_async_tasks=True,\n            collect_stack_trace=True\n        )\n\n    async def profile_operation(self):\n        async with self.profiler.trace_context(\"operation\"):\n            # Monitor memory usage\n            await self.profiler.start_trace(\n                \"memory_usage\",\n                metadata={\"type\": \"memory\"}\n            )\n\n            # Perform operation\n            await perform_operation()\n\n            # Get results\n            profile = await self.profiler.get_profile()\n            return self.analyze_profile(profile)\n</code></pre>"},{"location":"api/monitoring/#integration-examples","title":"Integration Examples","text":""},{"location":"api/monitoring/#web-application-monitoring","title":"Web Application Monitoring","text":"<pre><code>class WebAppMonitor:\n    def __init__(self):\n        self.monitor = ResourceMonitor()\n        self.profiler = Profiler()\n\n    async def monitor_request(self, request):\n        async with self.profiler.trace_context(\"http_request\"):\n            start_time = time.time()\n\n            try:\n                response = await process_request(request)\n                duration = time.time() - start_time\n\n                await self.monitor.record_metric(\n                    \"request_duration\",\n                    duration\n                )\n\n                return response\n\n            except Exception as e:\n                await self.monitor.record_metric(\n                    \"request_error\",\n                    1.0\n                )\n                raise\n</code></pre>"},{"location":"api/monitoring/#background-task-monitoring","title":"Background Task Monitoring","text":"<pre><code>class TaskMonitor:\n    def __init__(self):\n        self.monitor = ResourceMonitor()\n\n    async def monitor_task(self, task_id: str):\n        @self.monitor.on_threshold_exceeded\n        async def handle_task_alert(metric, value, threshold):\n            await self.notify_admin(\n                f\"Task {task_id} {metric} exceeded threshold\"\n            )\n\n        while True:\n            stats = await self.get_task_stats(task_id)\n            await self.monitor.record_metrics({\n                \"task_memory\": stats.memory_usage,\n                \"task_cpu\": stats.cpu_usage\n            })\n            await asyncio.sleep(1)\n</code></pre>"},{"location":"api/monitoring/#best-practices","title":"Best Practices","text":""},{"location":"api/monitoring/#resource-management","title":"Resource Management","text":"<pre><code># Proper cleanup\nasync def cleanup_monitoring():\n    monitor = ResourceMonitor()\n    try:\n        await monitor.start()\n        yield monitor\n    finally:\n        await monitor.stop()\n</code></pre>"},{"location":"api/monitoring/#threshold-configuration","title":"Threshold Configuration","text":"<pre><code># Configure appropriate thresholds\ndef configure_thresholds(monitor: ResourceMonitor):\n    # System resources\n    monitor.set_threshold(\"cpu_usage\", 80.0)\n    monitor.set_threshold(\"memory_usage\", 90.0)\n\n    # Application metrics\n    monitor.set_threshold(\"error_rate\", 5.0)\n    monitor.set_threshold(\"response_time\", 1.0)\n</code></pre>"},{"location":"api/monitoring/#performance-optimization","title":"Performance Optimization","text":"<pre><code># Efficient metric collection\nclass OptimizedMonitor(ResourceMonitor):\n    def __init__(self):\n        super().__init__(interval=5.0)  # Reduce collection frequency\n        self._metrics_cache = {}\n\n    async def get_metric(self, name: str) -&gt; float:\n        if name in self._metrics_cache:\n            if time.time() - self._metrics_cache[name][\"timestamp\"] &lt; 1.0:\n                return self._metrics_cache[name][\"value\"]\n\n        value = await self._collect_metric(name)\n        self._metrics_cache[name] = {\n            \"value\": value,\n            \"timestamp\": time.time()\n        }\n        return value\n</code></pre>"},{"location":"api/monitoring/#see-also","title":"See Also","text":"<ul> <li>Core API Reference for base functionality</li> <li>Events API Reference for event handling</li> <li>Logging API Reference for logging integration</li> <li>Examples Repository</li> </ul>"},{"location":"api/optimization/","title":"Optimization API Reference","text":"<p>The <code>mtaio.optimization</code> module provides tools for optimizing parameters and performance of async operations.</p>"},{"location":"api/optimization/#optimizer","title":"Optimizer","text":""},{"location":"api/optimization/#basic-usage","title":"Basic Usage","text":"<pre><code>from mtaio.optimization import Optimizer, Parameter, ParameterType\n\n# Define parameters to optimize\nparameters = [\n    Parameter(\n        name=\"batch_size\",\n        type=ParameterType.INTEGER,\n        min_value=1,\n        max_value=100\n    ),\n    Parameter(\n        name=\"workers\",\n        type=ParameterType.INTEGER,\n        min_value=1,\n        max_value=10\n    ),\n    Parameter(\n        name=\"strategy\",\n        type=ParameterType.CATEGORICAL,\n        choices=[\"fast\", \"balanced\", \"thorough\"]\n    )\n]\n\n# Define objective function\nasync def objective(params: dict) -&gt; float:\n    # Run benchmark with parameters\n    result = await run_benchmark(\n        batch_size=params[\"batch_size\"],\n        workers=params[\"workers\"],\n        strategy=params[\"strategy\"]\n    )\n    return result.execution_time\n\n# Optimize parameters\noptimizer = Optimizer()\nresult = await optimizer.optimize(parameters, objective)\nprint(f\"Best parameters: {result.parameters}\")\n</code></pre>"},{"location":"api/optimization/#class-reference","title":"Class Reference","text":"<pre><code>class Optimizer:\n    def __init__(\n        self,\n        strategy: Optional[OptimizationStrategy] = None\n    ):\n        \"\"\"\n        Initialize optimizer.\n\n        Args:\n            strategy: Optimization strategy to use (default: RandomSearchStrategy)\n        \"\"\"\n\n    async def optimize(\n        self,\n        parameters: List[Parameter],\n        objective: Callable[[Dict[str, Any]], Awaitable[float]],\n        iterations: int = 100,\n        timeout: Optional[float] = None,\n    ) -&gt; OptimizationResult:\n        \"\"\"\n        Optimize parameters.\n\n        Args:\n            parameters: Parameters to optimize\n            objective: Objective function to minimize\n            iterations: Number of iterations\n            timeout: Optional timeout in seconds\n\n        Returns:\n            Optimization result\n        \"\"\"\n</code></pre>"},{"location":"api/optimization/#parameters","title":"Parameters","text":""},{"location":"api/optimization/#parameter-definition","title":"Parameter Definition","text":"<pre><code>@dataclass\nclass Parameter:\n    name: str\n    type: ParameterType\n    min_value: Optional[Union[int, float]] = None\n    max_value: Optional[Union[int, float]] = None\n    choices: Optional[List[Any]] = None\n    step: Optional[Union[int, float]] = None\n\nclass ParameterType(Enum):\n    INTEGER = auto()      # Integer values\n    FLOAT = auto()        # Floating point values\n    CATEGORICAL = auto()  # Categorical values\n</code></pre>"},{"location":"api/optimization/#parameter-examples","title":"Parameter Examples","text":"<pre><code># Numeric parameters\nbatch_size = Parameter(\n    name=\"batch_size\",\n    type=ParameterType.INTEGER,\n    min_value=1,\n    max_value=1000,\n    step=10  # Optional step size\n)\n\nlearning_rate = Parameter(\n    name=\"learning_rate\",\n    type=ParameterType.FLOAT,\n    min_value=0.0001,\n    max_value=0.1\n)\n\n# Categorical parameters\nalgorithm = Parameter(\n    name=\"algorithm\",\n    type=ParameterType.CATEGORICAL,\n    choices=[\"sgd\", \"adam\", \"rmsprop\"]\n)\n</code></pre>"},{"location":"api/optimization/#optimization-strategies","title":"Optimization Strategies","text":""},{"location":"api/optimization/#available-strategies","title":"Available Strategies","text":""},{"location":"api/optimization/#gridsearchstrategy","title":"GridSearchStrategy","text":"<p>Systematically explores parameter combinations.</p> <pre><code>from mtaio.optimization import GridSearchStrategy\n\noptimizer = Optimizer(strategy=GridSearchStrategy())\nresult = await optimizer.optimize(parameters, objective)\n</code></pre>"},{"location":"api/optimization/#randomsearchstrategy","title":"RandomSearchStrategy","text":"<p>Randomly samples parameter combinations.</p> <pre><code>from mtaio.optimization import RandomSearchStrategy\n\noptimizer = Optimizer(strategy=RandomSearchStrategy())\nresult = await optimizer.optimize(parameters, objective)\n</code></pre>"},{"location":"api/optimization/#bayesianstrategy","title":"BayesianStrategy","text":"<p>Uses Bayesian optimization for parameter search.</p> <pre><code>from mtaio.optimization import BayesianStrategy\n\noptimizer = Optimizer(\n    strategy=BayesianStrategy(\n        exploration_rate=0.1\n    )\n)\nresult = await optimizer.optimize(parameters, objective)\n</code></pre>"},{"location":"api/optimization/#custom-strategy","title":"Custom Strategy","text":"<p>Implement custom optimization strategy:</p> <pre><code>class CustomStrategy(OptimizationStrategy):\n    async def optimize(\n        self,\n        parameters: List[Parameter],\n        objective: Callable[[Dict[str, Any]], Awaitable[float]],\n        iterations: int,\n    ) -&gt; OptimizationResult:\n        best_params = None\n        best_score = float(\"inf\")\n        history = []\n\n        for _ in range(iterations):\n            # Generate parameters\n            params = self.generate_params(parameters)\n\n            # Evaluate objective\n            score = await objective(params)\n            history.append({\"parameters\": params, \"score\": score})\n\n            # Update best result\n            if score &lt; best_score:\n                best_score = score\n                best_params = params\n\n        return OptimizationResult(\n            parameters=best_params,\n            score=best_score,\n            history=history,\n            iterations=iterations\n        )\n</code></pre>"},{"location":"api/optimization/#results","title":"Results","text":""},{"location":"api/optimization/#optimizationresult","title":"OptimizationResult","text":"<p>Container for optimization results:</p> <pre><code>@dataclass\nclass OptimizationResult:\n    parameters: Dict[str, Any]  # Best parameters found\n    score: float                # Best objective score\n    history: List[Dict[str, Any]]  # Optimization history\n    iterations: int             # Total iterations performed\n    elapsed_time: float        # Total time taken\n    improvement: float         # Improvement from initial score\n</code></pre>"},{"location":"api/optimization/#advanced-features","title":"Advanced Features","text":""},{"location":"api/optimization/#parameter-space-constraints","title":"Parameter Space Constraints","text":"<pre><code>from mtaio.optimization import Optimizer, Parameter\n\n# Define dependent parameters\nasync def objective(params: dict) -&gt; float:\n    if params[\"use_feature\"] and params[\"feature_count\"] &gt; 0:\n        # Use feature with specified count\n        pass\n    return score\n\nparameters = [\n    Parameter(\n        name=\"use_feature\",\n        type=ParameterType.CATEGORICAL,\n        choices=[True, False]\n    ),\n    Parameter(\n        name=\"feature_count\",\n        type=ParameterType.INTEGER,\n        min_value=0,\n        max_value=10\n    )\n]\n</code></pre>"},{"location":"api/optimization/#multi-objective-optimization","title":"Multi-Objective Optimization","text":"<pre><code>async def multi_objective(params: dict) -&gt; float:\n    # Calculate multiple metrics\n    latency = await measure_latency(params)\n    memory = await measure_memory(params)\n\n    # Combine metrics with weights\n    return 0.7 * latency + 0.3 * memory\n</code></pre>"},{"location":"api/optimization/#integration-examples","title":"Integration Examples","text":""},{"location":"api/optimization/#performance-optimization","title":"Performance Optimization","text":"<pre><code>from mtaio.optimization import Optimizer\nfrom mtaio.core import TaskExecutor\n\nclass PerformanceOptimizer:\n    def __init__(self):\n        self.optimizer = Optimizer()\n        self.executor = TaskExecutor()\n\n    async def optimize_performance(self):\n        parameters = [\n            Parameter(\"concurrency\", ParameterType.INTEGER, 1, 20),\n            Parameter(\"batch_size\", ParameterType.INTEGER, 1, 1000)\n        ]\n\n        async def objective(params):\n            async with self.executor:\n                start_time = time.time()\n                await self.executor.gather(\n                    *tasks,\n                    limit=params[\"concurrency\"]\n                )\n                return time.time() - start_time\n\n        return await self.optimizer.optimize(parameters, objective)\n</code></pre>"},{"location":"api/optimization/#resource-optimization","title":"Resource Optimization","text":"<pre><code>from mtaio.optimization import Optimizer\nfrom mtaio.monitoring import ResourceMonitor\n\nclass ResourceOptimizer:\n    def __init__(self):\n        self.optimizer = Optimizer()\n        self.monitor = ResourceMonitor()\n\n    async def optimize_resources(self):\n        parameters = [\n            Parameter(\"memory_limit\", ParameterType.INTEGER, 100, 1000),\n            Parameter(\"cpu_limit\", ParameterType.INTEGER, 1, 8)\n        ]\n\n        async def objective(params):\n            # Configure resources\n            await self.configure_limits(params)\n\n            # Run workload\n            await self.run_workload()\n\n            # Get resource metrics\n            stats = await self.monitor.get_current_stats()\n            return stats.memory.used / stats.memory.total\n\n        return await self.optimizer.optimize(parameters, objective)\n</code></pre>"},{"location":"api/optimization/#best-practices","title":"Best Practices","text":""},{"location":"api/optimization/#parameter-configuration","title":"Parameter Configuration","text":"<pre><code># Define reasonable parameter ranges\nparameters = [\n    Parameter(\n        name=\"timeout\",\n        type=ParameterType.FLOAT,\n        min_value=0.1,\n        max_value=10.0,\n        step=0.1  # Avoid too fine granularity\n    )\n]\n\n# Use appropriate parameter types\ncategorical_param = Parameter(\n    name=\"strategy\",\n    type=ParameterType.CATEGORICAL,\n    choices=[\"fast\", \"balanced\"]  # Limited choices\n)\n</code></pre>"},{"location":"api/optimization/#objective-function-design","title":"Objective Function Design","text":"<pre><code>async def robust_objective(params: dict) -&gt; float:\n    try:\n        # Multiple evaluation runs\n        scores = []\n        for _ in range(3):\n            score = await evaluate(params)\n            scores.append(score)\n\n        # Return average score\n        return statistics.mean(scores)\n    except Exception as e:\n        # Handle failures gracefully\n        logger.error(f\"Evaluation failed: {e}\")\n        return float(\"inf\")\n</code></pre>"},{"location":"api/optimization/#see-also","title":"See Also","text":"<ul> <li>Core API Reference for base functionality</li> <li>Monitoring API Reference for performance monitoring</li> <li>Examples Repository</li> </ul>"},{"location":"api/protocols/","title":"Protocols API Reference","text":"<p>The <code>mtaio.protocols</code> module provides implementations for various network protocols, including ASGI, MQTT, and mail protocols.</p>"},{"location":"api/protocols/#asgi-protocol","title":"ASGI Protocol","text":""},{"location":"api/protocols/#asgiapplication","title":"ASGIApplication","text":"<p>Basic ASGI application implementation.</p> <pre><code>from mtaio.protocols import ASGIApplication, Request, Response\n\nclass App(ASGIApplication):\n    async def handle_request(self, request: Request) -&gt; Response:\n        if request.path == \"/\":\n            return Response.json({\n                \"message\": \"Welcome to mtaio\"\n            })\n        return Response.text(\"Not Found\", status_code=404)\n\napp = App()\n</code></pre>"},{"location":"api/protocols/#request","title":"Request","text":"<p>ASGI request wrapper.</p> <pre><code>class Request:\n    @property\n    def method(self) -&gt; str:\n        \"\"\"Get HTTP method.\"\"\"\n\n    @property\n    def path(self) -&gt; str:\n        \"\"\"Get request path.\"\"\"\n\n    @property\n    def query_string(self) -&gt; bytes:\n        \"\"\"Get raw query string.\"\"\"\n\n    @property\n    def headers(self) -&gt; Dict[str, str]:\n        \"\"\"Get request headers.\"\"\"\n\n    async def body(self) -&gt; bytes:\n        \"\"\"Get request body.\"\"\"\n\n    async def json(self) -&gt; Any:\n        \"\"\"Get JSON-decoded body.\"\"\"\n\n    async def form(self) -&gt; Dict[str, str]:\n        \"\"\"Get parsed form data.\"\"\"\n</code></pre>"},{"location":"api/protocols/#response","title":"Response","text":"<p>ASGI response wrapper.</p> <pre><code>class Response:\n    @classmethod\n    def text(\n        cls,\n        content: str,\n        status_code: int = 200,\n        headers: Optional[Dict[str, str]] = None\n    ) -&gt; \"Response\":\n        \"\"\"Create text response.\"\"\"\n\n    @classmethod\n    def json(\n        cls,\n        content: Any,\n        status_code: int = 200,\n        headers: Optional[Dict[str, str]] = None\n    ) -&gt; \"Response\":\n        \"\"\"Create JSON response.\"\"\"\n\n    @classmethod\n    def html(\n        cls,\n        content: str,\n        status_code: int = 200,\n        headers: Optional[Dict[str, str]] = None\n    ) -&gt; \"Response\":\n        \"\"\"Create HTML response.\"\"\"\n</code></pre>"},{"location":"api/protocols/#router","title":"Router","text":"<p>URL routing implementation.</p> <pre><code>from mtaio.protocols import Router\n\nrouter = Router()\n\n@router.route(\"/users/{user_id}\")\nasync def get_user(request, user_id: str):\n    return Response.json({\n        \"user_id\": user_id\n    })\n\n@router.route(\"/users\", methods=[\"POST\"])\nasync def create_user(request):\n    data = await request.json()\n    return Response.json(data, status_code=201)\n</code></pre>"},{"location":"api/protocols/#mqtt-protocol","title":"MQTT Protocol","text":""},{"location":"api/protocols/#mqttclient","title":"MQTTClient","text":"<p>MQTT client implementation.</p> <pre><code>from mtaio.protocols import MQTTClient, QoS\n\n# Create client\nclient = MQTTClient()\n\n# Set up message handler\n@client.on_message\nasync def handle_message(message):\n    print(f\"Received: {message.payload}\")\n\n# Connect and subscribe\nasync with client:\n    await client.connect(\"localhost\", 1883)\n    await client.subscribe(\"test/topic\", qos=QoS.AT_LEAST_ONCE)\n\n    # Publish message\n    await client.publish(\n        \"test/topic\",\n        \"Hello MQTT\",\n        qos=QoS.AT_LEAST_ONCE\n    )\n</code></pre>"},{"location":"api/protocols/#mqttmessage","title":"MQTTMessage","text":"<p>MQTT message container.</p> <pre><code>@dataclass\nclass MQTTMessage:\n    topic: str\n    payload: Union[str, bytes]\n    qos: QoS = QoS.AT_MOST_ONCE\n    retain: bool = False\n    message_id: Optional[int] = None\n</code></pre>"},{"location":"api/protocols/#qos","title":"QoS","text":"<p>MQTT Quality of Service levels.</p> <pre><code>class QoS(enum.IntEnum):\n    AT_MOST_ONCE = 0\n    AT_LEAST_ONCE = 1\n    EXACTLY_ONCE = 2\n</code></pre>"},{"location":"api/protocols/#mail-protocol","title":"Mail Protocol","text":""},{"location":"api/protocols/#asyncimapclient","title":"AsyncIMAPClient","text":"<p>Asynchronous IMAP client implementation.</p> <pre><code>from mtaio.protocols import AsyncIMAPClient\n\nasync with AsyncIMAPClient() as client:\n    # Connect and login\n    await client.connect(\"imap.example.com\", 993)\n    await client.login(\"user@example.com\", \"password\")\n\n    # Select mailbox\n    await client.select_mailbox(\"INBOX\")\n\n    # Fetch messages\n    messages = await client.fetch_messages(\n        criteria=\"UNSEEN\",\n        limit=10\n    )\n</code></pre>"},{"location":"api/protocols/#asyncsmtpclient","title":"AsyncSMTPClient","text":"<p>Asynchronous SMTP client implementation.</p> <pre><code>from mtaio.protocols import AsyncSMTPClient, MailMessage, Attachment\n\nasync with AsyncSMTPClient() as client:\n    # Connect and login\n    await client.connect(\"smtp.example.com\", 587)\n    await client.login(\"user@example.com\", \"password\")\n\n    # Create message\n    message = MailMessage(\n        subject=\"Test Message\",\n        sender=\"sender@example.com\",\n        recipients=[\"recipient@example.com\"],\n        text_content=\"Hello from mtaio\",\n        html_content=\"&lt;h1&gt;Hello from mtaio&lt;/h1&gt;\"\n    )\n\n    # Add attachment\n    attachment = Attachment(\n        filename=\"document.pdf\",\n        content=pdf_content,\n        content_type=\"application/pdf\"\n    )\n    message.attachments.append(attachment)\n\n    # Send message\n    await client.send_message(message)\n</code></pre>"},{"location":"api/protocols/#best-practices","title":"Best Practices","text":""},{"location":"api/protocols/#asgi-applications","title":"ASGI Applications","text":"<pre><code># Use middleware for common functionality\nclass LoggingMiddleware(ASGIMiddleware):\n    async def __call__(self, scope, receive, send):\n        start_time = time.time()\n        await self.app(scope, receive, send)\n        duration = time.time() - start_time\n        logger.info(f\"Request processed in {duration:.2f}s\")\n\n# Handle errors properly\nclass App(ASGIApplication):\n    async def handle_error(self, error: Exception, send):\n        if isinstance(error, ValidationError):\n            response = Response.json(\n                {\"error\": str(error)},\n                status_code=400\n            )\n        else:\n            response = Response.json(\n                {\"error\": \"Internal Server Error\"},\n                status_code=500\n            )\n        await response(send)\n</code></pre>"},{"location":"api/protocols/#mqtt-applications","title":"MQTT Applications","text":"<pre><code># Implement reliable messaging\nclass ReliableMQTTClient(MQTTClient):\n    async def reliable_publish(\n        self,\n        topic: str,\n        payload: str,\n        retries: int = 3\n    ):\n        for attempt in range(retries):\n            try:\n                await self.publish(\n                    topic,\n                    payload,\n                    qos=QoS.EXACTLY_ONCE\n                )\n                return\n            except MQTTError:\n                if attempt == retries - 1:\n                    raise\n                await asyncio.sleep(1)\n</code></pre>"},{"location":"api/protocols/#mail-applications","title":"Mail Applications","text":"<pre><code># Handle attachments efficiently\nclass MailHandler:\n    def __init__(self):\n        self.imap = AsyncIMAPClient()\n        self.smtp = AsyncSMTPClient()\n\n    async def forward_with_attachments(\n        self,\n        message: MailMessage,\n        forward_to: str\n    ):\n        # Download attachments in parallel\n        tasks = [\n            self.download_attachment(att)\n            for att in message.attachments\n        ]\n        attachments = await asyncio.gather(*tasks)\n\n        # Create new message\n        forward = MailMessage(\n            subject=f\"Fwd: {message.subject}\",\n            sender=self.smtp.username,\n            recipients=[forward_to],\n            text_content=message.text_content,\n            attachments=attachments\n        )\n\n        await self.smtp.send_message(forward)\n</code></pre>"},{"location":"api/protocols/#error-handling","title":"Error Handling","text":"<pre><code>from mtaio.exceptions import (\n    ProtocolError,\n    ASGIError,\n    MQTTError,\n    MailError\n)\n\n# ASGI error handling\ntry:\n    await app(scope, receive, send)\nexcept ASGIError as e:\n    logger.error(f\"ASGI error: {e}\")\n    # Handle error response\n\n# MQTT error handling\ntry:\n    await client.publish(topic, message)\nexcept MQTTError as e:\n    logger.error(f\"MQTT error: {e}\")\n    # Implement retry logic\n\n# Mail error handling\ntry:\n    await smtp.send_message(message)\nexcept MailError as e:\n    logger.error(f\"Mail error: {e}\")\n    # Queue for retry\n</code></pre>"},{"location":"api/protocols/#see-also","title":"See Also","text":"<ul> <li>Core API Reference for base functionality</li> <li>Events API Reference for event handling</li> <li>Examples Repository</li> </ul>"},{"location":"api/resources/","title":"Resources API Reference","text":"<p>The <code>mtaio.resources</code> module provides components for managing system resources, including rate limiting, timeouts, and concurrency control.</p>"},{"location":"api/resources/#ratelimiter","title":"RateLimiter","text":""},{"location":"api/resources/#basic-usage","title":"Basic Usage","text":"<pre><code>from mtaio.resources import RateLimiter\n\n# Create rate limiter\nlimiter = RateLimiter(10.0)  # 10 operations per second\n\n# Use as decorator\n@limiter.limit\nasync def rate_limited_operation():\n    await perform_operation()\n\n# Use with context manager\nasync def manual_rate_limit():\n    async with limiter:\n        await perform_operation()\n</code></pre>"},{"location":"api/resources/#class-reference","title":"Class Reference","text":"<pre><code>class RateLimiter:\n    def __init__(\n        self,\n        rate: float,\n        burst: Optional[int] = None\n    ):\n        \"\"\"\n        Initialize rate limiter.\n\n        Args:\n            rate: Maximum operations per second\n            burst: Maximum burst size (None for rate-based burst)\n        \"\"\"\n\n    async def acquire(self, tokens: int = 1) -&gt; None:\n        \"\"\"\n        Acquire tokens from the rate limiter.\n\n        Args:\n            tokens: Number of tokens to acquire\n\n        Raises:\n            ResourceLimitError: If rate limit is exceeded\n        \"\"\"\n\n    def limit(\n        self,\n        func: Optional[Callable[..., Awaitable[T]]] = None,\n        *,\n        tokens: int = 1\n    ) -&gt; Callable[..., Awaitable[T]]:\n        \"\"\"Decorator for rate limiting functions.\"\"\"\n</code></pre>"},{"location":"api/resources/#timeoutmanager","title":"TimeoutManager","text":"<p>Provides timeout control for asynchronous operations.</p>"},{"location":"api/resources/#basic-usage_1","title":"Basic Usage","text":"<pre><code>from mtaio.resources import TimeoutManager\n\nasync def operation_with_timeout():\n    # Set timeout for a block of operations\n    async with TimeoutManager(5.0) as tm:  # 5 seconds timeout\n        result = await tm.run(long_running_operation())\n\n        # Different timeout for specific operation\n        result2 = await tm.run(\n            another_operation(),\n            timeout=2.0  # 2 seconds timeout\n        )\n</code></pre>"},{"location":"api/resources/#class-reference_1","title":"Class Reference","text":"<pre><code>class TimeoutManager:\n    def __init__(self, default_timeout: Optional[float] = None):\n        \"\"\"\n        Initialize timeout manager.\n\n        Args:\n            default_timeout: Default timeout in seconds\n        \"\"\"\n\n    async def run(\n        self,\n        coro: Awaitable[T],\n        *,\n        timeout: Optional[float] = None\n    ) -&gt; T:\n        \"\"\"\n        Run coroutine with timeout.\n\n        Args:\n            coro: Coroutine to execute\n            timeout: Optional timeout override\n\n        Returns:\n            Result of the coroutine\n\n        Raises:\n            TimeoutError: If operation times out\n        \"\"\"\n</code></pre>"},{"location":"api/resources/#concurrencylimiter","title":"ConcurrencyLimiter","text":"<p>Controls the number of concurrent operations.</p>"},{"location":"api/resources/#basic-usage_2","title":"Basic Usage","text":"<pre><code>from mtaio.resources import ConcurrencyLimiter\n\n# Create limiter with maximum 5 concurrent operations\nlimiter = ConcurrencyLimiter(5)\n\n@limiter.limit\nasync def concurrent_operation():\n    await process_task()\n\n# Manual usage\nasync def manual_concurrency():\n    async with limiter:\n        await perform_operation()\n</code></pre>"},{"location":"api/resources/#class-reference_2","title":"Class Reference","text":"<pre><code>class ConcurrencyLimiter:\n    def __init__(self, limit: int):\n        \"\"\"\n        Initialize concurrency limiter.\n\n        Args:\n            limit: Maximum number of concurrent operations\n        \"\"\"\n\n    async def acquire(self) -&gt; None:\n        \"\"\"\n        Acquire permission to proceed.\n\n        Raises:\n            ResourceLimitError: If limit is exceeded\n        \"\"\"\n\n    def limit(\n        self,\n        func: Callable[..., Awaitable[T]]\n    ) -&gt; Callable[..., Awaitable[T]]:\n        \"\"\"Decorator for limiting concurrency.\"\"\"\n</code></pre>"},{"location":"api/resources/#resourcegroup","title":"ResourceGroup","text":"<p>Manages multiple resources together.</p>"},{"location":"api/resources/#basic-usage_3","title":"Basic Usage","text":"<pre><code>from mtaio.resources import ResourceGroup\n\nasync def manage_resources():\n    group = ResourceGroup()\n\n    # Add resources to group\n    rate_limiter = await group.add(RateLimiter(10.0))\n    timeout = await group.add(TimeoutManager(5.0))\n\n    # Resources are automatically managed\n    async with group:\n        async with timeout:\n            await rate_limiter.acquire()\n            await perform_operation()\n</code></pre>"},{"location":"api/resources/#class-reference_3","title":"Class Reference","text":"<pre><code>class ResourceGroup:\n    async def add(self, resource: Any) -&gt; Any:\n        \"\"\"\n        Add resource to group.\n\n        Args:\n            resource: Resource to manage\n\n        Returns:\n            Added resource\n        \"\"\"\n\n    async def remove(self, resource: Any) -&gt; None:\n        \"\"\"\n        Remove resource from group.\n\n        Args:\n            resource: Resource to remove\n        \"\"\"\n</code></pre>"},{"location":"api/resources/#advanced-features","title":"Advanced Features","text":""},{"location":"api/resources/#adaptive-rate-limiting","title":"Adaptive Rate Limiting","text":"<pre><code>from mtaio.resources import RateLimiter\nfrom typing import Dict\n\nclass AdaptiveRateLimiter(RateLimiter):\n    def __init__(self):\n        self.rates: Dict[str, float] = {}\n        self._current_load = 0.0\n\n    async def acquire(self, resource_id: str) -&gt; None:\n        rate = self.rates.get(resource_id, 1.0)\n        if self._current_load &gt; 0.8:  # 80% load\n            rate *= 0.5  # Reduce rate\n        await super().acquire(tokens=1/rate)\n\n    def adjust_rate(self, resource_id: str, load: float) -&gt; None:\n        self._current_load = load\n        if load &gt; 0.9:  # High load\n            self.rates[resource_id] *= 0.8\n        elif load &lt; 0.5:  # Low load\n            self.rates[resource_id] *= 1.2\n</code></pre>"},{"location":"api/resources/#cascading-timeouts","title":"Cascading Timeouts","text":"<pre><code>from mtaio.resources import TimeoutManager\nfrom contextlib import asynccontextmanager\n\nclass TimeoutController:\n    def __init__(self):\n        self.timeouts = TimeoutManager()\n\n    @asynccontextmanager\n    async def cascading_timeout(self, timeouts: list[float]):\n        \"\"\"Implements cascading timeouts with fallback.\"\"\"\n        for timeout in timeouts:\n            try:\n                async with self.timeouts.timeout(timeout):\n                    yield\n                break\n            except TimeoutError:\n                if timeout == timeouts[-1]:\n                    raise\n                continue\n</code></pre>"},{"location":"api/resources/#best-practices","title":"Best Practices","text":""},{"location":"api/resources/#resource-cleanup","title":"Resource Cleanup","text":"<pre><code>from contextlib import AsyncExitStack\n\nasync def cleanup_resources():\n    async with AsyncExitStack() as stack:\n        # Add resources to stack\n        rate_limiter = await stack.enter_async_context(RateLimiter(10.0))\n        timeout = await stack.enter_async_context(TimeoutManager(5.0))\n\n        # Resources are automatically cleaned up\n</code></pre>"},{"location":"api/resources/#error-handling","title":"Error Handling","text":"<pre><code>from mtaio.exceptions import ResourceLimitError, TimeoutError\n\nasync def handle_resource_errors():\n    try:\n        async with TimeoutManager(5.0) as tm:\n            await tm.run(operation())\n    except TimeoutError:\n        logger.error(\"Operation timed out\")\n    except ResourceLimitError as e:\n        logger.error(f\"Resource limit exceeded: {e}\")\n</code></pre>"},{"location":"api/resources/#performance-optimization","title":"Performance Optimization","text":"<ol> <li> <p>Rate Limiting Strategy <pre><code># Balance between protection and performance\nrate_limiter = RateLimiter(\n    rate=100.0,    # 100 operations per second\n    burst=20       # Allow bursts of 20 operations\n)\n</code></pre></p> </li> <li> <p>Timeout Configuration <pre><code># Set appropriate timeouts\ntimeout_manager = TimeoutManager(\n    default_timeout=30.0  # Default 30 seconds\n)\n</code></pre></p> </li> <li> <p>Concurrency Control <pre><code># Limit concurrent operations based on system capacity\nconcurrency_limiter = ConcurrencyLimiter(\n    limit=cpu_count() * 2  # 2 operations per CPU core\n)\n</code></pre></p> </li> </ol>"},{"location":"api/resources/#error-handling-examples","title":"Error Handling Examples","text":"<pre><code>from mtaio.exceptions import (\n    ResourceError,\n    ResourceLimitError,\n    TimeoutError\n)\n\nasync def handle_errors():\n    try:\n        async with RateLimiter(10.0) as limiter:\n            await limiter.acquire()\n\n    except ResourceLimitError:\n        # Handle rate limit exceeded\n        logger.warning(\"Rate limit exceeded\")\n        await asyncio.sleep(1)\n\n    except TimeoutError:\n        # Handle timeout\n        logger.error(\"Operation timed out\")\n\n    except ResourceError as e:\n        # Handle general resource errors\n        logger.error(f\"Resource error: {e}\")\n</code></pre>"},{"location":"api/resources/#integration-examples","title":"Integration Examples","text":""},{"location":"api/resources/#web-application","title":"Web Application","text":"<pre><code>from mtaio.resources import RateLimiter, TimeoutManager\n\nclass RateLimitedAPI:\n    def __init__(self):\n        self.rate_limiter = RateLimiter(100.0)  # 100 requests/second\n        self.timeout = TimeoutManager(5.0)      # 5 second timeout\n\n    async def handle_request(self, request):\n        async with self.timeout:\n            await self.rate_limiter.acquire()\n            return await process_request(request)\n</code></pre>"},{"location":"api/resources/#task-processing","title":"Task Processing","text":"<pre><code>from mtaio.resources import ConcurrencyLimiter\n\nclass TaskProcessor:\n    def __init__(self):\n        self.limiter = ConcurrencyLimiter(10)  # 10 concurrent tasks\n\n    async def process_tasks(self, tasks: list):\n        async with self.limiter:\n            results = []\n            for task in tasks:\n                result = await self.process_task(task)\n                results.append(result)\n            return results\n</code></pre>"},{"location":"api/resources/#see-also","title":"See Also","text":"<ul> <li>Core API Reference for base functionality</li> <li>Events API Reference for event handling</li> <li>Examples Repository</li> </ul>"},{"location":"api/typing/","title":"Typing API Reference","text":"<p>The <code>mtaio.typing</code> module provides type definitions and protocols used throughout the mtaio framework, enabling better code completion and static type checking.</p>"},{"location":"api/typing/#basic-types","title":"Basic Types","text":""},{"location":"api/typing/#generic-type-variables","title":"Generic Type Variables","text":"<pre><code>from mtaio.typing import T, T_co, T_contra, K, V\n\n# Basic generic type variables\nT = TypeVar(\"T\")               # Invariant type variable\nT_co = TypeVar(\"T_co\", covariant=True)       # Covariant type variable\nT_contra = TypeVar(\"T_contra\", contravariant=True)  # Contravariant type variable\nK = TypeVar(\"K\")               # Key type variable\nV = TypeVar(\"V\")               # Value type variable\n</code></pre>"},{"location":"api/typing/#common-type-aliases","title":"Common Type Aliases","text":"<pre><code>from mtaio.typing import (\n    JSON,\n    PathLike,\n    TimeValue,\n    Primitive\n)\n\n# JSON-compatible types\nJSON = Union[Dict[str, Any], List[Any], str, int, float, bool, None]\n\n# Path-like types\nPathLike = Union[str, Path]\n\n# Time value types\nTimeValue = Union[int, float, timedelta]\n\n# Primitive types\nPrimitive = Union[str, int, float, bool, None]\n</code></pre>"},{"location":"api/typing/#function-types","title":"Function Types","text":""},{"location":"api/typing/#callback-types","title":"Callback Types","text":"<pre><code>from mtaio.typing import (\n    Callback,\n    AsyncCallback,\n    ErrorCallback,\n    AsyncErrorCallback\n)\n\n# Synchronous and asynchronous callbacks\nCallback = Callable[..., Any]\nAsyncCallback = Callable[..., Awaitable[Any]]\n\n# Error handling callbacks\nErrorCallback = Callable[[Exception], Any]\nAsyncErrorCallback = Callable[[Exception], Awaitable[Any]]\n\n# Cleanup callbacks\nCleanupCallback = Callable[[], Any]\nAsyncCleanupCallback = Callable[[], Awaitable[Any]]\n</code></pre>"},{"location":"api/typing/#function-type-definitions","title":"Function Type Definitions","text":"<pre><code>from mtaio.typing import (\n    SyncFunc,\n    AsyncFunc,\n    AsyncCallable,\n    CoroFunc,\n    AnyFunc,\n    Decorator\n)\n\n# Function types\nSyncFunc = Callable[..., T]\nAsyncFunc = Callable[..., Awaitable[T]]\nAsyncCallable = Callable[..., Awaitable[T]]\nCoroFunc = TypeVar('CoroFunc', bound=AsyncCallable[Any])\n\n# Combined function types\nAnyFunc = Union[SyncFunc[T], AsyncFunc[T]]\n\n# Decorator type\nDecorator = Callable[[AnyFunc[T]], AnyFunc[T]]\n</code></pre>"},{"location":"api/typing/#protocol-definitions","title":"Protocol Definitions","text":""},{"location":"api/typing/#resource-management","title":"Resource Management","text":"<pre><code>from mtaio.typing import Resource, ResourceManager\n\n@runtime_checkable\nclass Resource(Protocol):\n    \"\"\"Protocol for resource objects.\"\"\"\n\n    async def acquire(self) -&gt; None:\n        \"\"\"Acquire resource.\"\"\"\n        ...\n\n    async def release(self) -&gt; None:\n        \"\"\"Release resource.\"\"\"\n        ...\n\nclass ResourceManager(AsyncContextManager[Resource], Protocol):\n    \"\"\"Protocol for resource managers.\"\"\"\n\n    async def __aenter__(self) -&gt; Resource:\n        \"\"\"Enter context and acquire resource.\"\"\"\n        ...\n\n    async def __aexit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Any,\n    ) -&gt; Optional[bool]:\n        \"\"\"Exit context and release resource.\"\"\"\n        ...\n</code></pre>"},{"location":"api/typing/#event-handling","title":"Event Handling","text":"<pre><code>from mtaio.typing import Event, EventHandler\n\n@runtime_checkable\nclass Event(Protocol[T]):\n    \"\"\"Protocol for event objects.\"\"\"\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"Event name.\"\"\"\n        ...\n\n    @property\n    def data(self) -&gt; T:\n        \"\"\"Event data.\"\"\"\n        ...\n\nclass EventHandler(Protocol[T]):\n    \"\"\"Protocol for event handlers.\"\"\"\n\n    async def handle(self, event: Event[T]) -&gt; None:\n        \"\"\"Handle event.\"\"\"\n        ...\n</code></pre>"},{"location":"api/typing/#cache-types","title":"Cache Types","text":"<pre><code>from mtaio.typing import CacheKey, CacheValue\n\n@runtime_checkable\nclass CacheKey(Protocol):\n    \"\"\"Protocol for cache keys.\"\"\"\n\n    def __str__(self) -&gt; str:\n        \"\"\"Convert to string.\"\"\"\n        ...\n\n    def __hash__(self) -&gt; int:\n        \"\"\"Get hash value.\"\"\"\n        ...\n\nclass CacheValue(Protocol):\n    \"\"\"Protocol for cache values.\"\"\"\n\n    async def serialize(self) -&gt; bytes:\n        \"\"\"Serialize value.\"\"\"\n        ...\n\n    @classmethod\n    async def deserialize(cls, data: bytes) -&gt; Any:\n        \"\"\"Deserialize value.\"\"\"\n        ...\n</code></pre>"},{"location":"api/typing/#utility-types","title":"Utility Types","text":""},{"location":"api/typing/#result-type","title":"Result Type","text":"<pre><code>from mtaio.typing import Result\n\nclass Result(Generic[T]):\n    \"\"\"Container for operation results.\"\"\"\n\n    def __init__(\n        self,\n        value: Optional[T] = None,\n        error: Optional[Exception] = None\n    ) -&gt; None:\n        self.value = value\n        self.error = error\n        self.success = error is None\n\n    def unwrap(self) -&gt; T:\n        \"\"\"\n        Get value or raise error.\n\n        Returns:\n            The contained value\n\n        Raises:\n            The contained error if present\n        \"\"\"\n        if self.error:\n            raise self.error\n        if self.value is None:\n            raise ValueError(\"Result has no value\")\n        return self.value\n</code></pre>"},{"location":"api/typing/#configuration-types","title":"Configuration Types","text":"<pre><code>from mtaio.typing import ConfigProtocol, Config\n\n@runtime_checkable\nclass ConfigProtocol(Protocol):\n    \"\"\"Protocol for configuration objects.\"\"\"\n\n    def get(self, key: str, default: Any = None) -&gt; Any:\n        \"\"\"Get configuration value.\"\"\"\n        ...\n\n    def get_path(self, key: str, default: Optional[PathLike] = None) -&gt; PathLike:\n        \"\"\"Get path value.\"\"\"\n        ...\n\n    def get_timedelta(self, key: str, default: Optional[TimeValue] = None) -&gt; timedelta:\n        \"\"\"Get timedelta value.\"\"\"\n        ...\n\nclass Config(Dict[str, Any], ConfigProtocol):\n    \"\"\"Configuration implementation.\"\"\"\n    pass\n</code></pre>"},{"location":"api/typing/#factory-types","title":"Factory Types","text":"<pre><code>from mtaio.typing import Factory, AsyncFactory\n\nclass Factory(Protocol[T]):\n    \"\"\"Protocol for factory objects.\"\"\"\n\n    def create(self) -&gt; T:\n        \"\"\"Create new instance.\"\"\"\n        ...\n\nclass AsyncFactory(Protocol[T]):\n    \"\"\"Protocol for async factory objects.\"\"\"\n\n    async def create(self) -&gt; T:\n        \"\"\"Create new instance asynchronously.\"\"\"\n        ...\n</code></pre>"},{"location":"api/typing/#best-practices","title":"Best Practices","text":""},{"location":"api/typing/#using-type-hints","title":"Using Type Hints","text":"<pre><code>from mtaio.typing import AsyncFunc, Result\n\n# Function type hints\nasync def process_data(func: AsyncFunc[str]) -&gt; Result[str]:\n    try:\n        result = await func()\n        return Result(value=result)\n    except Exception as e:\n        return Result(error=e)\n\n# Protocol usage\nclass DataProcessor(AsyncFactory[str]):\n    async def create(self) -&gt; str:\n        return await self.process()\n\n    async def process(self) -&gt; str:\n        # Processing implementation\n        return \"processed data\"\n</code></pre>"},{"location":"api/typing/#generic-type-usage","title":"Generic Type Usage","text":"<pre><code>from mtaio.typing import T, CacheValue\n\nclass CustomCache(Generic[T]):\n    async def get(self, key: str) -&gt; Optional[T]:\n        ...\n\n    async def set(self, key: str, value: T) -&gt; None:\n        ...\n\n# Implementation with specific type\ncache = CustomCache[str]()\n</code></pre>"},{"location":"api/typing/#protocol-inheritance","title":"Protocol Inheritance","text":"<pre><code>from mtaio.typing import Resource, EventHandler\n\nclass ManagedResource(Resource, EventHandler[str]):\n    async def acquire(self) -&gt; None:\n        ...\n\n    async def release(self) -&gt; None:\n        ...\n\n    async def handle(self, event: Event[str]) -&gt; None:\n        ...\n</code></pre>"},{"location":"api/typing/#error-handling","title":"Error Handling","text":"<pre><code>from mtaio.typing import Result, AsyncFunc\n\nasync def safe_operation(func: AsyncFunc[T]) -&gt; Result[T]:\n    try:\n        result = await func()\n        return Result(value=result)\n    except Exception as e:\n        logger.error(f\"Operation failed: {e}\")\n        return Result(error=e)\n\n# Usage\nresult = await safe_operation(async_function)\nif result.success:\n    value = result.unwrap()\nelse:\n    handle_error(result.error)\n</code></pre>"},{"location":"api/typing/#integration-examples","title":"Integration Examples","text":""},{"location":"api/typing/#resource-management_1","title":"Resource Management","text":"<pre><code>from mtaio.typing import Resource, ResourceManager\n\nclass DatabaseConnection(Resource):\n    async def acquire(self) -&gt; None:\n        await self.connect()\n\n    async def release(self) -&gt; None:\n        await self.disconnect()\n\nclass ConnectionManager(ResourceManager[DatabaseConnection]):\n    async def __aenter__(self) -&gt; DatabaseConnection:\n        conn = DatabaseConnection()\n        await conn.acquire()\n        return conn\n\n    async def __aexit__(self, *args) -&gt; None:\n        await self.resource.release()\n</code></pre>"},{"location":"api/typing/#event-system","title":"Event System","text":"<pre><code>from mtaio.typing import Event, EventHandler\n\nclass DataEvent(Event[Dict[str, Any]]):\n    def __init__(self, name: str, data: Dict[str, Any]):\n        self._name = name\n        self._data = data\n\n    @property\n    def name(self) -&gt; str:\n        return self._name\n\n    @property\n    def data(self) -&gt; Dict[str, Any]:\n        return self._data\n\nclass DataHandler(EventHandler[Dict[str, Any]]):\n    async def handle(self, event: Event[Dict[str, Any]]) -&gt; None:\n        await self.process_data(event.data)\n</code></pre>"},{"location":"api/typing/#see-also","title":"See Also","text":"<ul> <li>Core API Reference for base functionality</li> <li>Exceptions API Reference for error handling</li> <li>Examples Repository</li> </ul>"},{"location":"guides/advanced-usage/","title":"Advanced Usage","text":"<p>This guide covers advanced features and patterns in mtaio for building sophisticated asynchronous applications.</p>"},{"location":"guides/advanced-usage/#advanced-event-patterns","title":"Advanced Event Patterns","text":""},{"location":"guides/advanced-usage/#event-pipelines","title":"Event Pipelines","text":"<p>Combine events with data pipelines for complex workflows:</p> <pre><code>from mtaio.events import EventEmitter\nfrom mtaio.data import Pipeline, Stage\n\nclass ValidationStage(Stage[dict, dict]):\n    async def process(self, data: dict) -&gt; dict:\n        if \"user_id\" not in data:\n            raise ValueError(\"Missing user_id\")\n        return data\n\nclass EnrichmentStage(Stage[dict, dict]):\n    async def process(self, data: dict) -&gt; dict:\n        data[\"timestamp\"] = time.time()\n        return data\n\nasync def setup_event_pipeline():\n    pipeline = Pipeline()\n    emitter = EventEmitter()\n\n    # Configure pipeline\n    pipeline.add_stage(ValidationStage())\n    pipeline.add_stage(EnrichmentStage())\n\n    @emitter.on(\"user_action\")\n    async def handle_user_action(event):\n        async with pipeline:\n            processed_data = await pipeline.process(event.data)\n            await emitter.emit(\"processed_action\", processed_data)\n\n    return emitter\n</code></pre>"},{"location":"guides/advanced-usage/#event-filtering-and-transformation","title":"Event Filtering and Transformation","text":"<pre><code>from mtaio.events import EventEmitter, Event\n\nasync def setup_event_processing():\n    emitter = EventEmitter()\n\n    # Filter events\n    filtered = emitter.filter(\n        lambda event: event.data.get(\"priority\") == \"high\"\n    )\n\n    # Transform events\n    transformed = emitter.map(\n        lambda event: Event(\n            event.name,\n            {**event.data, \"processed\": True}\n        )\n    )\n\n    # Chain multiple emitters\n    emitter.pipe(filtered)\n    filtered.pipe(transformed)\n</code></pre>"},{"location":"guides/advanced-usage/#advanced-caching-strategies","title":"Advanced Caching Strategies","text":""},{"location":"guides/advanced-usage/#cache-layering","title":"Cache Layering","text":"<p>Implement multi-level caching for optimal performance:</p> <pre><code>from mtaio.cache import TTLCache, DistributedCache\nfrom typing import Optional, TypeVar, Generic\n\nT = TypeVar(\"T\")\n\nclass LayeredCache(Generic[T]):\n    def __init__(self):\n        self.local = TTLCache[T](default_ttl=60.0)  # 1 minute local cache\n        self.distributed = DistributedCache[T]([\n            (\"localhost\", 5000),\n            (\"localhost\", 5001)\n        ])\n\n    async def get(self, key: str) -&gt; Optional[T]:\n        # Try local cache first\n        value = await self.local.get(key)\n        if value is not None:\n            return value\n\n        # Try distributed cache\n        value = await self.distributed.get(key)\n        if value is not None:\n            # Update local cache\n            await self.local.set(key, value)\n            return value\n\n        return None\n\n    async def set(self, key: str, value: T) -&gt; None:\n        # Update both caches\n        await self.local.set(key, value)\n        await self.distributed.set(key, value)\n</code></pre>"},{"location":"guides/advanced-usage/#cache-invalidation-patterns","title":"Cache Invalidation Patterns","text":"<pre><code>from mtaio.cache import TTLCache\nfrom mtaio.events import EventEmitter\n\nclass CacheInvalidator:\n    def __init__(self):\n        self.cache = TTLCache[str]()\n        self.emitter = EventEmitter()\n\n        @self.emitter.on(\"data_updated\")\n        async def invalidate_cache(event):\n            keys = event.data.get(\"affected_keys\", [])\n            for key in keys:\n                await self.cache.delete(key)\n\n            if event.data.get(\"clear_all\", False):\n                await self.cache.clear()\n\n    async def update_data(self, key: str, value: str) -&gt; None:\n        await self.cache.set(key, value)\n        await self.emitter.emit(\"data_updated\", {\n            \"affected_keys\": [key]\n        })\n</code></pre>"},{"location":"guides/advanced-usage/#advanced-resource-management","title":"Advanced Resource Management","text":""},{"location":"guides/advanced-usage/#custom-resource-limiters","title":"Custom Resource Limiters","text":"<p>Create specialized resource limiters for specific needs:</p> <pre><code>from mtaio.resources import ResourceLimiter\nfrom mtaio.typing import AsyncFunc\nfrom typing import Dict\n\nclass AdaptiveRateLimiter(ResourceLimiter):\n    def __init__(self):\n        self.rates: Dict[str, float] = {}\n        self._current_load = 0.0\n\n    async def acquire(self, resource_id: str) -&gt; None:\n        rate = self.rates.get(resource_id, 1.0)\n        if self._current_load &gt; 0.8:  # 80% load\n            rate *= 0.5  # Reduce rate\n        await super().acquire(tokens=1/rate)\n\n    def adjust_rate(self, resource_id: str, load: float) -&gt; None:\n        self._current_load = load\n        if load &gt; 0.9:  # High load\n            self.rates[resource_id] *= 0.8\n        elif load &lt; 0.5:  # Low load\n            self.rates[resource_id] *= 1.2\n</code></pre>"},{"location":"guides/advanced-usage/#complex-timeout-patterns","title":"Complex Timeout Patterns","text":"<pre><code>from mtaio.resources import TimeoutManager\nfrom contextlib import asynccontextmanager\n\nclass TimeoutController:\n    def __init__(self):\n        self.timeouts = TimeoutManager()\n\n    @asynccontextmanager\n    async def cascading_timeout(self, timeouts: list[float]):\n        \"\"\"Implements cascading timeouts with fallback behavior\"\"\"\n        for timeout in timeouts:\n            try:\n                async with self.timeouts.timeout(timeout):\n                    yield\n                break\n            except TimeoutError:\n                if timeout == timeouts[-1]:\n                    raise\n                continue\n</code></pre>"},{"location":"guides/advanced-usage/#advanced-data-processing","title":"Advanced Data Processing","text":""},{"location":"guides/advanced-usage/#custom-pipeline-stages","title":"Custom Pipeline Stages","text":"<p>Create specialized pipeline stages for complex data transformations:</p> <pre><code>from mtaio.data import Pipeline, Stage\nfrom typing import Any, AsyncIterator\n\nclass BatchProcessingStage(Stage[Any, Any]):\n    def __init__(self, batch_size: int):\n        self.batch_size = batch_size\n        self.batch = []\n\n    async def process(self, item: Any) -&gt; AsyncIterator[Any]:\n        self.batch.append(item)\n\n        if len(self.batch) &gt;= self.batch_size:\n            result = await self._process_batch(self.batch)\n            self.batch = []\n            return result\n\n    async def _process_batch(self, batch: list[Any]) -&gt; Any:\n        # Implement batch processing logic\n        return batch\n</code></pre>"},{"location":"guides/advanced-usage/#stream-processing","title":"Stream Processing","text":"<p>Implement complex stream processing patterns:</p> <pre><code>from mtaio.data import Stream\nfrom typing import TypeVar, AsyncIterator\n\nT = TypeVar(\"T\")\n\nclass StreamProcessor(Stream[T]):\n    async def window(\n        self,\n        size: int,\n        slide: int = 1\n    ) -&gt; AsyncIterator[list[T]]:\n        \"\"\"Sliding window implementation\"\"\"\n        buffer: list[T] = []\n\n        async for item in self:\n            buffer.append(item)\n            if len(buffer) &gt;= size:\n                yield buffer[-size:]\n                buffer = buffer[slide:]\n\n    async def batch_by_time(\n        self,\n        seconds: float\n    ) -&gt; AsyncIterator[list[T]]:\n        \"\"\"Time-based batching\"\"\"\n        batch: list[T] = []\n        start_time = time.monotonic()\n\n        async for item in self:\n            batch.append(item)\n            if time.monotonic() - start_time &gt;= seconds:\n                yield batch\n                batch = []\n                start_time = time.monotonic()\n</code></pre>"},{"location":"guides/advanced-usage/#advanced-monitoring","title":"Advanced Monitoring","text":""},{"location":"guides/advanced-usage/#custom-metrics-collection","title":"Custom Metrics Collection","text":"<pre><code>from mtaio.monitoring import ResourceMonitor\nfrom dataclasses import dataclass\n\n@dataclass\nclass CustomMetrics:\n    request_count: int = 0\n    error_count: int = 0\n    average_response_time: float = 0.0\n\nclass ApplicationMonitor(ResourceMonitor):\n    def __init__(self):\n        super().__init__()\n        self.metrics = CustomMetrics()\n\n    async def collect_metrics(self) -&gt; None:\n        while True:\n            stats = await self.get_current_stats()\n\n            # Update custom metrics\n            self.metrics.average_response_time = (\n                stats.latency_sum / stats.request_count\n                if stats.request_count &gt; 0 else 0.0\n            )\n\n            # Emit alerts if needed\n            if self.metrics.error_count &gt; 100:\n                await self.alert(\"High error rate detected\")\n\n            await asyncio.sleep(60)  # Collect every minute\n</code></pre>"},{"location":"guides/advanced-usage/#production-best-practices","title":"Production Best Practices","text":""},{"location":"guides/advanced-usage/#error-recovery","title":"Error Recovery","text":"<pre><code>from mtaio.core import TaskExecutor\nfrom mtaio.exceptions import MTAIOError\n\nclass ResilientExecutor:\n    def __init__(self):\n        self.executor = TaskExecutor()\n        self.retry_count = 3\n\n    async def execute_with_recovery(\n        self,\n        func: AsyncFunc[T],\n        *args: Any,\n        **kwargs: Any\n    ) -&gt; T:\n        for attempt in range(self.retry_count):\n            try:\n                return await self.executor.run(\n                    func(*args, **kwargs)\n                )\n            except MTAIOError as e:\n                if attempt == self.retry_count - 1:\n                    raise\n                await asyncio.sleep(2 ** attempt)  # Exponential backoff\n</code></pre>"},{"location":"guides/advanced-usage/#resource-cleanup","title":"Resource Cleanup","text":"<pre><code>from mtaio.resources import ResourceManager\nfrom typing import AsyncIterator\n\nclass ManagedResources:\n    def __init__(self):\n        self.resources: list[AsyncCloseable] = []\n\n    async def acquire(self, resource: AsyncCloseable) -&gt; None:\n        self.resources.append(resource)\n\n    async def cleanup(self) -&gt; None:\n        while self.resources:\n            resource = self.resources.pop()\n            await resource.close()\n\n    @asynccontextmanager\n    async def resource_scope(self) -&gt; AsyncIterator[None]:\n        try:\n            yield\n        finally:\n            await self.cleanup()\n</code></pre>"},{"location":"guides/advanced-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Check out our Example Applications</li> <li>Review the API Reference</li> <li>Join our Community Discussions</li> </ul>"},{"location":"guides/basic-usage/","title":"Basic Usage","text":"<p>This guide covers the fundamental features of mtaio through practical examples.</p>"},{"location":"guides/basic-usage/#core-functionality","title":"Core Functionality","text":""},{"location":"guides/basic-usage/#task-execution","title":"Task Execution","text":"<p>The <code>TaskExecutor</code> provides controlled execution of asynchronous tasks:</p> <pre><code>from mtaio.core import TaskExecutor\n\nasync def process_item(item: str) -&gt; str:\n    return f\"Processed: {item}\"\n\nasync def main():\n    # Basic usage\n    async with TaskExecutor() as executor:\n        # Process single task\n        result = await executor.run(process_item(\"data\"))\n\n        # Process multiple tasks with concurrency limit\n        items = [\"item1\", \"item2\", \"item3\", \"item4\"]\n        results = await executor.gather(\n            *(process_item(item) for item in items),\n            limit=2  # Maximum 2 concurrent tasks\n        )\n\n    # Map operation across items\n    async with TaskExecutor() as executor:\n        results = await executor.map(process_item, items, limit=2)\n</code></pre>"},{"location":"guides/basic-usage/#async-queue","title":"Async Queue","text":"<p>For managing asynchronous data flow:</p> <pre><code>from mtaio.core import AsyncQueue\n\nasync def producer_consumer():\n    queue = AsyncQueue[str](maxsize=10)\n\n    # Producer\n    await queue.put(\"item\")\n\n    # Consumer\n    item = await queue.get()\n    queue.task_done()\n\n    # Wait for all tasks to complete\n    await queue.join()\n</code></pre>"},{"location":"guides/basic-usage/#event-handling","title":"Event Handling","text":"<p>The event system allows for decoupled communication between components:</p> <pre><code>from mtaio.events import EventEmitter\n\n# Create emitter\nemitter = EventEmitter()\n\n# Define handlers\n@emitter.on(\"user_action\")\nasync def handle_user_action(event):\n    user = event.data\n    print(f\"User {user['name']} performed action\")\n\n@emitter.once(\"startup\")  # One-time handler\nasync def handle_startup(event):\n    print(\"Application started\")\n\n# Emit events\nawait emitter.emit(\"startup\", {\"time\": \"2024-01-01\"})\nawait emitter.emit(\"user_action\", {\"name\": \"John\"})\n</code></pre>"},{"location":"guides/basic-usage/#caching","title":"Caching","text":"<p>mtaio provides various caching mechanisms:</p>"},{"location":"guides/basic-usage/#ttl-cache","title":"TTL Cache","text":"<pre><code>from mtaio.cache import TTLCache\n\n# Create cache with 5-minute TTL\ncache = TTLCache[str](\n    default_ttl=300.0,\n    max_size=1000\n)\n\n# Basic operations\nawait cache.set(\"key\", \"value\")\nvalue = await cache.get(\"key\")\n\n# With custom TTL\nawait cache.set(\"key2\", \"value2\", ttl=60.0)  # 60 seconds\n\n# Batch operations\nawait cache.set_many({\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n})\n</code></pre>"},{"location":"guides/basic-usage/#distributed-cache","title":"Distributed Cache","text":"<pre><code>from mtaio.cache import DistributedCache\n\n# Create distributed cache with multiple nodes\ncache = DistributedCache[str](\n    nodes=[\n        (\"localhost\", 5000),\n        (\"localhost\", 5001)\n    ],\n    replication_factor=2\n)\n\nasync with cache:\n    await cache.set(\"key\", \"value\")\n    value = await cache.get(\"key\")\n</code></pre>"},{"location":"guides/basic-usage/#resource-management","title":"Resource Management","text":""},{"location":"guides/basic-usage/#rate-limiting","title":"Rate Limiting","text":"<pre><code>from mtaio.resources import RateLimiter\n\n# Create rate limiter\nlimiter = RateLimiter(10.0)  # 10 operations per second\n\n@limiter.limit\nasync def rate_limited_operation():\n    # This function is limited to 10 calls per second\n    pass\n\n# Manual rate limiting\nasync def manual_rate_limit():\n    async with limiter:\n        # Rate-limited code block\n        pass\n</code></pre>"},{"location":"guides/basic-usage/#timeout-management","title":"Timeout Management","text":"<pre><code>from mtaio.resources import TimeoutManager\n\nasync def operation_with_timeout():\n    async with TimeoutManager(5.0) as tm:  # 5 seconds timeout\n        result = await tm.run(long_running_operation())\n\n        # Different timeout for specific operation\n        result2 = await tm.run(\n            another_operation(),\n            timeout=2.0  # 2 seconds timeout\n        )\n</code></pre>"},{"location":"guides/basic-usage/#error-handling","title":"Error Handling","text":"<p>mtaio provides a comprehensive exception hierarchy:</p> <pre><code>from mtaio.exceptions import (\n    MTAIOError,\n    TimeoutError,\n    CacheError,\n    RateLimitError\n)\n\nasync def safe_operation():\n    try:\n        await rate_limited_operation()\n    except RateLimitError:\n        # Handle rate limit exceeded\n        pass\n    except TimeoutError:\n        # Handle timeout\n        pass\n    except MTAIOError as e:\n        # Handle any mtaio-specific error\n        print(f\"Operation failed: {e}\")\n</code></pre>"},{"location":"guides/basic-usage/#type-safety","title":"Type Safety","text":"<p>mtaio is fully typed and supports type checking:</p> <pre><code>from mtaio.typing import AsyncFunc, CacheKey, CacheValue\n\nclass CustomCache(CacheValue):\n    def __init__(self, data: str):\n        self.data = data\n\n    async def serialize(self) -&gt; bytes:\n        return self.data.encode()\n\n    @classmethod\n    async def deserialize(cls, data: bytes) -&gt; 'CustomCache':\n        return cls(data.decode())\n\n# Type-safe function definition\nasync def process_data(func: AsyncFunc[str]) -&gt; str:\n    return await func()\n</code></pre>"},{"location":"guides/basic-usage/#common-patterns","title":"Common Patterns","text":""},{"location":"guides/basic-usage/#chain-operations","title":"Chain Operations","text":"<pre><code>from mtaio.data import Pipeline\nfrom mtaio.events import EventEmitter\n\n# Create processing pipeline\npipeline = Pipeline()\nemitter = EventEmitter()\n\n# Add processing stages\npipeline.add_stage(DataValidationStage())\npipeline.add_stage(DataTransformStage())\npipeline.add_stage(DataStorageStage())\n\n# Process data with events\nasync def process():\n    async with pipeline:\n        for item in items:\n            result = await pipeline.process(item)\n            await emitter.emit(\"item_processed\", result)\n</code></pre>"},{"location":"guides/basic-usage/#monitoring","title":"Monitoring","text":"<pre><code>from mtaio.monitoring import ResourceMonitor\n\n# Create monitor\nmonitor = ResourceMonitor(interval=1.0)\n\n@monitor.on_threshold_exceeded\nasync def handle_threshold(metric: str, value: float, threshold: float):\n    print(f\"Alert: {metric} exceeded threshold: {value} &gt; {threshold}\")\n\n# Start monitoring\nawait monitor.start()\nmonitor.set_threshold(\"cpu_usage\", 80.0)  # 80% CPU threshold\n</code></pre>"},{"location":"guides/basic-usage/#next-steps","title":"Next Steps","text":"<p>Once you're comfortable with these basics, you can:</p> <ol> <li>Explore Advanced Usage for more complex patterns</li> <li>Check the API Reference for detailed documentation</li> <li>See our examples repository for more examples</li> </ol>"},{"location":"guides/deployment/","title":"Deployment Guide","text":"<p>This guide covers best practices and considerations for deploying mtaio applications in production environments.</p>"},{"location":"guides/deployment/#environment-setup","title":"Environment Setup","text":""},{"location":"guides/deployment/#system-requirements","title":"System Requirements","text":"<ul> <li>Python 3.11 or later</li> <li>Operating System: Any platform that supports Python (Linux, macOS, Windows)</li> <li>Memory: Depends on workload, recommended minimum 512MB</li> <li>CPU: At least 1 core, recommended 2+ cores for concurrent operations</li> </ul>"},{"location":"guides/deployment/#environment-variables","title":"Environment Variables","text":"<p>Configure your application using environment variables:</p> <pre><code>import os\nfrom mtaio.core import TaskExecutor\nfrom mtaio.cache import TTLCache\n\n# Configuration from environment\nconfig = {\n    \"max_workers\": int(os.getenv(\"MTAIO_MAX_WORKERS\", \"4\")),\n    \"cache_ttl\": float(os.getenv(\"MTAIO_CACHE_TTL\", \"300\")),\n    \"cache_size\": int(os.getenv(\"MTAIO_CACHE_SIZE\", \"1000\")),\n    \"log_level\": os.getenv(\"MTAIO_LOG_LEVEL\", \"INFO\"),\n}\n\n# Initialize components with configuration\nexecutor = TaskExecutor(max_workers=config[\"max_workers\"])\ncache = TTLCache[str](\n    default_ttl=config[\"cache_ttl\"],\n    max_size=config[\"cache_size\"]\n)\n</code></pre>"},{"location":"guides/deployment/#production-configuration","title":"Production Configuration","text":""},{"location":"guides/deployment/#logging-setup","title":"Logging Setup","text":"<p>Configure logging for production:</p> <pre><code>import logging\nfrom mtaio.logging import AsyncFileHandler\n\nasync def setup_logging():\n    logger = logging.getLogger(\"mtaio\")\n    logger.setLevel(logging.INFO)\n\n    # File handler with rotation\n    handler = AsyncFileHandler(\n        filename=\"app.log\",\n        max_bytes=10_000_000,  # 10MB\n        backup_count=5\n    )\n\n    # Add formatting\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n</code></pre>"},{"location":"guides/deployment/#resource-management","title":"Resource Management","text":"<p>Configure resource limits for production:</p> <pre><code>from mtaio.resources import (\n    RateLimiter,\n    ConcurrencyLimiter,\n    TimeoutManager\n)\n\nasync def configure_resources():\n    # Rate limiting\n    rate_limiter = RateLimiter(\n        rate=float(os.getenv(\"MTAIO_RATE_LIMIT\", \"100\")),  # requests per second\n        burst=int(os.getenv(\"MTAIO_BURST_LIMIT\", \"200\"))\n    )\n\n    # Concurrency limiting\n    concurrency_limiter = ConcurrencyLimiter(\n        limit=int(os.getenv(\"MTAIO_CONCURRENCY_LIMIT\", \"50\"))\n    )\n\n    # Timeout management\n    timeout_manager = TimeoutManager(\n        default_timeout=float(os.getenv(\"MTAIO_DEFAULT_TIMEOUT\", \"30\"))\n    )\n\n    return rate_limiter, concurrency_limiter, timeout_manager\n</code></pre>"},{"location":"guides/deployment/#health-monitoring","title":"Health Monitoring","text":"<p>Implement health checks and monitoring:</p> <pre><code>from mtaio.monitoring import ResourceMonitor\nfrom mtaio.events import EventEmitter\n\nclass HealthMonitor:\n    def __init__(self):\n        self.monitor = ResourceMonitor()\n        self.emitter = EventEmitter()\n\n    async def start(self):\n        # Configure monitoring thresholds\n        self.monitor.set_threshold(\"cpu_usage\", 80.0)  # 80% CPU\n        self.monitor.set_threshold(\"memory_usage\", 90.0)  # 90% memory\n\n        @self.monitor.on_threshold_exceeded\n        async def handle_threshold(metric, value, threshold):\n            await self.emitter.emit(\"health_alert\", {\n                \"metric\": metric,\n                \"value\": value,\n                \"threshold\": threshold\n            })\n\n        await self.monitor.start()\n\n    async def get_health_status(self) -&gt; dict:\n        stats = await self.monitor.get_current_stats()\n        return {\n            \"status\": \"healthy\" if stats.cpu.usage_percent &lt; 80 else \"degraded\",\n            \"cpu_usage\": stats.cpu.usage_percent,\n            \"memory_usage\": stats.memory.percent,\n            \"uptime\": stats.uptime\n        }\n</code></pre>"},{"location":"guides/deployment/#error-handling","title":"Error Handling","text":"<p>Implement comprehensive error handling:</p> <pre><code>from mtaio.exceptions import MTAIOError\nfrom typing import Optional\n\nclass ErrorHandler:\n    def __init__(self):\n        self.logger = logging.getLogger(\"mtaio.errors\")\n\n    async def handle_error(\n        self,\n        error: Exception,\n        context: Optional[dict] = None\n    ) -&gt; None:\n        if isinstance(error, MTAIOError):\n            # Handle mtaio-specific errors\n            await self._handle_mtaio_error(error, context)\n        else:\n            # Handle unexpected errors\n            await self._handle_unexpected_error(error, context)\n\n    async def _handle_mtaio_error(\n        self,\n        error: MTAIOError,\n        context: Optional[dict]\n    ) -&gt; None:\n        self.logger.error(\n            \"mtaio error occurred\",\n            extra={\n                \"error_type\": type(error).__name__,\n                \"message\": str(error),\n                \"context\": context\n            }\n        )\n\n    async def _handle_unexpected_error(\n        self,\n        error: Exception,\n        context: Optional[dict]\n    ) -&gt; None:\n        self.logger.critical(\n            \"Unexpected error occurred\",\n            exc_info=error,\n            extra={\"context\": context}\n        )\n</code></pre>"},{"location":"guides/deployment/#deployment-example","title":"Deployment Example","text":"<p>Complete deployment setup example:</p> <pre><code>import asyncio\nfrom contextlib import AsyncExitStack\n\nasync def main():\n    # Initialize exit stack for resource cleanup\n    async with AsyncExitStack() as stack:\n        # Setup logging\n        await setup_logging()\n        logger = logging.getLogger(\"mtaio\")\n\n        try:\n            # Configure resources\n            rate_limiter, concurrency_limiter, timeout_manager = (\n                await configure_resources()\n            )\n\n            # Setup health monitoring\n            health_monitor = HealthMonitor()\n            await stack.enter_async_context(health_monitor)\n\n            # Setup error handling\n            error_handler = ErrorHandler()\n\n            # Initialize application components\n            app = Application(\n                rate_limiter=rate_limiter,\n                concurrency_limiter=concurrency_limiter,\n                timeout_manager=timeout_manager,\n                error_handler=error_handler\n            )\n\n            # Start application\n            await app.start()\n            logger.info(\"Application started successfully\")\n\n            # Wait for shutdown signal\n            await asyncio.Event().wait()\n\n        except Exception as e:\n            logger.critical(\"Failed to start application\", exc_info=e)\n            raise\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"guides/deployment/#deployment-checklist","title":"Deployment Checklist","text":"<p>Before deploying to production:</p> <ol> <li> <p>Configuration</p> <ul> <li>\u2713 Environment variables set correctly</li> <li>\u2713 Resource limits configured appropriately</li> <li>\u2713 Logging configured with proper levels and rotation</li> </ul> </li> <li> <p>Monitoring</p> <ul> <li>\u2713 Health checks implemented</li> <li>\u2713 Metrics collection configured</li> <li>\u2713 Alert thresholds set</li> </ul> </li> <li> <p>Error Handling</p> <ul> <li>\u2713 Comprehensive error handling in place</li> <li>\u2713 Error logging configured</li> <li>\u2713 Recovery procedures documented</li> </ul> </li> <li> <p>Performance</p> <ul> <li>\u2713 Cache settings optimized</li> <li>\u2713 Resource limits tuned</li> <li>\u2713 Concurrent operation limits set</li> </ul> </li> <li> <p>Security</p> <ul> <li>\u2713 Sensitive data properly secured</li> <li>\u2713 Access controls implemented</li> <li>\u2713 Network security configured</li> </ul> </li> </ol>"},{"location":"guides/deployment/#next-steps","title":"Next Steps","text":"<ul> <li>Monitor your deployment with the Monitoring Guide</li> <li>Review Troubleshooting for common issues</li> <li>Join our Community Discussions for support</li> </ul>"},{"location":"guides/getting-started/","title":"Getting Started with mtaio","text":"<p>This guide will help you get started with mtaio framework. We'll cover installation, basic concepts, and create a simple application.</p>"},{"location":"guides/getting-started/#installation","title":"Installation","text":"<p>First, install mtaio using pip:</p> <pre><code>pip install mtaio\n</code></pre>"},{"location":"guides/getting-started/#basic-concepts","title":"Basic Concepts","text":"<p>mtaio is built around several core concepts:</p> <ol> <li>Async-First: Everything is designed to work with Python's <code>asyncio</code></li> <li>Resource Management: Built-in tools for handling system resources efficiently</li> <li>Event-Driven: Event-based architecture for building reactive applications</li> <li>Type Safety: Full type hints support for better development experience</li> </ol>"},{"location":"guides/getting-started/#your-first-mtaio-application","title":"Your First mtaio Application","text":"<p>Let's create a simple application that demonstrates the basic features of mtaio.</p> <pre><code>import asyncio\nfrom mtaio.events import EventEmitter\nfrom mtaio.cache import TTLCache\nfrom mtaio.core import TaskExecutor\n\n# Create a data processor class\nclass DataProcessor:\n    def __init__(self):\n        self.emitter = EventEmitter()\n        self.cache = TTLCache[str](default_ttl=60.0)  # 60 seconds TTL\n        self.executor = TaskExecutor()\n\n    async def process_data(self, data: str) -&gt; str:\n        # Check cache first\n        cached_result = await self.cache.get(data)\n        if cached_result is not None:\n            await self.emitter.emit(\"cache_hit\", data)\n            return cached_result\n\n        # Process data\n        async with self.executor as executor:\n            result = await executor.run(self.compute_result, data)\n\n        # Cache the result\n        await self.cache.set(data, result)\n        await self.emitter.emit(\"process_complete\", result)\n        return result\n\n    async def compute_result(self, data: str) -&gt; str:\n        # Simulate some heavy computation\n        await asyncio.sleep(1)\n        return data.upper()\n\n# Create event handlers\nasync def handle_cache_hit(event):\n    print(f\"Cache hit for data: {event.data}\")\n\nasync def handle_process_complete(event):\n    print(f\"Processing completed with result: {event.data}\")\n\n# Main application\nasync def main():\n    # Initialize processor\n    processor = DataProcessor()\n\n    # Register event handlers\n    processor.emitter.on(\"cache_hit\")(handle_cache_hit)\n    processor.emitter.on(\"process_complete\")(handle_process_complete)\n\n    # Process some data\n    data_items = [\"hello\", \"world\", \"hello\", \"mtaio\"]\n    for data in data_items:\n        result = await processor.process_data(data)\n        print(f\"Result for '{data}': {result}\")\n\n# Run the application\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>This example demonstrates:</p> <ol> <li>Event handling using <code>EventEmitter</code></li> <li>Caching with <code>TTLCache</code></li> <li>Task execution with <code>TaskExecutor</code></li> <li>Proper async/await usage</li> </ol>"},{"location":"guides/getting-started/#next-steps","title":"Next Steps","text":"<p>Once you're comfortable with the basics, you can:</p> <ol> <li>Learn more about mtaio's core features</li> <li>Explore advanced usage patterns</li> <li>Check out the API reference</li> <li>See more examples in our repository</li> </ol>"},{"location":"guides/getting-started/#common-patterns","title":"Common Patterns","text":"<p>Here are some common patterns you'll use in mtaio applications:</p>"},{"location":"guides/getting-started/#resource-management","title":"Resource Management","text":"<pre><code>from mtaio.resources import RateLimiter\n\nlimiter = RateLimiter(10.0)  # 10 operations per second\n\n@limiter.limit\nasync def rate_limited_operation():\n    # Your code here\n    pass\n</code></pre>"},{"location":"guides/getting-started/#event-driven-architecture","title":"Event-Driven Architecture","text":"<pre><code>from mtaio.events import EventEmitter\n\nemitter = EventEmitter()\n\n@emitter.on(\"event_name\")\nasync def handle_event(event):\n    # Handle event\n    pass\n\n# Emit events\nawait emitter.emit(\"event_name\", data)\n</code></pre>"},{"location":"guides/getting-started/#caching-strategies","title":"Caching Strategies","text":"<pre><code>from mtaio.cache import TTLCache\nfrom mtaio.decorators import with_cache\n\ncache = TTLCache[str](default_ttl=300.0)  # 5 minutes\n\n@with_cache(cache)\nasync def cached_operation(key: str) -&gt; str:\n    # Expensive operation\n    return result\n</code></pre>"},{"location":"guides/getting-started/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Type Hints: Always use type hints for better code quality and IDE support:    <pre><code>from mtaio.typing import AsyncFunc\n\nasync def process_data(data: str) -&gt; str:\n    # Processing\n    return result\n</code></pre></p> </li> <li> <p>Resource Cleanup: Use async context managers for proper resource cleanup:    <pre><code>async with TaskExecutor() as executor:\n    # Work with executor\n    pass  # Resources are automatically cleaned up\n</code></pre></p> </li> <li> <p>Error Handling: Use mtaio's exception hierarchy for proper error handling:    <pre><code>from mtaio.exceptions import MTAIOError\n\ntry:\n    await operation()\nexcept MTAIOError as e:\n    # Handle mtaio-specific errors\n    pass\n</code></pre></p> </li> <li> <p>Configuration: Keep configuration separate and use environment variables:    <pre><code>import os\nfrom mtaio.cache import TTLCache\n\ncache = TTLCache[str](\n    default_ttl=float(os.getenv('CACHE_TTL', '300')),\n    max_size=int(os.getenv('CACHE_SIZE', '1000'))\n)\n</code></pre></p> </li> </ol>"},{"location":"guides/getting-started/#getting-help","title":"Getting Help","text":"<p>If you encounter any issues:</p> <ol> <li>Check the Troubleshooting guide</li> <li>Search for similar issues in our GitHub repository</li> <li>Create a new issue if your problem hasn't been addressed</li> </ol> <p>Next, proceed to Basic Usage for more detailed information about mtaio's features.</p>"},{"location":"guides/installation/","title":"Installation Guide","text":"<p>This guide covers how to install mtaio in your Python environment.</p>"},{"location":"guides/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.11 or later</li> <li>No additional dependencies required</li> </ul>"},{"location":"guides/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"guides/installation/#using-pip","title":"Using pip","text":"<p>The simplest way to install mtaio is using pip:</p> <pre><code>pip install mtaio\n</code></pre>"},{"location":"guides/installation/#using-poetry","title":"Using Poetry","text":"<p>If you're using Poetry for your project:</p> <pre><code>poetry add mtaio\n</code></pre>"},{"location":"guides/installation/#using-pipenv","title":"Using pipenv","text":"<p>For Pipenv users:</p> <pre><code>pipenv install mtaio\n</code></pre>"},{"location":"guides/installation/#verifying-installation","title":"Verifying Installation","text":"<p>You can verify your installation by running Python and importing mtaio:</p> <pre><code>import mtaio\nprint(mtaio.__version__)  # Should display the current version\n</code></pre>"},{"location":"guides/installation/#version-check","title":"Version Check","text":"<p>mtaio requires Python 3.11 or later. You can check your Python version using:</p> <pre><code>python --version\n</code></pre> <p>If you're using an older version of Python, you'll need to upgrade before installing mtaio.</p>"},{"location":"guides/installation/#features","title":"Features","text":"<p>mtaio comes with all modules included by default:</p> <ul> <li>Core functionality (<code>mtaio.core</code>)</li> <li>Caching system (<code>mtaio.cache</code>)</li> <li>Event handling (<code>mtaio.events</code>)</li> <li>Data processing (<code>mtaio.data</code>)</li> <li>Protocol implementations (<code>mtaio.protocols</code>)</li> <li>Resource management (<code>mtaio.resources</code>)</li> <li>Monitoring tools (<code>mtaio.monitoring</code>)</li> <li>Logging utilities (<code>mtaio.logging</code>)</li> <li>Type definitions (<code>mtaio.typing</code>)</li> <li>Decorator utilities (<code>mtaio.decorators</code>)</li> <li>Exception handling (<code>mtaio.exceptions</code>)</li> </ul> <p>No additional packages need to be installed as all functionality is included in the base package.</p>"},{"location":"guides/installation/#development-installation","title":"Development Installation","text":"<p>For development purposes, you can install mtaio directly from the source:</p> <pre><code>git clone https://github.com/t3tra-dev/mtaio.git\ncd mtaio\npip install -e .\n</code></pre>"},{"location":"guides/installation/#uninstallation","title":"Uninstallation","text":"<p>If you need to uninstall mtaio:</p> <pre><code>pip uninstall mtaio\n</code></pre>"},{"location":"guides/installation/#next-steps","title":"Next Steps","text":"<p>After installation, you can:</p> <ol> <li>Read the Getting Started Guide for an introduction to mtaio</li> <li>Check out Basic Usage for common usage patterns</li> <li>Explore the API Reference for detailed documentation</li> </ol>"},{"location":"guides/installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any installation issues:</p> <ol> <li>Ensure you're using Python 3.11 or later</li> <li>Check that pip is up to date: <code>pip install --upgrade pip</code></li> <li>If installing from source, ensure you have Git installed</li> </ol> <p>If problems persist, please check our Troubleshooting Guide or open an issue on GitHub.</p>"},{"location":"guides/troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide helps you diagnose and resolve common issues with mtaio applications.</p>"},{"location":"guides/troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"guides/troubleshooting/#resource-management","title":"Resource Management","text":""},{"location":"guides/troubleshooting/#high-memory-usage","title":"High Memory Usage","text":"<p>Problem: Application memory usage grows continuously.</p> <p>Possible Causes:</p> <ul> <li>Unclosed resources</li> <li>Cache size not properly configured</li> <li>Memory leaks in event handlers</li> </ul> <p>Solutions:</p> <pre><code>from mtaio.resources import ResourceManager\nfrom mtaio.cache import TTLCache\n\n# Proper resource cleanup\nasync with ResourceManager() as manager:\n    # Resources are automatically cleaned up\n    pass\n\n# Configure cache with appropriate size\ncache = TTLCache[str](\n    max_size=1000,  # Limit cache size\n    default_ttl=300.0  # Clear items after 5 minutes\n)\n\n# Clean up event handlers\nemitter = EventEmitter()\n@emitter.on(\"event\")\nasync def handler(event):\n    # Process event\n    pass\n\n# Remove handler when no longer needed\nemitter.remove_listener(\"event\", handler)\n</code></pre>"},{"location":"guides/troubleshooting/#task-execution-timeouts","title":"Task Execution Timeouts","text":"<p>Problem: Tasks frequently timeout or take too long to execute.</p> <p>Solutions:</p> <pre><code>from mtaio.core import TaskExecutor\nfrom mtaio.resources import TimeoutManager\n\n# Configure appropriate timeouts\nasync with TimeoutManager(default_timeout=30.0) as tm:\n    async with TaskExecutor() as executor:\n        # Set concurrency limits\n        result = await executor.gather(\n            *tasks,\n            limit=5  # Limit concurrent tasks\n        )\n</code></pre>"},{"location":"guides/troubleshooting/#event-handling","title":"Event Handling","text":""},{"location":"guides/troubleshooting/#event-handler-memory-leaks","title":"Event Handler Memory Leaks","text":"<p>Problem: Memory usage increases with event handler registration.</p> <p>Solution:</p> <pre><code>from mtaio.events import EventEmitter\nimport weakref\n\nclass EventHandlers:\n    def __init__(self):\n        self._handlers = weakref.WeakSet()\n        self.emitter = EventEmitter()\n\n    def register(self, handler):\n        self._handlers.add(handler)\n        self.emitter.on(\"event\")(handler)\n\n    def cleanup(self):\n        self._handlers.clear()\n</code></pre>"},{"location":"guides/troubleshooting/#missing-event-handlers","title":"Missing Event Handlers","text":"<p>Problem: Events are not being processed.</p> <p>Solution:</p> <pre><code>from mtaio.events import EventEmitter\n\nasync def setup_handlers():\n    emitter = EventEmitter()\n\n    # Add error handling\n    @emitter.on(\"error\")\n    async def handle_error(event):\n        print(f\"Error occurred: {event.data}\")\n\n    # Verify handler registration\n    if emitter.listener_count(\"error\") == 0:\n        raise RuntimeError(\"Error handler not registered\")\n</code></pre>"},{"location":"guides/troubleshooting/#cache-issues","title":"Cache Issues","text":""},{"location":"guides/troubleshooting/#cache-inconsistency","title":"Cache Inconsistency","text":"<p>Problem: Cache data becomes inconsistent across different parts of the application.</p> <p>Solution:</p> <pre><code>from mtaio.cache import DistributedCache\nfrom mtaio.events import EventEmitter\n\nasync def setup_cache():\n    cache = DistributedCache[str]([\n        (\"localhost\", 5000),\n        (\"localhost\", 5001)\n    ])\n    emitter = EventEmitter()\n\n    @emitter.on(\"data_changed\")\n    async def invalidate_cache(event):\n        affected_keys = event.data.get(\"keys\", [])\n        for key in affected_keys:\n            await cache.delete(key)\n</code></pre>"},{"location":"guides/troubleshooting/#cache-performance-issues","title":"Cache Performance Issues","text":"<p>Problem: Cache operations are slow or inefficient.</p> <p>Solution:</p> <pre><code>from mtaio.cache import TTLCache\nfrom mtaio.monitoring import ResourceMonitor\n\nasync def optimize_cache():\n    # Monitor cache performance\n    monitor = ResourceMonitor()\n    cache = TTLCache[str](\n        default_ttl=60.0,  # Short TTL for frequently changing data\n        max_size=1000\n    )\n\n    # Add cache metrics\n    @monitor.on_metric(\"cache_hits\")\n    async def track_cache_hits(value):\n        if value &lt; 0.5:  # Less than 50% hit rate\n            print(\"Cache hit rate is low, consider adjusting TTL\")\n</code></pre>"},{"location":"guides/troubleshooting/#debugging-tools","title":"Debugging Tools","text":""},{"location":"guides/troubleshooting/#logging-setup","title":"Logging Setup","text":"<p>Configure detailed logging for debugging:</p> <pre><code>import logging\nfrom mtaio.logging import AsyncFileHandler\n\nasync def setup_debug_logging():\n    logger = logging.getLogger(\"mtaio\")\n    logger.setLevel(logging.DEBUG)\n\n    handler = AsyncFileHandler(\"debug.log\")\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n</code></pre>"},{"location":"guides/troubleshooting/#performance-profiling","title":"Performance Profiling","text":"<p>Profile your application to identify bottlenecks:</p> <pre><code>from mtaio.monitoring import Profiler\n\nasync def profile_application():\n    profiler = Profiler()\n\n    @profiler.trace\n    async def monitored_function():\n        # Function to monitor\n        pass\n\n    # Get performance metrics\n    profile = await profiler.get_profile()\n    print(f\"Execution time: {profile.total_time:.2f}s\")\n    print(f\"Memory usage: {profile.memory_usage} MB\")\n</code></pre>"},{"location":"guides/troubleshooting/#error-messages","title":"Error Messages","text":""},{"location":"guides/troubleshooting/#common-error-messages-and-solutions","title":"Common Error Messages and Solutions","text":"<ol> <li> <p><code>MTAIOError: Resource limit exceeded</code></p> <ul> <li>Cause: Too many concurrent operations</li> <li>Solution: Adjust resource limits or add rate limiting</li> </ul> </li> <li> <p><code>TimeoutError: Operation timed out</code></p> <ul> <li>Cause: Operation took too long to complete</li> <li>Solution: Increase timeout or optimize operation</li> </ul> </li> <li> <p><code>CacheError: Cache connection failed</code></p> <ul> <li>Cause: Cannot connect to cache server</li> <li>Solution: Check cache server status and configuration</li> </ul> </li> <li> <p><code>EventError: Event handler failed</code></p> <ul> <li>Cause: Exception in event handler</li> <li>Solution: Add error handling to event handlers</li> </ul> </li> </ol>"},{"location":"guides/troubleshooting/#best-practices","title":"Best Practices","text":""},{"location":"guides/troubleshooting/#error-handling","title":"Error Handling","text":"<p>Implement comprehensive error handling:</p> <pre><code>from mtaio.exceptions import MTAIOError\n\nasync def handle_errors():\n    try:\n        # Your code here\n        pass\n    except MTAIOError as e:\n        # Handle mtaio-specific errors\n        logger.error(f\"mtaio error: {e}\")\n    except Exception as e:\n        # Handle unexpected errors\n        logger.exception(\"Unexpected error occurred\")\n</code></pre>"},{"location":"guides/troubleshooting/#resource-cleanup","title":"Resource Cleanup","text":"<p>Ensure proper resource cleanup:</p> <pre><code>from contextlib import AsyncExitStack\n\nasync def cleanup_resources():\n    async with AsyncExitStack() as stack:\n        # Add resources to stack\n        executor = await stack.enter_async_context(TaskExecutor())\n        cache = await stack.enter_async_context(TTLCache[str]())\n\n        # Resources are automatically cleaned up\n</code></pre>"},{"location":"guides/troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you continue to experience issues:</p> <ol> <li>Check the API documentation for correct usage</li> <li>Search existing GitHub issues</li> <li>Ask in Community Discussions</li> </ol> <p>When reporting issues, include:</p> <ul> <li>Python version</li> <li>mtaio version</li> <li>Minimal reproducible example</li> <li>Error messages and stack traces</li> <li>Relevant configuration settings</li> </ul>"},{"location":"ja/","title":"mtaio\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8","text":"<p>mtaio(Multi-threaded Async I/O)\u306f\u52b9\u7387\u7684\u306a\u975e\u540c\u671f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u5305\u62ec\u7684\u306aPython\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\u975e\u540c\u671fI/O\u64cd\u4f5c\u3001\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3001\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306a\u3069\u3092\u6271\u3046\u305f\u3081\u306e\u5805\u7262\u306a\u30c4\u30fc\u30eb\u3068\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/#_1","title":"\u4e3b\u306a\u6a5f\u80fd","text":"<ul> <li>\u975e\u540c\u671f\u512a\u5148\u8a2d\u8a08: Python\u306e<code>asyncio</code>\u3092\u57fa\u76e4\u306b\u6700\u9069\u306a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u5b9f\u73fe</li> <li>\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406: \u30ec\u30fc\u30c8\u5236\u9650\u3068\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u5236\u5fa1\u3092\u5099\u3048\u305f\u52b9\u7387\u7684\u306a\u30b7\u30b9\u30c6\u30e0\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406</li> <li>\u30a4\u30d9\u30f3\u30c8\u51e6\u7406: \u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u578b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u5805\u7262\u306a\u30a4\u30d9\u30f3\u30c8\u30a8\u30df\u30c3\u30bf\u30fc\u3068\u30cf\u30f3\u30c9\u30e9\u30fc\u30b7\u30b9\u30c6\u30e0</li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u30b7\u30b9\u30c6\u30e0: TTL\u3068\u5206\u6563\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u67d4\u8edf\u306a\u30ad\u30e3\u30c3\u30b7\u30e5\u6a5f\u80fd</li> <li>\u30d7\u30ed\u30c8\u30b3\u30eb\u30b5\u30dd\u30fc\u30c8: ASGI\u3001MQTT\u3001\u30e1\u30fc\u30eb\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u7d44\u307f\u8fbc\u307f\u30b5\u30dd\u30fc\u30c8</li> <li>\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3068\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0: \u30b7\u30b9\u30c6\u30e0\u76e3\u8996\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u306e\u305f\u3081\u306e\u5305\u62ec\u7684\u306a\u30c4\u30fc\u30eb</li> <li>\u578b\u5b89\u5168\u6027: mypy\u3068\u306e\u4e92\u63db\u6027\u3092\u6301\u3064\u5b8c\u5168\u306a\u578b\u30d2\u30f3\u30c8\u30b5\u30dd\u30fc\u30c8</li> <li>\u62e1\u5f35\u53ef\u80fd\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3: \u7279\u5b9a\u306e\u30cb\u30fc\u30ba\u306b\u5408\u308f\u305b\u3066\u7c21\u5358\u306b\u62e1\u5f35\u30fb\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u53ef\u80fd</li> </ul>"},{"location":"ja/#_2","title":"\u4f7f\u7528\u4f8b","text":"<pre><code>from mtaio.core import TaskExecutor\nfrom mtaio.cache import TTLCache\nfrom mtaio.events import EventEmitter\n\n# \u4e26\u884c\u6027\u5236\u5fa1\u4ed8\u304d\u306e\u30bf\u30b9\u30af\u5b9f\u884c\nasync with TaskExecutor() as executor:\n    results = await executor.gather(\n        task1(), \n        task2(),\n        limit=5  # \u6700\u5927\u540c\u6642\u5b9f\u884c\u30bf\u30b9\u30af\u6570\n    )\n\n# TTL\u4ed8\u304d\u30ad\u30e3\u30c3\u30b7\u30e5\ncache = TTLCache[str](\n    default_ttl=300.0,  # 5\u5206\n    max_size=1000\n)\nawait cache.set(\"key\", \"value\")\nvalue = await cache.get(\"key\")\n\n# \u30a4\u30d9\u30f3\u30c8\u51e6\u7406\nemitter = EventEmitter()\n\n@emitter.on(\"user_login\")\nasync def handle_login(event):\n    user = event.data\n    print(f\"\u30e6\u30fc\u30b6\u30fc {user.name} \u304c\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3057\u305f\")\n\nawait emitter.emit(\"user_login\", user_data)\n</code></pre>"},{"location":"ja/#_3","title":"\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u69cb\u6210","text":"<p>\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u4ee5\u4e0b\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059:</p> <ul> <li>\u306f\u3058\u3081\u306b: mtaio\u306e\u7c21\u5358\u306a\u7d39\u4ecb</li> <li>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb: \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u624b\u9806\u3068\u8981\u4ef6</li> <li>\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9: \u57fa\u672c\u7684\u306a\u6982\u5ff5\u3068\u4f7f\u7528\u30d1\u30bf\u30fc\u30f3</li> <li>\u9ad8\u5ea6\u306a\u4f7f\u3044\u65b9: \u8a73\u7d30\u306a\u30ac\u30a4\u30c9\u3068\u9ad8\u5ea6\u306a\u6a5f\u80fd</li> <li>API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9: \u5b8c\u5168\u306aAPI\u4ed5\u69d8</li> <li>\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8: \u672c\u756a\u74b0\u5883\u3078\u306e\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u30ac\u30a4\u30c9\u30e9\u30a4\u30f3</li> <li>\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0: \u4e00\u822c\u7684\u306a\u554f\u984c\u3068\u89e3\u6c7a\u65b9\u6cd5</li> </ul>"},{"location":"ja/#_4","title":"\u30d8\u30eb\u30d7\u306e\u5165\u624b","text":"<ul> <li>GitHub Issues: \u30d0\u30b0\u5831\u544a\u3084\u6a5f\u80fd\u30ea\u30af\u30a8\u30b9\u30c8\u306fGitHub\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u53d7\u3051\u4ed8\u3051\u3066\u3044\u307e\u3059</li> <li>\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8: \u4e0a\u8a18\u306e\u5305\u62ec\u7684\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u30bb\u30af\u30b7\u30e7\u30f3\u3092\u3054\u89a7\u304f\u3060\u3055\u3044</li> <li>\u30b5\u30f3\u30d7\u30eb: \u30ea\u30dd\u30b8\u30c8\u30ea\u306eexamples\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u3054\u78ba\u8a8d\u304f\u3060\u3055\u3044</li> </ul>"},{"location":"ja/#_5","title":"\u52d5\u4f5c\u8981\u4ef6","text":"<ul> <li>Python 3.11\u4ee5\u964d</li> <li>OS: \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u975e\u4f9d\u5b58</li> </ul>"},{"location":"ja/#_6","title":"\u30e9\u30a4\u30bb\u30f3\u30b9","text":"<p>mtaio\u306fMIT\u30e9\u30a4\u30bb\u30f3\u30b9\u306e\u4e0b\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8a73\u7d30\u306fLICENSE\u30d5\u30a1\u30a4\u30eb\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/api/","title":"API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<p>mtaio\u306f\u975e\u540c\u671f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u5305\u62ec\u7684\u306aAPI\u30bb\u30c3\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u3053\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u306f\u3001\u3059\u3079\u3066\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u305d\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306b\u3064\u3044\u3066\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/#_1","title":"\u30b3\u30a2\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8","text":"<ul> <li>\u30b3\u30a2: \u30bf\u30b9\u30af\u5b9f\u884c\u3068\u30ad\u30e5\u30fc\u3092\u542b\u3080\u975e\u540c\u671f\u64cd\u4f5c\u306e\u57fa\u672c\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8</li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5: \u30a4\u30f3\u30e1\u30e2\u30ea\u304a\u3088\u3073\u5206\u6563\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u4ed5\u7d44\u307f</li> <li>\u30a4\u30d9\u30f3\u30c8: \u30a4\u30d9\u30f3\u30c8\u767a\u884c\u3068\u51e6\u7406\u30b7\u30b9\u30c6\u30e0</li> <li>\u30c7\u30fc\u30bf: \u30c7\u30fc\u30bf\u51e6\u7406\u3068\u5909\u63db\u30c4\u30fc\u30eb</li> <li>\u30ea\u30bd\u30fc\u30b9: \u30b7\u30b9\u30c6\u30e0\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3</li> </ul>"},{"location":"ja/api/#_2","title":"\u30d7\u30ed\u30c8\u30b3\u30eb\u30b5\u30dd\u30fc\u30c8","text":"<ul> <li>\u30d7\u30ed\u30c8\u30b3\u30eb: \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d7\u30ed\u30c8\u30b3\u30eb\u5b9f\u88c5\uff08ASGI\u3001MQTT\u3001\u30e1\u30fc\u30eb\uff09</li> </ul>"},{"location":"ja/api/#_3","title":"\u958b\u767a\u30c4\u30fc\u30eb","text":"<ul> <li>\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0: \u30b7\u30b9\u30c6\u30e0\u76e3\u8996\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0</li> <li>\u30ed\u30ae\u30f3\u30b0: \u975e\u540c\u671f\u30ed\u30ae\u30f3\u30b0\u6a5f\u80fd</li> <li>\u6700\u9069\u5316: \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3</li> <li>\u4f8b\u5916: \u30a8\u30e9\u30fc\u51e6\u7406\u3068\u4f8b\u5916\u968e\u5c64</li> </ul>"},{"location":"ja/api/#_4","title":"\u578b\u30b7\u30b9\u30c6\u30e0","text":"<ul> <li>\u578b\u5b9a\u7fa9: \u578b\u5b9a\u7fa9\u3068\u30d7\u30ed\u30c8\u30b3\u30eb</li> <li>\u30c7\u30b3\u30ec\u30fc\u30bf: \u975e\u540c\u671f\u95a2\u6570\u3092\u62e1\u5f35\u3059\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30c7\u30b3\u30ec\u30fc\u30bf</li> </ul>"},{"location":"ja/api/#_5","title":"\u30e2\u30b8\u30e5\u30fc\u30eb\u69cb\u6210","text":"<p>API\u306f\u975e\u540c\u671f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u7279\u5b9a\u306e\u5074\u9762\u306b\u7126\u70b9\u3092\u5f53\u3066\u305f\u8ad6\u7406\u7684\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059:</p> <pre><code>mtaio/\n\u251c\u2500\u2500 core/        # \u30b3\u30a2\u306e\u975e\u540c\u671f\u6a5f\u80fd\n\u251c\u2500\u2500 cache/       # \u30ad\u30e3\u30c3\u30b7\u30e5\u5b9f\u88c5\n\u251c\u2500\u2500 events/      # \u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u30b7\u30b9\u30c6\u30e0\n\u251c\u2500\u2500 data/        # \u30c7\u30fc\u30bf\u51e6\u7406\u30c4\u30fc\u30eb\n\u251c\u2500\u2500 protocols/   # \u30d7\u30ed\u30c8\u30b3\u30eb\u5b9f\u88c5\n\u251c\u2500\u2500 resources/   # \u30ea\u30bd\u30fc\u30b9\u7ba1\u7406\n\u251c\u2500\u2500 monitoring/  # \u30b7\u30b9\u30c6\u30e0\u76e3\u8996\n\u251c\u2500\u2500 logging/     # \u30ed\u30ae\u30f3\u30b0\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\n\u251c\u2500\u2500 typing/      # \u578b\u5b9a\u7fa9\n\u2514\u2500\u2500 decorators/  # \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30c7\u30b3\u30ec\u30fc\u30bf\n</code></pre>"},{"location":"ja/api/#api_1","title":"API\u306e\u4f7f\u7528","text":"<p>\u5404\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u4ee5\u4e0b\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059:</p> <ul> <li>\u8a73\u7d30\u306a\u30af\u30e9\u30b9\u3068\u95a2\u6570\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9</li> <li>\u4f7f\u7528\u4f8b</li> <li>\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9</li> <li>\u4e00\u822c\u7684\u306a\u30d1\u30bf\u30fc\u30f3</li> <li>\u30a8\u30e9\u30fc\u51e6\u7406</li> <li>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u8003\u616e\u4e8b\u9805</li> </ul> <p>\u8a73\u7d30\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8868\u793a\u3059\u308b\u306b\u306f\u3001\u30ca\u30d3\u30b2\u30fc\u30b7\u30e7\u30f3\u30e1\u30cb\u30e5\u30fc\u304b\u3089\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/api/#api_2","title":"API\u306e\u5b89\u5b9a\u6027","text":"<p>mtaio\u306f\u30bb\u30de\u30f3\u30c6\u30a3\u30c3\u30af\u30d0\u30fc\u30b8\u30e7\u30cb\u30f3\u30b0\uff08SemVer\uff09\u306b\u5f93\u3063\u3066\u3044\u307e\u3059:</p> <ul> <li>\u30e1\u30b8\u30e3\u30fc\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u5909\u66f4\uff08x.0.0\uff09\u306b\u306f\u7834\u58ca\u7684\u306aAPI\u5909\u66f4\u304c\u542b\u307e\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059</li> <li>\u30de\u30a4\u30ca\u30fc\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u5909\u66f4\uff080.x.0\uff09\u306f\u5f8c\u65b9\u4e92\u63db\u6027\u3092\u4fdd\u3061\u306a\u304c\u3089\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u307e\u3059</li> <li>\u30d1\u30c3\u30c1\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u5909\u66f4\uff080.0.x\uff09\u306b\u306f\u5f8c\u65b9\u4e92\u63db\u6027\u306e\u3042\u308b\u30d0\u30b0\u4fee\u6b63\u304c\u542b\u307e\u308c\u307e\u3059</li> </ul> <p>\u7834\u58ca\u7684\u306a\u5909\u66f4\u306f\u3059\u3079\u3066\u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8\u306b\u660e\u78ba\u306b\u8a18\u8f09\u3055\u308c\u307e\u3059\u3002</p>"},{"location":"ja/api/cache/","title":"\u30ad\u30e3\u30c3\u30b7\u30e5API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<p><code>mtaio.cache</code>\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u30c7\u30fc\u30bf\u3092\u975e\u540c\u671f\u3067\u4fdd\u5b58\u304a\u3088\u3073\u53d6\u5f97\u3059\u308b\u305f\u3081\u306e\u69d8\u3005\u306a\u30ad\u30e3\u30c3\u30b7\u30e5\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/cache/#_1","title":"\u6982\u8981","text":"<p>\u30ad\u30e3\u30c3\u30b7\u30e5\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u306f\u4ee5\u4e0b\u306e\u4e3b\u8981\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059:</p> <ul> <li><code>TTLCache</code>: \u6709\u52b9\u671f\u9650(Time-to-live)\u4ed8\u304d\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u5b9f\u88c5</li> <li><code>DistributedCache</code>: \u8907\u6570\u30ce\u30fc\u30c9\u306b\u307e\u305f\u304c\u308b\u5206\u6563\u30ad\u30e3\u30c3\u30b7\u30e5</li> <li>\u5404\u7a2e\u30ad\u30e3\u30c3\u30b7\u30e5\u30dd\u30ea\u30b7\u30fc(LRU, LFU, FIFO)</li> </ul>"},{"location":"ja/api/cache/#ttlcache","title":"TTLCache","text":"<p><code>TTLCache[T]</code>\u306f\u3001\u6709\u52b9\u671f\u9650\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u6c4e\u7528\u30ad\u30e3\u30c3\u30b7\u30e5\u5b9f\u88c5\u3067\u3059\u3002</p>"},{"location":"ja/api/cache/#_2","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.cache import TTLCache\n\n# \u30ad\u30e3\u30c3\u30b7\u30e5\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u4f5c\u6210\ncache = TTLCache[str](\n    default_ttl=300.0,  # 5\u5206\u9593\u306eTTL\n    max_size=1000\n)\n\n# \u5024\u306e\u8a2d\u5b9a\nawait cache.set(\"key\", \"value\")\n\n# \u5024\u306e\u53d6\u5f97\nvalue = await cache.get(\"key\")\n</code></pre>"},{"location":"ja/api/cache/#_3","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class TTLCache[T]:\n    def __init__(\n        self,\n        default_ttl: float = 300.0,\n        max_size: Optional[int] = None,\n        cleanup_interval: float = 60.0,\n        eviction_policy: EvictionPolicy = EvictionPolicy.LRU,\n        on_evicted: Optional[Callable[[str, T], Awaitable[None]]] = None,\n    ):\n        \"\"\"\n        TTL\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n        Args:\n            default_ttl (float): \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6709\u52b9\u671f\u9650\uff08\u79d2\uff09\n            max_size (Optional[int]): \u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u6700\u5927\u30b5\u30a4\u30ba\uff08None\u306f\u7121\u5236\u9650\uff09\n            cleanup_interval (float): \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u9593\u9694\uff08\u79d2\uff09\n            eviction_policy (EvictionPolicy): \u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u9000\u907f\u30dd\u30ea\u30b7\u30fc\n            on_evicted (Optional[Callable[[str, T], Awaitable[None]]]): \u30a2\u30a4\u30c6\u30e0\u9000\u907f\u6642\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\n        \"\"\"\n</code></pre>"},{"location":"ja/api/cache/#_4","title":"\u30e1\u30bd\u30c3\u30c9","text":""},{"location":"ja/api/cache/#async-def-setkey-str-value-t-ttl-optionalfloat-none-none","title":"<code>async def set(key: str, value: T, ttl: Optional[float] = None) -&gt; None</code>","text":"<p>\u30ad\u30e3\u30c3\u30b7\u30e5\u306b\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059(\u30aa\u30d7\u30b7\u30e7\u30f3\u3067TTL\u3092\u6307\u5b9a\u53ef\u80fd)\u3002</p> <pre><code># \u30c7\u30d5\u30a9\u30eb\u30c8\u306eTTL\u3067\u8a2d\u5b9a\nawait cache.set(\"key\", \"value\")\n\n# \u30ab\u30b9\u30bf\u30e0TTL\u3067\u8a2d\u5b9a\nawait cache.set(\"key\", \"value\", ttl=60.0)  # 1\u5206\u9593\u306eTTL\n</code></pre>"},{"location":"ja/api/cache/#async-def-getkey-str-default-optionalt-none-optionalt","title":"<code>async def get(key: str, default: Optional[T] = None) -&gt; Optional[T]</code>","text":"<p>\u30ad\u30e3\u30c3\u30b7\u30e5\u304b\u3089\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> <pre><code># \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u4ed8\u304d\u3067\u53d6\u5f97\nvalue = await cache.get(\"key\", default=\"\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\")\n\n# \u5024\u306e\u5b58\u5728\u78ba\u8a8d\nif (value := await cache.get(\"key\")) is not None:\n    print(f\"\u5024\u304c\u898b\u3064\u304b\u308a\u307e\u3057\u305f: {value}\")\n</code></pre>"},{"location":"ja/api/cache/#async-def-deletekey-str-none","title":"<code>async def delete(key: str) -&gt; None</code>","text":"<p>\u30ad\u30e3\u30c3\u30b7\u30e5\u304b\u3089\u5024\u3092\u524a\u9664\u3057\u307e\u3059\u3002</p> <pre><code>await cache.delete(\"key\")\n</code></pre>"},{"location":"ja/api/cache/#async-def-clear-none","title":"<code>async def clear() -&gt; None</code>","text":"<p>\u3059\u3079\u3066\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30a8\u30f3\u30c8\u30ea\u3092\u30af\u30ea\u30a2\u3057\u307e\u3059\u3002</p> <pre><code>await cache.clear()\n</code></pre>"},{"location":"ja/api/cache/#async-def-touchkey-str-ttl-optionalfloat-none-bool","title":"<code>async def touch(key: str, ttl: Optional[float] = None) -&gt; bool</code>","text":"<p>\u30a2\u30a4\u30c6\u30e0\u306eTTL\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002</p> <pre><code># TTL\u3092\u5ef6\u9577\nif await cache.touch(\"key\", ttl=300.0):\n    print(\"TTL\u304c\u66f4\u65b0\u3055\u308c\u307e\u3057\u305f\")\n</code></pre>"},{"location":"ja/api/cache/#_5","title":"\u30d0\u30c3\u30c1\u64cd\u4f5c","text":"<pre><code># \u8907\u6570\u306e\u5024\u3092\u8a2d\u5b9a\nawait cache.set_many({\n    \"key1\": \"value1\",\n    \"key2\": \"value2\"\n})\n\n# \u8907\u6570\u306e\u5024\u3092\u53d6\u5f97\nvalues = await cache.get_many([\"key1\", \"key2\"])\n\n# \u8907\u6570\u306e\u5024\u3092\u524a\u9664\nawait cache.delete_many([\"key1\", \"key2\"])\n</code></pre>"},{"location":"ja/api/cache/#distributedcache","title":"DistributedCache","text":"<p><code>DistributedCache[T]</code>\u306f\u3001\u8907\u6570\u306e\u30ce\u30fc\u30c9\u306b\u307e\u305f\u304c\u308b\u5206\u6563\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/cache/#_6","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.cache import DistributedCache\n\n# \u5206\u6563\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u4f5c\u6210\ncache = DistributedCache[str](\n    nodes=[\n        (\"localhost\", 5000),\n        (\"localhost\", 5001)\n    ],\n    replication_factor=2,  # \u30ec\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u4fc2\u6570\n    read_quorum=1         # \u8aad\u307f\u53d6\u308a\u30af\u30a9\u30fc\u30e9\u30e0\n)\n\nasync with cache:\n    await cache.set(\"key\", \"value\")\n    value = await cache.get(\"key\")\n</code></pre>"},{"location":"ja/api/cache/#_7","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class DistributedCache[T]:\n    def __init__(\n        self,\n        nodes: List[Tuple[str, int]],\n        replication_factor: int = 2,\n        read_quorum: int = 1,\n    ):\n        \"\"\"\n        \u5206\u6563\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n        Args:\n            nodes (List[Tuple[str, int]]): \u30ad\u30e3\u30c3\u30b7\u30e5\u30ce\u30fc\u30c9\u306e\u30a2\u30c9\u30ec\u30b9\u30ea\u30b9\u30c8\n            replication_factor (int): \u30ec\u30d7\u30ea\u30ab\u306e\u6570\n            read_quorum (int): \u8aad\u307f\u53d6\u308a\u30b3\u30f3\u30bb\u30f3\u30b5\u30b9\u306b\u5fc5\u8981\u306a\u30ce\u30fc\u30c9\u6570\n        \"\"\"\n</code></pre>"},{"location":"ja/api/cache/#_8","title":"\u30e1\u30bd\u30c3\u30c9","text":"<p>TTLCache\u3068\u540c\u69d8\u306e\u6a5f\u80fd\u306b\u52a0\u3048\u3066\u3001\u5206\u6563\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059:</p>"},{"location":"ja/api/cache/#async-def-setkey-str-value-t-ttl-optionalfloat-none-none_1","title":"<code>async def set(key: str, value: T, ttl: Optional[float] = None) -&gt; None</code>","text":"<p>\u5206\u6563\u30ce\u30fc\u30c9\u9593\u3067\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002</p> <pre><code>await cache.set(\"key\", \"value\")\n</code></pre>"},{"location":"ja/api/cache/#async-def-getkey-str-optionalt","title":"<code>async def get(key: str) -&gt; Optional[T]</code>","text":"<p>\u30af\u30a9\u30fc\u30e9\u30e0\u3092\u4f7f\u7528\u3057\u3066\u5206\u6563\u30ad\u30e3\u30c3\u30b7\u30e5\u304b\u3089\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002</p> <pre><code>value = await cache.get(\"key\")\n</code></pre>"},{"location":"ja/api/cache/#_9","title":"\u30ad\u30e3\u30c3\u30b7\u30e5\u30dd\u30ea\u30b7\u30fc","text":""},{"location":"ja/api/cache/#evictionpolicy","title":"EvictionPolicy","text":"<p>\u30ad\u30e3\u30c3\u30b7\u30e5\u9000\u907f\u30dd\u30ea\u30b7\u30fc\u3092\u5b9a\u7fa9\u3059\u308b\u5217\u6319\u578b:</p> <pre><code>class EvictionPolicy(Enum):\n    LRU = auto()  # \u6700\u3082\u9577\u304f\u4f7f\u7528\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u3092\u9000\u907f\n    LFU = auto()  # \u6700\u3082\u4f7f\u7528\u983b\u5ea6\u306e\u4f4e\u3044\u3082\u306e\u3092\u9000\u907f\n    FIFO = auto() # \u6700\u3082\u53e4\u3044\u3082\u306e\u3092\u9000\u907f\n</code></pre>"},{"location":"ja/api/cache/#_10","title":"\u7279\u6b8a\u5316\u3055\u308c\u305f\u30ad\u30e3\u30c3\u30b7\u30e5\u30af\u30e9\u30b9","text":""},{"location":"ja/api/cache/#ttllrucache","title":"TTLLRUCache","text":"<p>LRU\u7279\u5316\u578b\u306eTTL\u30ad\u30e3\u30c3\u30b7\u30e5\u5b9f\u88c5\u3002</p> <pre><code>from mtaio.cache import TTLLRUCache\n\ncache = TTLLRUCache[str](max_size=1000)\nawait cache.set(\"key\", \"value\")\n</code></pre>"},{"location":"ja/api/cache/#ttllfucache","title":"TTLLFUCache","text":"<p>LFU\u7279\u5316\u578b\u306eTTL\u30ad\u30e3\u30c3\u30b7\u30e5\u5b9f\u88c5\u3002</p> <pre><code>from mtaio.cache import TTLLFUCache\n\ncache = TTLLFUCache[str](max_size=1000)\nawait cache.set(\"key\", \"value\")\n</code></pre>"},{"location":"ja/api/cache/#ttlfifocache","title":"TTLFIFOCache","text":"<p>FIFO\u7279\u5316\u578b\u306eTTL\u30ad\u30e3\u30c3\u30b7\u30e5\u5b9f\u88c5\u3002</p> <pre><code>from mtaio.cache import TTLFIFOCache\n\ncache = TTLFIFOCache[str](max_size=1000)\nawait cache.set(\"key\", \"value\")\n</code></pre>"},{"location":"ja/api/cache/#_11","title":"\u7d71\u8a08\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0","text":"<p>\u30ad\u30e3\u30c3\u30b7\u30e5\u5b9f\u88c5\u306f\u7d71\u8a08\u60c5\u5831\u306e\u8ffd\u8de1\u3092\u63d0\u4f9b\u3057\u307e\u3059:</p> <pre><code>from mtaio.cache import TTLCache\n\ncache = TTLCache[str]()\n\n# \u30ad\u30e3\u30c3\u30b7\u30e5\u7d71\u8a08\u306e\u53d6\u5f97\nstats = cache.get_stats()\nprint(f\"\u30ad\u30e3\u30c3\u30b7\u30e5\u30d2\u30c3\u30c8\u6570: {stats.hits}\")\nprint(f\"\u30ad\u30e3\u30c3\u30b7\u30e5\u30df\u30b9\u6570: {stats.misses}\")\nprint(f\"\u30d2\u30c3\u30c8\u7387: {stats.hit_rate:.2f}\")\n</code></pre>"},{"location":"ja/api/cache/#cachestats","title":"CacheStats\u30af\u30e9\u30b9","text":"<pre><code>@dataclass\nclass CacheStats:\n    hits: int = 0          # \u30d2\u30c3\u30c8\u6570\n    misses: int = 0        # \u30df\u30b9\u6570\n    evictions: int = 0     # \u9000\u907f\u6570\n    expirations: int = 0   # \u6709\u52b9\u671f\u9650\u5207\u308c\u6570\n    items: int = 0         # \u30a2\u30a4\u30c6\u30e0\u6570\n</code></pre>"},{"location":"ja/api/cache/#_12","title":"\u30a8\u30e9\u30fc\u51e6\u7406","text":"<p>\u30ad\u30e3\u30c3\u30b7\u30e5\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u4ee5\u4e0b\u306e\u4f8b\u5916\u578b\u3092\u5b9a\u7fa9\u3057\u307e\u3059:</p> <pre><code>from mtaio.exceptions import (\n    CacheError,          # \u57fa\u672c\u30ad\u30e3\u30c3\u30b7\u30e5\u4f8b\u5916\n    CacheKeyError,       # \u7121\u52b9\u307e\u305f\u306f\u672a\u767a\u898b\u306e\u30ad\u30fc\n    CacheConnectionError # \u63a5\u7d9a\u5931\u6557\n)\n\ntry:\n    await cache.get(\"key\")\nexcept CacheKeyError:\n    print(\"\u30ad\u30fc\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\nexcept CacheConnectionError:\n    print(\"\u63a5\u7d9a\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\nexcept CacheError as e:\n    print(f\"\u30ad\u30e3\u30c3\u30b7\u30e5\u30a8\u30e9\u30fc: {e}\")\n</code></pre>"},{"location":"ja/api/cache/#_13","title":"\u9ad8\u5ea6\u306a\u4f7f\u7528\u6cd5","text":""},{"location":"ja/api/cache/#_14","title":"\u30ab\u30b9\u30bf\u30e0\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u5b9f\u88c5","text":"<p>\u30ab\u30b9\u30bf\u30e0\u30ad\u30e3\u30c3\u30b7\u30e5\u5b9f\u88c5\u306e\u4f5c\u6210:</p> <pre><code>from mtaio.cache import TTLCache\nfrom mtaio.typing import CacheKey, CacheValue\n\nclass CustomCache(TTLCache[str]):\n    async def pre_set(self, key: str, value: str) -&gt; None:\n        # \u30ad\u30e3\u30c3\u30b7\u30e5\u8a2d\u5b9a\u524d\u306e\u524d\u51e6\u7406\n        pass\n\n    async def post_get(self, key: str, value: Optional[str]) -&gt; Optional[str]:\n        # \u30ad\u30e3\u30c3\u30b7\u30e5\u53d6\u5f97\u5f8c\u306e\u5f8c\u51e6\u7406\n        return value\n</code></pre>"},{"location":"ja/api/cache/#_15","title":"\u30ad\u30e3\u30c3\u30b7\u30e5\u30c7\u30b3\u30ec\u30fc\u30bf","text":"<p>\u95a2\u6570\u306e\u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u306e\u4f7f\u7528:</p> <pre><code>from mtaio.decorators import with_cache\nfrom mtaio.cache import TTLCache\n\ncache = TTLCache[str]()\n\n@with_cache(cache)\nasync def expensive_operation(param: str) -&gt; str:\n    # \u91cd\u3044\u8a08\u7b97\u51e6\u7406\n    return result\n</code></pre>"},{"location":"ja/api/cache/#_16","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":"<ol> <li> <p>TTL\u306e\u8a2d\u5b9a <pre><code># \u983b\u7e41\u306b\u5909\u66f4\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306b\u306f\u77ed\u3044TTL\nvolatile_cache = TTLCache[str](default_ttl=60.0)\n\n# \u5b89\u5b9a\u3057\u305f\u30c7\u30fc\u30bf\u306b\u306f\u9577\u3044TTL\nstable_cache = TTLCache[str](default_ttl=3600.0)\n</code></pre></p> </li> <li> <p>\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406 <pre><code>async with TTLCache[str]() as cache:\n    # \u30ad\u30e3\u30c3\u30b7\u30e5\u306f\u81ea\u52d5\u7684\u306b\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3055\u308c\u307e\u3059\n    pass\n</code></pre></p> </li> <li> <p>\u30a8\u30e9\u30fc\u51e6\u7406 <pre><code>try:\n    async with cache.transaction() as txn:\n        await txn.set(\"key\", \"value\")\nexcept CacheError:\n    # \u30ad\u30e3\u30c3\u30b7\u30e5\u30a8\u30e9\u30fc\u306e\u51e6\u7406\n    pass\n</code></pre></p> </li> <li> <p>\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0 <pre><code># \u30ad\u30e3\u30c3\u30b7\u30e5\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\nstats = cache.get_stats()\nif stats.hit_rate &lt; 0.5:\n    logger.warning(\"\u30ad\u30e3\u30c3\u30b7\u30e5\u30d2\u30c3\u30c8\u7387\u304c\u4f4e\u4e0b\u3057\u3066\u3044\u307e\u3059\")\n</code></pre></p> </li> </ol>"},{"location":"ja/api/cache/#_17","title":"\u95a2\u9023\u9805\u76ee","text":"<ul> <li>\u57fa\u672c\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u30b3\u30a2API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u30a4\u30d9\u30f3\u30c8\u306b\u3064\u3044\u3066\u306f\u30a4\u30d9\u30f3\u30c8API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406\u306b\u3064\u3044\u3066\u306f\u30ea\u30bd\u30fc\u30b9API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30b5\u30f3\u30d7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u53c2\u7167</li> </ul>"},{"location":"ja/api/core/","title":"\u30b3\u30a2API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<p><code>mtaio.core</code>\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u30bf\u30b9\u30af\u5b9f\u884c\u3001\u30ad\u30e5\u30fc\u3001\u57fa\u672c\u30c7\u30fc\u30bf\u69cb\u9020\u306a\u3069\u3001\u975e\u540c\u671f\u64cd\u4f5c\u306e\u305f\u3081\u306e\u57fa\u672c\u7684\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/core/#_1","title":"\u30bf\u30b9\u30af\u5b9f\u884c","text":""},{"location":"ja/api/core/#taskexecutor","title":"TaskExecutor","text":"<p><code>TaskExecutor</code>\u30af\u30e9\u30b9\u306f\u3001\u540c\u6642\u5b9f\u884c\u5236\u9650\u3068\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406\u3092\u5099\u3048\u305f\u975e\u540c\u671f\u30bf\u30b9\u30af\u306e\u5236\u5fa1\u3055\u308c\u305f\u5b9f\u884c\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/core/#_2","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.core import TaskExecutor\n\nasync def process_item(item: str) -&gt; str:\n    return f\"\u51e6\u7406\u6e08\u307f: {item}\"\n\n# \u57fa\u672c\u7684\u306a\u5b9f\u884c\nasync with TaskExecutor() as executor:\n    # \u5358\u4e00\u30bf\u30b9\u30af\n    result = await executor.run(process_item(\"\u30c7\u30fc\u30bf\"))\n\n    # \u540c\u6642\u5b9f\u884c\u5236\u9650\u4ed8\u304d\u306e\u8907\u6570\u30bf\u30b9\u30af\n    items = [\"\u9805\u76ee1\", \"\u9805\u76ee2\", \"\u9805\u76ee3\"]\n    results = await executor.gather(\n        *(process_item(item) for item in items),\n        limit=2  # \u6700\u59272\u3064\u306e\u540c\u6642\u5b9f\u884c\u30bf\u30b9\u30af\n    )\n</code></pre>"},{"location":"ja/api/core/#_3","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class TaskExecutor:\n    def __init__(\n        self,\n        thread_pool: Optional[concurrent.futures.ThreadPoolExecutor] = None\n    ):\n        \"\"\"\n        \u30bf\u30b9\u30af\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n        Args:\n            thread_pool: \u540c\u671f\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u4efb\u610f\u306e\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\n        \"\"\"\n\n    async def run(\n        self,\n        coro: Awaitable[T],\n        *,\n        timeout: Optional[float] = None\n    ) -&gt; T:\n        \"\"\"\n        \u5358\u4e00\u306e\u30b3\u30eb\u30fc\u30c1\u30f3\u3092\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u4ed8\u304d\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n        Args:\n            coro: \u5b9f\u884c\u3059\u308b\u30b3\u30eb\u30fc\u30c1\u30f3\n            timeout: \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\uff08\u79d2\uff09\n\n        Returns:\n            \u30b3\u30eb\u30fc\u30c1\u30f3\u306e\u7d50\u679c\n\n        Raises:\n            TimeoutError: \u64cd\u4f5c\u304c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u305f\u5834\u5408\n            ExecutionError: \u5b9f\u884c\u304c\u5931\u6557\u3057\u305f\u5834\u5408\n        \"\"\"\n\n    async def gather(\n        self,\n        *coroutines: Coroutine[Any, Any, T],\n        limit: Optional[int] = None,\n        return_exceptions: bool = False,\n    ) -&gt; List[T]:\n        \"\"\"\n        \u8907\u6570\u306e\u30b3\u30eb\u30fc\u30c1\u30f3\u3092\u540c\u6642\u5b9f\u884c\u5236\u9650\u4ed8\u304d\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n        Args:\n            *coroutines: \u5b9f\u884c\u3059\u308b\u30b3\u30eb\u30fc\u30c1\u30f3\n            limit: \u6700\u5927\u540c\u6642\u5b9f\u884c\u6570\n            return_exceptions: \u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u308b\u4ee3\u308f\u308a\u306b\u8fd4\u3059\u304b\u3069\u3046\u304b\n\n        Returns:\n            \u5165\u529b\u30b3\u30eb\u30fc\u30c1\u30f3\u306e\u9806\u5e8f\u3067\u306e\u7d50\u679c\u30ea\u30b9\u30c8\n\n        Raises:\n            ExecutionError: \u5b9f\u884c\u304c\u5931\u6557\u3057\u3001return_exceptions\u304cFalse\u306e\u5834\u5408\n        \"\"\"\n\n    async def map(\n        self,\n        func: AsyncCallable[T],\n        *iterables: Any,\n        limit: Optional[int] = None,\n        return_exceptions: bool = False,\n    ) -&gt; List[T]:\n        \"\"\"\n        \u53cd\u5fa9\u53ef\u80fd\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u5404\u8981\u7d20\u306b\u95a2\u6570\u3092\u540c\u6642\u306b\u9069\u7528\u3057\u307e\u3059\u3002\n\n        Args:\n            func: \u9069\u7528\u3059\u308b\u975e\u540c\u671f\u95a2\u6570\n            *iterables: \u5165\u529b\u3068\u306a\u308b\u53cd\u5fa9\u53ef\u80fd\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n            limit: \u6700\u5927\u540c\u6642\u5b9f\u884c\u6570\n            return_exceptions: \u4f8b\u5916\u3092\u767a\u751f\u3055\u305b\u308b\u4ee3\u308f\u308a\u306b\u8fd4\u3059\u304b\u3069\u3046\u304b\n\n        Returns:\n            \u7d50\u679c\u306e\u30ea\u30b9\u30c8\n        \"\"\"\n</code></pre>"},{"location":"ja/api/core/#_4","title":"\u9ad8\u5ea6\u306a\u4f7f\u7528\u6cd5","text":""},{"location":"ja/api/core/#_5","title":"\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\u306e\u5b9f\u884c","text":"<pre><code>from mtaio.core import TaskExecutor\n\nasync def process_with_thread_pool():\n    async with TaskExecutor() as executor:\n        # CPU\u8ca0\u8377\u306e\u9ad8\u3044\u95a2\u6570\u3092\u30b9\u30ec\u30c3\u30c9\u30d7\u30fc\u30eb\u3067\u5b9f\u884c\n        result = await executor.run_in_thread(\n            cpu_intensive_function,\n            arg1,\n            arg2\n        )\n</code></pre>"},{"location":"ja/api/core/#_6","title":"\u30a8\u30e9\u30fc\u51e6\u7406","text":"<pre><code>from mtaio.exceptions import ExecutionError, TimeoutError\n\nasync def handle_execution_errors():\n    try:\n        async with TaskExecutor() as executor:\n            results = await executor.gather(\n                *tasks,\n                return_exceptions=True\n            )\n\n            for result in results:\n                if isinstance(result, Exception):\n                    print(f\"\u30bf\u30b9\u30af\u304c\u5931\u6557\u3057\u307e\u3057\u305f: {result}\")\n    except ExecutionError as e:\n        print(f\"\u5b9f\u884c\u304c\u5931\u6557\u3057\u307e\u3057\u305f: {e}\")\n</code></pre>"},{"location":"ja/api/core/#_7","title":"\u30ad\u30e5\u30fc","text":""},{"location":"ja/api/core/#asyncqueue","title":"AsyncQueue","text":"<p>\u6c4e\u7528\u975e\u540c\u671f\u30ad\u30e5\u30fc\u306e\u5b9f\u88c5\u3067\u3059\u3002</p>"},{"location":"ja/api/core/#_8","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.core import AsyncQueue\n\nasync def producer_consumer():\n    queue: AsyncQueue[str] = AsyncQueue(maxsize=10)\n\n    # \u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30fc\n    await queue.put(\"\u9805\u76ee\")\n\n    # \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\n    item = await queue.get()\n    queue.task_done()\n\n    # \u30ad\u30e5\u30fc\u304c\u7a7a\u306b\u306a\u308b\u307e\u3067\u5f85\u6a5f\n    await queue.join()\n</code></pre>"},{"location":"ja/api/core/#_9","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class AsyncQueue[T]:\n    def __init__(self, maxsize: int = 0):\n        \"\"\"\n        \u975e\u540c\u671f\u30ad\u30e5\u30fc\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n        Args:\n            maxsize: \u30ad\u30e5\u30fc\u306e\u6700\u5927\u30b5\u30a4\u30ba(0\u306f\u7121\u5236\u9650)\n        \"\"\"\n\n    async def put(self, item: T) -&gt; None:\n        \"\"\"\u30ad\u30e5\u30fc\u306b\u9805\u76ee\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\"\"\"\n\n    async def get(self) -&gt; T:\n        \"\"\"\u30ad\u30e5\u30fc\u304b\u3089\u9805\u76ee\u3092\u53d6\u308a\u51fa\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\"\"\"\n\n    def task_done(self) -&gt; None:\n        \"\"\"\u4ee5\u524d\u306b\u30ad\u30e5\u30fc\u306b\u5165\u308c\u3089\u308c\u305f\u30bf\u30b9\u30af\u304c\u5b8c\u4e86\u3057\u305f\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\"\"\"\n\n    async def join(self) -&gt; None:\n        \"\"\"\u30ad\u30e5\u30fc\u5185\u306e\u3059\u3079\u3066\u306e\u9805\u76ee\u304c\u51e6\u7406\u3055\u308c\u308b\u307e\u3067\u5f85\u6a5f\u3057\u307e\u3059\u3002\"\"\"\n\n    def qsize(self) -&gt; int:\n        \"\"\"\u30ad\u30e5\u30fc\u306e\u73fe\u5728\u306e\u30b5\u30a4\u30ba\u3092\u8fd4\u3057\u307e\u3059\u3002\"\"\"\n\n    def empty(self) -&gt; bool:\n        \"\"\"\u30ad\u30e5\u30fc\u304c\u7a7a\u306e\u5834\u5408\u306fTrue\u3092\u8fd4\u3057\u307e\u3059\u3002\"\"\"\n\n    def full(self) -&gt; bool:\n        \"\"\"\u30ad\u30e5\u30fc\u304c\u6e80\u676f\u306e\u5834\u5408\u306fTrue\u3092\u8fd4\u3057\u307e\u3059\u3002\"\"\"\n</code></pre>"},{"location":"ja/api/core/#_10","title":"\u7279\u6b8a\u306a\u30ad\u30e5\u30fc","text":""},{"location":"ja/api/core/#priorityqueue","title":"PriorityQueue","text":"<p>\u512a\u5148\u5ea6\u306b\u57fa\u3065\u3044\u3066\u9805\u76ee\u3092\u53d6\u308a\u51fa\u3059\u30ad\u30e5\u30fc\u3067\u3059\u3002</p> <pre><code>from mtaio.core import PriorityQueue\n\nasync def priority_queue_example():\n    queue: PriorityQueue[str] = PriorityQueue()\n\n    # \u512a\u5148\u5ea6\u4ed8\u304d\u3067\u9805\u76ee\u3092\u8ffd\u52a0\uff08\u6570\u5024\u304c\u5c0f\u3055\u3044\u307b\u3069\u512a\u5148\u5ea6\u304c\u9ad8\u3044\uff09\n    await queue.put(\"\u901a\u5e38\u30bf\u30b9\u30af\", priority=2)\n    await queue.put(\"\u7dca\u6025\u30bf\u30b9\u30af\", priority=1)\n\n    # \u9805\u76ee\u306f\u512a\u5148\u5ea6\u9806\u3067\u53d6\u308a\u51fa\u3055\u308c\u308b\n    item = await queue.get()  # \"\u7dca\u6025\u30bf\u30b9\u30af\"\u304c\u8fd4\u3055\u308c\u308b\n</code></pre>"},{"location":"ja/api/core/#lifoqueue","title":"LIFOQueue","text":"<p>\u5f8c\u5165\u308c\u5148\u51fa\u3057\uff08LIFO\uff09\u30ad\u30e5\u30fc\u306e\u5b9f\u88c5\u3067\u3059\u3002</p> <pre><code>from mtaio.core import LIFOQueue\n\nasync def lifo_queue_example():\n    stack: LIFOQueue[str] = LIFOQueue()\n\n    await stack.put(\"1\u756a\u76ee\")\n    await stack.put(\"2\u756a\u76ee\")\n\n    item = await stack.get()  # \"2\u756a\u76ee\"\u304c\u8fd4\u3055\u308c\u308b\n</code></pre>"},{"location":"ja/api/core/#_11","title":"\u540c\u671f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6","text":""},{"location":"ja/api/core/#latch","title":"Latch","text":"<p>\u30ab\u30a6\u30f3\u30c8\u30c0\u30a6\u30f3\u30e9\u30c3\u30c1\u306e\u540c\u671f\u5b9f\u88c5\u3067\u3059\u3002</p> <pre><code>from mtaio.core import Latch\n\nasync def latch_example():\n    # \u30ab\u30a6\u30f3\u30c83\u306e\u30e9\u30c3\u30c1\u3092\u4f5c\u6210\n    latch = Latch(3)\n\n    # \u30ab\u30a6\u30f3\u30c8\u3092\u6e1b\u3089\u3059\n    await latch.count_down()\n\n    # \u30ab\u30a6\u30f3\u30c8\u304c0\u306b\u306a\u308b\u307e\u3067\u5f85\u6a5f\n    await latch.wait(timeout=5.0)  # \u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\n</code></pre>"},{"location":"ja/api/core/#_12","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class Latch:\n    def __init__(self, count: int):\n        \"\"\"\n        \u30e9\u30c3\u30c1\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n        Args:\n            count: \u521d\u671f\u30ab\u30a6\u30f3\u30c8\n        \"\"\"\n\n    async def count_down(self) -&gt; None:\n        \"\"\"\u30ab\u30a6\u30f3\u30c8\u30921\u3064\u6e1b\u3089\u3057\u307e\u3059\u3002\"\"\"\n\n    async def wait(self, timeout: Optional[float] = None) -&gt; bool:\n        \"\"\"\n        \u30ab\u30a6\u30f3\u30c8\u304c0\u306b\u306a\u308b\u307e\u3067\u5f85\u6a5f\u3057\u307e\u3059\u3002\n\n        Args:\n            timeout: \u5f85\u6a5f\u3059\u308b\u6700\u5927\u6642\u9593(\u79d2)\n\n        Returns:\n            \u30ab\u30a6\u30f3\u30c8\u304c0\u306b\u306a\u3063\u305f\u5834\u5408\u306fTrue\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u305f\u5834\u5408\u306fFalse\n        \"\"\"\n\n    def get_count(self) -&gt; int:\n        \"\"\"\u73fe\u5728\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n</code></pre>"},{"location":"ja/api/core/#_13","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"ja/api/core/#_14","title":"\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406","text":"<pre><code># \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u306e\u305f\u3081\u306b\u5e38\u306b\u975e\u540c\u671f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u3092\u4f7f\u7528\nasync with TaskExecutor() as executor:\n    # \u30ea\u30bd\u30fc\u30b9\u306f\u81ea\u52d5\u7684\u306b\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3055\u308c\u308b\n    pass\n\n# \u30ad\u30e5\u30fc\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3092\u51e6\u7406\nqueue = AsyncQueue[str]()\ntry:\n    await queue.put(\"\u9805\u76ee\")\n    item = await queue.get()\nfinally:\n    # \u6b8b\u308a\u306e\u9805\u76ee\u3092\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\n    while not queue.empty():\n        await queue.get()\n</code></pre>"},{"location":"ja/api/core/#_15","title":"\u540c\u6642\u5b9f\u884c\u5236\u5fa1","text":"<pre><code># \u540c\u6642\u5b9f\u884c\u30bf\u30b9\u30af\u3092\u5236\u9650\nasync with TaskExecutor() as executor:\n    results = await executor.gather(\n        *long_running_tasks,\n        limit=5  # \u540c\u6642\u5b9f\u884c\u30bf\u30b9\u30af\u306e\u904e\u5270\u3092\u9632\u6b62\n    )\n\n# \u30ad\u30e5\u30fc\u30b5\u30a4\u30ba\u3092\u5236\u5fa1\nqueue = AsyncQueue[str](maxsize=100)  # \u7121\u5236\u9650\u306e\u6210\u9577\u3092\u9632\u6b62\n</code></pre>"},{"location":"ja/api/core/#_16","title":"\u30a8\u30e9\u30fc\u51e6\u7406","text":"<pre><code>from mtaio.exceptions import ExecutionError\n\nasync def handle_execution():\n    try:\n        async with TaskExecutor() as executor:\n            await executor.run(risky_operation())\n    except ExecutionError as e:\n        # \u5b9f\u884c\u30a8\u30e9\u30fc\u3092\u51e6\u7406\n        logger.error(f\"\u5b9f\u884c\u306b\u5931\u6557\u3057\u307e\u3057\u305f: {e}\")\n    except TimeoutError as e:\n        # \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u51e6\u7406\n        logger.error(f\"\u64cd\u4f5c\u304c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u307e\u3057\u305f: {e}\")\n</code></pre>"},{"location":"ja/api/core/#_17","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u30d2\u30f3\u30c8","text":"<ol> <li> <p>\u30bf\u30b9\u30af\u306e\u30d0\u30c3\u30c1\u51e6\u7406 <pre><code># \u30b9\u30eb\u30fc\u30d7\u30c3\u30c8\u5411\u4e0a\u306e\u305f\u3081\u306b\u30bf\u30b9\u30af\u3092\u30d0\u30c3\u30c1\u3067\u51e6\u7406\nasync with TaskExecutor() as executor:\n    for batch in chunks(tasks, size=10):\n        await executor.gather(*batch, limit=5)\n</code></pre></p> </li> <li> <p>\u30ad\u30e5\u30fc\u306e\u30b5\u30a4\u30ba\u8a2d\u5b9a <pre><code># \u9069\u5207\u306a\u30ad\u30e5\u30fc\u30b5\u30a4\u30ba\u3092\u8a2d\u5b9a\nqueue = AsyncQueue[str](\n    maxsize=1000  # \u30e1\u30e2\u30ea\u554f\u984c\u3092\u9632\u6b62\n)\n</code></pre></p> </li> <li> <p>\u30ea\u30bd\u30fc\u30b9\u5236\u9650 <pre><code># \u30ea\u30bd\u30fc\u30b9\u4f7f\u7528\u3092\u5236\u5fa1\nexecutor = TaskExecutor(\n    thread_pool=ThreadPoolExecutor(max_workers=4)\n)\n</code></pre></p> </li> </ol>"},{"location":"ja/api/core/#_18","title":"\u95a2\u9023\u9805\u76ee","text":"<ul> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u30ad\u30e3\u30c3\u30b7\u30e5API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u30a4\u30d9\u30f3\u30c8API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406\u306b\u3064\u3044\u3066\u306f\u30ea\u30bd\u30fc\u30b9API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30b5\u30f3\u30d7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u53c2\u7167</li> </ul>"},{"location":"ja/api/data/","title":"\u30c7\u30fc\u30bfAPI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<p><code>mtaio.data</code>\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u3001\u30aa\u30d6\u30b6\u30fc\u30d0\u30d6\u30eb\u3092\u542b\u3080\u30c7\u30fc\u30bf\u51e6\u7406\u3068\u5909\u63db\u306e\u305f\u3081\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/data/#_1","title":"\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u51e6\u7406","text":""},{"location":"ja/api/data/#pipeline","title":"Pipeline","text":"<p><code>Pipeline</code>\u30af\u30e9\u30b9\u306f\u3001\u8a2d\u5b9a\u53ef\u80fd\u306a\u30b9\u30c6\u30fc\u30b8\u3092\u901a\u3058\u305f\u9806\u6b21\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/data/#_2","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.data import Pipeline, Stage\n\n# \u51e6\u7406\u30b9\u30c6\u30fc\u30b8\u306e\u5b9a\u7fa9\nclass ValidationStage(Stage[dict, dict]):\n    async def process(self, data: dict) -&gt; dict:\n        if \"id\" not in data:\n            raise ValueError(\"id\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u5fc5\u8981\u3067\u3059\")\n        return data\n\nclass EnrichmentStage(Stage[dict, dict]):\n    async def process(self, data: dict) -&gt; dict:\n        data[\"timestamp\"] = time.time()\n        return data\n\n# \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u4f5c\u6210\u3068\u4f7f\u7528\nasync def process_data():\n    pipeline = Pipeline()\n    pipeline.add_stage(ValidationStage())\n    pipeline.add_stage(EnrichmentStage())\n\n    async with pipeline:\n        result = await pipeline.process({\"id\": \"123\"})\n</code></pre>"},{"location":"ja/api/data/#_3","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class Pipeline[T, U]:\n    def __init__(self, buffer_size: int = 0):\n        \"\"\"\n        \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n        Args:\n            buffer_size: \u30b9\u30c6\u30fc\u30b8\u9593\u306e\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\n        \"\"\"\n\n    def add_stage(self, stage: Stage) -&gt; \"Pipeline\":\n        \"\"\"\u51e6\u7406\u30b9\u30c6\u30fc\u30b8\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\"\"\"\n\n    async def process(self, data: T) -&gt; U:\n        \"\"\"\u5358\u4e00\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067\u51e6\u7406\u3057\u307e\u3059\u3002\"\"\"\n\n    async def process_many(\n        self,\n        items: Union[Iterable[T], AsyncIterable[T]]\n    ) -&gt; List[U]:\n        \"\"\"\u8907\u6570\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3067\u51e6\u7406\u3057\u307e\u3059\u3002\"\"\"\n</code></pre>"},{"location":"ja/api/data/#stage","title":"Stage","text":"<p>\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u30b9\u30c6\u30fc\u30b8\u306e\u30d9\u30fc\u30b9\u30af\u30e9\u30b9\u3067\u3059\u3002</p> <pre><code>from mtaio.data import Stage\n\nclass CustomStage(Stage[T, U]):\n    async def process(self, data: T) -&gt; U:\n        \"\"\"\u5358\u4e00\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u51e6\u7406\u3057\u307e\u3059\u3002\"\"\"\n        return processed_data\n\n    async def setup(self) -&gt; None:\n        \"\"\"\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u958b\u59cb\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\"\"\"\n        pass\n\n    async def cleanup(self) -&gt; None:\n        \"\"\"\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u7d42\u4e86\u6642\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\"\"\"\n        pass\n</code></pre>"},{"location":"ja/api/data/#_4","title":"\u63d0\u4f9b\u3055\u308c\u308b\u30b9\u30c6\u30fc\u30b8","text":""},{"location":"ja/api/data/#batchstage","title":"BatchStage","text":"<p>\u30c7\u30fc\u30bf\u3092\u30d0\u30c3\u30c1\u3067\u51e6\u7406\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.data import BatchStage\n\nclass AverageBatchStage(BatchStage[float, float]):\n    def __init__(self, batch_size: int = 10):\n        super().__init__(batch_size)\n\n    async def process_batch(self, batch: List[float]) -&gt; float:\n        return sum(batch) / len(batch)\n</code></pre>"},{"location":"ja/api/data/#filterstage","title":"FilterStage","text":"<p>\u8ff0\u8a9e\u306b\u57fa\u3065\u3044\u3066\u30c7\u30fc\u30bf\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.data import FilterStage\n\n# \u30d5\u30a3\u30eb\u30bf\u30fc\u30b9\u30c6\u30fc\u30b8\u306e\u4f5c\u6210\nfilter_stage = FilterStage(lambda x: x &gt; 0)\n\n# \u307e\u305f\u306f\u975e\u540c\u671f\u8ff0\u8a9e\u3092\u4f7f\u7528\nasync def async_predicate(x):\n    return x &gt; await get_threshold()\n\nfilter_stage = FilterStage(async_predicate)\n</code></pre>"},{"location":"ja/api/data/#mapstage","title":"MapStage","text":"<p>\u30de\u30c3\u30d4\u30f3\u30b0\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u30c7\u30fc\u30bf\u3092\u5909\u63db\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.data import MapStage\n\n# \u30de\u30c3\u30d7\u30b9\u30c6\u30fc\u30b8\u306e\u4f5c\u6210\nmap_stage = MapStage(lambda x: x * 2)\n\n# \u307e\u305f\u306f\u975e\u540c\u671f\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u4f7f\u7528\nasync def async_transform(x):\n    return await process_value(x)\n\nmap_stage = MapStage(async_transform)\n</code></pre>"},{"location":"ja/api/data/#_5","title":"\u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406","text":""},{"location":"ja/api/data/#stream","title":"Stream","text":"<p><code>Stream</code>\u30af\u30e9\u30b9\u306f\u3001\u30c7\u30fc\u30bf\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u6d41\u66a2\u306a\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/data/#_6","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.data import Stream\n\nasync def process_stream():\n    stream = Stream.from_iterable([1, 2, 3, 4, 5])\n\n    result = await (stream\n        .map(lambda x: x * 2)\n        .filter(lambda x: x &gt; 5)\n        .reduce(lambda acc, x: acc + x))\n</code></pre>"},{"location":"ja/api/data/#_7","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class Stream[T]:\n    @classmethod\n    def from_iterable(\n        cls,\n        iterable: Union[Iterable[T], AsyncIterable[T]]\n    ) -&gt; \"Stream[T]\":\n        \"\"\"\u53cd\u5fa9\u53ef\u80fd\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\"\"\"\n\n    def map(\n        self,\n        func: Union[Callable[[T], U], Callable[[T], Awaitable[U]]]\n    ) -&gt; \"Stream[U]\":\n        \"\"\"\u30de\u30c3\u30d4\u30f3\u30b0\u95a2\u6570\u3092\u4f7f\u7528\u3057\u3066\u30a2\u30a4\u30c6\u30e0\u3092\u5909\u63db\u3057\u307e\u3059\u3002\"\"\"\n\n    def filter(\n        self,\n        predicate: Union[Callable[[T], bool], Callable[[T], Awaitable[bool]]]\n    ) -&gt; \"Stream[T]\":\n        \"\"\"\u8ff0\u8a9e\u3092\u4f7f\u7528\u3057\u3066\u30a2\u30a4\u30c6\u30e0\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002\"\"\"\n\n    async def reduce(\n        self,\n        func: Union[Callable[[U, T], U], Callable[[U, T], Awaitable[U]]],\n        initial: Optional[U] = None,\n    ) -&gt; U:\n        \"\"\"\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u5358\u4e00\u306e\u5024\u306b\u7e2e\u7d04\u3057\u307e\u3059\u3002\"\"\"\n</code></pre>"},{"location":"ja/api/data/#_8","title":"\u30b9\u30c8\u30ea\u30fc\u30e0\u64cd\u4f5c","text":""},{"location":"ja/api/data/#_9","title":"\u30a6\u30a3\u30f3\u30c9\u30a6\u51e6\u7406","text":"<pre><code>from mtaio.data import Stream\n\nasync def window_example():\n    stream = Stream.from_iterable(range(10))\n\n    # \u30b9\u30e9\u30a4\u30c7\u30a3\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\n    async for window in stream.window(size=3, step=1):\n        print(f\"\u30a6\u30a3\u30f3\u30c9\u30a6: {window}\")  # [0,1,2], [1,2,3], ...\n</code></pre>"},{"location":"ja/api/data/#_10","title":"\u30d0\u30c3\u30c1\u51e6\u7406","text":"<pre><code>from mtaio.data import Stream\n\nasync def batch_example():\n    stream = Stream.from_iterable(range(10))\n\n    # \u30d0\u30c3\u30c1\u3067\u51e6\u7406\n    async for batch in stream.batch(size=3):\n        print(f\"\u30d0\u30c3\u30c1: {batch}\")  # [0,1,2], [3,4,5], ...\n</code></pre>"},{"location":"ja/api/data/#_11","title":"\u30aa\u30d6\u30b6\u30fc\u30d0\u30fc\u30d1\u30bf\u30fc\u30f3","text":""},{"location":"ja/api/data/#observable","title":"Observable","text":"<p><code>Observable</code>\u30af\u30e9\u30b9\u306f\u3001\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u305f\u3081\u306e\u30aa\u30d6\u30b6\u30fc\u30d0\u30fc\u30d1\u30bf\u30fc\u30f3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/data/#_12","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.data import Observable, Change, ChangeType\n\nclass DataStore(Observable[dict]):\n    def __init__(self):\n        super().__init__()\n        self._data = {}\n\n    async def update(self, key: str, value: Any) -&gt; None:\n        old_value = self._data.get(key)\n        self._data[key] = value\n\n        await self.notify(Change(\n            type=ChangeType.UPDATE,\n            path=f\"data.{key}\",\n            value=value,\n            old_value=old_value\n        ))\n</code></pre>"},{"location":"ja/api/data/#_13","title":"\u30aa\u30d6\u30b6\u30fc\u30d0\u30fc","text":"<pre><code># \u30aa\u30d6\u30b6\u30fc\u30d0\u30fc\u306e\u8ffd\u52a0\n@data_store.on_change\nasync def handle_change(change: Change[dict]):\n    print(f\"\u5024\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f: {change.value}\")\n\n# 1\u56de\u9650\u308a\u306e\u30aa\u30d6\u30b6\u30fc\u30d0\u30fc\n@data_store.once\nasync def handle_first_change(change: Change[dict]):\n    print(\"\u6700\u521d\u306e\u5909\u66f4\u306e\u307f\")\n</code></pre>"},{"location":"ja/api/data/#_14","title":"\u30d0\u30c3\u30c1\u64cd\u4f5c","text":"<pre><code>from mtaio.data import Observable\n\nasync def batch_updates():\n    store = DataStore()\n\n    async with store.batch_operations():\n        await store.update(\"key1\", \"value1\")\n        await store.update(\"key2\", \"value2\")\n        # \u3059\u3079\u3066\u306e\u5909\u66f4\u306b\u3064\u3044\u3066\u30aa\u30d6\u30b6\u30fc\u30d0\u30fc\u306b\u4e00\u5ea6\u901a\u77e5\u3055\u308c\u307e\u3059\n</code></pre>"},{"location":"ja/api/data/#_15","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"ja/api/data/#_16","title":"\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u8a2d\u8a08","text":"<pre><code># \u660e\u78ba\u3055\u306e\u305f\u3081\u306b\u578b\u30d2\u30f3\u30c8\u3092\u4f7f\u7528\nclass ProcessingPipeline(Pipeline[dict, dict]):\n    def __init__(self):\n        super().__init__()\n        self.add_stage(ValidationStage())\n        self.add_stage(TransformationStage())\n        self.add_stage(EnrichmentStage())\n\n# \u9069\u5207\u306b\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3092\u51e6\u7406\nasync with ProcessingPipeline() as pipeline:\n    results = await pipeline.process_many(items)\n</code></pre>"},{"location":"ja/api/data/#_17","title":"\u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406","text":"<pre><code># \u52b9\u7387\u7684\u306b\u64cd\u4f5c\u3092\u9023\u9396\nresult = await (Stream.from_iterable(data)\n    .filter(is_valid)\n    .map(transform)\n    .batch(100)\n    .reduce(aggregate))\n\n# \u5fc5\u8981\u306b\u5fdc\u3058\u3066\u975e\u540c\u671f\u8ff0\u8a9e\u3092\u4f7f\u7528\nasync def is_valid(item: dict) -&gt; bool:\n    return await validate(item)\n</code></pre>"},{"location":"ja/api/data/#_18","title":"\u30aa\u30d6\u30b6\u30fc\u30d0\u30d6\u30eb\u306e\u5b9f\u88c5","text":"<pre><code># \u30ab\u30b9\u30bf\u30e0\u30aa\u30d6\u30b6\u30fc\u30d0\u30d6\u30eb\u306e\u5b9f\u88c5\nclass DataManager(Observable[T]):\n    def __init__(self):\n        super().__init__()\n        self._cleanup_handlers = []\n\n    async def cleanup(self):\n        for handler in self._cleanup_handlers:\n            self.remove_observer(handler)\n</code></pre>"},{"location":"ja/api/data/#_19","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u8003\u616e\u4e8b\u9805","text":"<ol> <li> <p>\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0 <pre><code># \u9069\u5207\u306a\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u3092\u4f7f\u7528\npipeline = Pipeline(buffer_size=1000)\n</code></pre></p> </li> <li> <p>\u30d0\u30c3\u30c1\u51e6\u7406 <pre><code># \u6700\u9069\u306a\u30d0\u30c3\u30c1\u30b5\u30a4\u30ba\u3067\u30c7\u30fc\u30bf\u3092\u51e6\u7406\nasync for batch in stream.batch(size=optimal_batch_size):\n    await process_batch(batch)\n</code></pre></p> </li> <li> <p>\u30aa\u30d6\u30b6\u30fc\u30d0\u30fc\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7 <pre><code># \u4e0d\u8981\u306b\u306a\u3063\u305f\u3089\u30aa\u30d6\u30b6\u30fc\u30d0\u30fc\u3092\u524a\u9664\nobservable.remove_observer(handler)\n</code></pre></p> </li> </ol>"},{"location":"ja/api/data/#_20","title":"\u95a2\u9023\u9805\u76ee","text":"<ul> <li>\u57fa\u672c\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u30b3\u30a2API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u64cd\u4f5c\u306b\u3064\u3044\u3066\u306f\u30ad\u30e3\u30c3\u30b7\u30e5API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u30a4\u30d9\u30f3\u30c8API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30b5\u30f3\u30d7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u53c2\u7167</li> </ul>"},{"location":"ja/api/decorators/","title":"\u30c7\u30b3\u30ec\u30fc\u30bfAPI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<p><code>mtaio.decorators</code>\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3001\u30ea\u30c8\u30e9\u30a4\u3001\u30ec\u30fc\u30c8\u5236\u9650\u306a\u3069\u306e\u8ffd\u52a0\u6a5f\u80fd\u3067\u975e\u540c\u671f\u95a2\u6570\u3092\u62e1\u5f35\u3059\u308b\u305f\u3081\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/decorators/#_1","title":"\u30a2\u30c0\u30d7\u30bf\u30fc","text":"<p>\u7570\u306a\u308b\u975e\u540c\u671f\u30d1\u30bf\u30fc\u30f3\u9593\u306e\u5909\u63db\u3092\u884c\u3046\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u3059\u3002</p>"},{"location":"ja/api/decorators/#async_adapter","title":"async_adapter","text":"<p>\u540c\u671f\u95a2\u6570\u3092\u975e\u540c\u671f\u95a2\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.decorators import async_adapter\n\n# \u57fa\u672c\u7684\u306a\u4f7f\u7528\u6cd5\n@async_adapter\ndef cpu_intensive(data: str) -&gt; str:\n    # CPU\u8ca0\u8377\u306e\u9ad8\u3044\u51e6\u7406\n    return processed_data\n\n# \u30ab\u30b9\u30bf\u30e0\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u30fc\u3092\u4f7f\u7528\n@async_adapter(executor=ThreadPoolExecutor(max_workers=4))\ndef parallel_operation(data: str) -&gt; str:\n    return processed_data\n\n# \u30c7\u30b3\u30ec\u30fc\u30c8\u3055\u308c\u305f\u95a2\u6570\u306e\u4f7f\u7528\nasync def main():\n    result = await cpu_intensive(\"\u30c7\u30fc\u30bf\")\n</code></pre>"},{"location":"ja/api/decorators/#async_iterator","title":"async_iterator","text":"<p>\u540c\u671f\u7684\u306a\u53cd\u5fa9\u53ef\u80fd\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u975e\u540c\u671f\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5909\u63db\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.decorators import async_iterator\n\n@async_iterator(chunk_size=10)\ndef generate_data() -&gt; Iterable[int]:\n    return range(1000)\n\nasync def process_data():\n    async for items in generate_data():\n        # \u30a2\u30a4\u30c6\u30e0\u306e\u30c1\u30e3\u30f3\u30af\u3092\u51e6\u7406\n        pass\n</code></pre>"},{"location":"ja/api/decorators/#async_context_adapter","title":"async_context_adapter","text":"<p>\u540c\u671f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u3092\u975e\u540c\u671f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u306b\u5909\u63db\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.decorators import async_context_adapter\nfrom contextlib import contextmanager\n\n@async_context_adapter\n@contextmanager\ndef resource_manager():\n    resource = acquire_resource()\n    try:\n        yield resource\n    finally:\n        release_resource(resource)\n\nasync def use_resource():\n    async with resource_manager() as resource:\n        await process(resource)\n</code></pre>"},{"location":"ja/api/decorators/#_2","title":"\u5236\u5fa1\u30d5\u30ed\u30fc","text":"<p>\u95a2\u6570\u5b9f\u884c\u3092\u5236\u5fa1\u3059\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u3059\u3002</p>"},{"location":"ja/api/decorators/#with_timeout","title":"with_timeout","text":"<p>\u975e\u540c\u671f\u95a2\u6570\u306b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u5236\u5fa1\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.decorators import with_timeout\n\n@with_timeout(5.0)  # 5\u79d2\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\nasync def api_call() -&gt; dict:\n    return await make_request()\n\n# \u30ab\u30b9\u30bf\u30e0\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u4ed8\u304d\n@with_timeout(10.0, error_message=\"API\u30b3\u30fc\u30eb\u304c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u307e\u3057\u305f\")\nasync def long_operation() -&gt; None:\n    await process_data()\n</code></pre>"},{"location":"ja/api/decorators/#with_retry","title":"with_retry","text":"<p>\u5931\u6557\u3057\u305f\u64cd\u4f5c\u306e\u30ea\u30c8\u30e9\u30a4\u30ed\u30b8\u30c3\u30af\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.decorators import with_retry\n\n# \u57fa\u672c\u7684\u306a\u30ea\u30c8\u30e9\u30a4\n@with_retry(max_attempts=3)\nasync def unstable_operation() -&gt; str:\n    return await flaky_service_call()\n\n# \u9ad8\u5ea6\u306a\u30ea\u30c8\u30e9\u30a4\u8a2d\u5b9a\n@with_retry(\n    max_attempts=5,\n    delay=1.0,\n    backoff_factor=2.0,\n    exceptions=(ConnectionError, TimeoutError)\n)\nasync def network_operation() -&gt; bytes:\n    return await fetch_data()\n</code></pre>"},{"location":"ja/api/decorators/#with_rate_limit","title":"with_rate_limit","text":"<p>\u95a2\u6570\u547c\u3073\u51fa\u3057\u306b\u30ec\u30fc\u30c8\u5236\u9650\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.decorators import with_rate_limit\n\n@with_rate_limit(10.0)  # 1\u79d2\u3042\u305f\u308a10\u56de\u306e\u547c\u3073\u51fa\u3057\nasync def rate_limited_api() -&gt; dict:\n    return await api_call()\n\n# \u30d0\u30fc\u30b9\u30c8\u8a31\u5bb9\u4ed8\u304d\n@with_rate_limit(rate=5.0, burst=10)\nasync def burst_allowed_operation() -&gt; None:\n    await process()\n</code></pre>"},{"location":"ja/api/decorators/#with_circuit_breaker","title":"with_circuit_breaker","text":"<p>\u30b5\u30fc\u30ad\u30c3\u30c8\u30d6\u30ec\u30fc\u30ab\u30fc\u30d1\u30bf\u30fc\u30f3\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.decorators import with_circuit_breaker\n\n@with_circuit_breaker(\n    failure_threshold=5,    # 5\u56de\u306e\u5931\u6557\u5f8c\u306b\u30aa\u30fc\u30d7\u30f3\n    reset_timeout=60.0,     # 60\u79d2\u5f8c\u306b\u30ea\u30bb\u30c3\u30c8\u3092\u8a66\u884c\n    half_open_timeout=5.0   # \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u5f8c\u306b1\u56de\u306e\u30c6\u30b9\u30c8\u547c\u3073\u51fa\u3057\u3092\u8a31\u53ef\n)\nasync def protected_operation() -&gt; str:\n    return await external_service_call()\n</code></pre>"},{"location":"ja/api/decorators/#with_fallback","title":"with_fallback","text":"<p>\u5931\u6557\u3057\u305f\u64cd\u4f5c\u306e\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u52d5\u4f5c\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.decorators import with_fallback\n\n# \u9759\u7684\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u4ed8\u304d\n@with_fallback(\"\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\")\nasync def get_data() -&gt; str:\n    return await fetch_data()\n\n# \u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u4ed8\u304d\n@with_fallback(lambda: get_cached_data())\nasync def fetch_user(user_id: str) -&gt; dict:\n    return await db_query(user_id)\n</code></pre>"},{"location":"ja/api/decorators/#with_cache","title":"with_cache","text":"<p>\u95a2\u6570\u306e\u7d50\u679c\u306b\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.decorators import with_cache\nfrom mtaio.cache import TTLCache\n\ncache = TTLCache[str]()\n\n@with_cache(cache)\nasync def expensive_calculation(input: str) -&gt; str:\n    return await compute_result(input)\n\n# \u30ab\u30b9\u30bf\u30e0\u30ad\u30fc\u95a2\u6570\u4ed8\u304d\n@with_cache(cache, key_func=lambda x, y: f\"{x}:{y}\")\nasync def parameterized_operation(x: int, y: int) -&gt; int:\n    return await compute(x, y)\n</code></pre>"},{"location":"ja/api/decorators/#_3","title":"\u9ad8\u5ea6\u306a\u4f7f\u7528\u6cd5","text":""},{"location":"ja/api/decorators/#_4","title":"\u30c7\u30b3\u30ec\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b","text":"<p>\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u8907\u6570\u306e\u52d5\u4f5c\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059:</p> <pre><code>@with_timeout(5.0)\n@with_retry(max_attempts=3)\n@with_cache(cache)\nasync def robust_operation() -&gt; dict:\n    return await fetch_data()\n</code></pre>"},{"location":"ja/api/decorators/#_5","title":"\u30ab\u30b9\u30bf\u30e0\u30a2\u30c0\u30d7\u30bf\u30fc","text":"<p>\u30ab\u30b9\u30bf\u30e0\u30a2\u30c0\u30d7\u30bf\u30fc\u306e\u4f5c\u6210:</p> <pre><code>from mtaio.decorators import CallbackAdapter\n\nclass CustomAdapter:\n    def __init__(self, timeout: float = 30.0):\n        self.adapter = CallbackAdapter[str](timeout)\n\n    def callback(self, result: str) -&gt; None:\n        self.adapter.callback(result)\n\n    async def wait(self) -&gt; str:\n        return await self.adapter.wait()\n</code></pre>"},{"location":"ja/api/decorators/#_6","title":"\u30a8\u30e9\u30fc\u51e6\u7406","text":"<p>\u30c7\u30b3\u30ec\u30fc\u30bf\u56fa\u6709\u306e\u30a8\u30e9\u30fc\u51e6\u7406:</p> <pre><code>from mtaio.exceptions import (\n    TimeoutError,\n    RetryError,\n    RateLimitError,\n    CircuitBreakerError\n)\n\nasync def handle_errors():\n    try:\n        await protected_operation()\n    except TimeoutError:\n        # \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u51e6\u7406\n        pass\n    except RetryError as e:\n        # \u30ea\u30c8\u30e9\u30a4\u56de\u6570\u8d85\u904e\u306e\u51e6\u7406\n        print(f\"{e.attempts}\u56de\u306e\u8a66\u884c\u5f8c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n    except RateLimitError as e:\n        # \u30ec\u30fc\u30c8\u5236\u9650\u306e\u51e6\u7406\n        print(f\"\u30ec\u30fc\u30c8\u5236\u9650\u3092\u8d85\u904e\u3057\u307e\u3057\u305f: {e.limit}\")\n</code></pre>"},{"location":"ja/api/decorators/#_7","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":"<ol> <li> <p>\u30c7\u30b3\u30ec\u30fc\u30bf\u306e\u9806\u5e8f <pre><code># \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306f\u5b9f\u884c\u6642\u9593\u3092\u9069\u5207\u306b\u5236\u5fa1\u3059\u308b\u305f\u3081\u6700\u5916\u90e8\u306b\u3059\u308b\n@with_timeout(5.0)\n@with_retry(max_attempts=3)\n@with_cache(cache)\nasync def optimized_operation():\n    pass\n</code></pre></p> </li> <li> <p>\u30ea\u30bd\u30fc\u30b9\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7 <pre><code># \u9069\u5207\u306a\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u306e\u305f\u3081\u306b\u975e\u540c\u671f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u3092\u4f7f\u7528\n@async_context_adapter\n@contextmanager\ndef managed_resource():\n    try:\n        yield setup_resource()\n    finally:\n        cleanup_resource()\n</code></pre></p> </li> <li> <p>\u30a8\u30e9\u30fc\u51e6\u7406 <pre><code># \u3088\u308a\u826f\u3044\u30a8\u30e9\u30fc\u5236\u5fa1\u306e\u305f\u3081\u306b\u7279\u5b9a\u306e\u4f8b\u5916\u3092\u51e6\u7406\n@with_fallback(\n    fallback=default_value,\n    exceptions=(ConnectionError, TimeoutError)\n)\nasync def safe_operation():\n    pass\n</code></pre></p> </li> </ol>"},{"location":"ja/api/decorators/#_8","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u8003\u616e\u4e8b\u9805","text":"<ol> <li> <p>\u30ad\u30e3\u30c3\u30b7\u30e5\u6226\u7565 <pre><code># \u9069\u5207\u306a\u30ad\u30e3\u30c3\u30b7\u30e5\u8a2d\u5b9a\u3092\u4f7f\u7528\n@with_cache(\n    TTLCache[str](\n        default_ttl=300.0,  # 5\u5206\n        max_size=1000\n    )\n)\nasync def cached_operation():\n    pass\n</code></pre></p> </li> <li> <p>\u30ec\u30fc\u30c8\u5236\u9650 <pre><code># \u4fdd\u8b77\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u30d0\u30e9\u30f3\u30b9\u3092\u53d6\u308b\n@with_rate_limit(\n    rate=100.0,    # 1\u79d2\u3042\u305f\u308a100\u56de\u306e\u547c\u3073\u51fa\u3057\n    burst=20       # \u30d0\u30fc\u30b9\u30c8\u3092\u8a31\u53ef\n)\nasync def high_throughput_operation():\n    pass\n</code></pre></p> </li> <li> <p>\u30ea\u30c8\u30e9\u30a4\u30bf\u30a4\u30df\u30f3\u30b0 <pre><code># \u30ea\u30c8\u30e9\u30a4\u306b\u6307\u6570\u30d0\u30c3\u30af\u30aa\u30d5\u3092\u4f7f\u7528\n@with_retry(\n    delay=1.0,\n    backoff_factor=2.0  # 1\u79d2, 2\u79d2, 4\u79d2, 8\u79d2...\n)\nasync def network_operation():\n    pass\n</code></pre></p> </li> </ol>"},{"location":"ja/api/decorators/#_9","title":"\u95a2\u9023\u9805\u76ee","text":"<ul> <li>\u57fa\u672c\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u30b3\u30a2API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u64cd\u4f5c\u306b\u3064\u3044\u3066\u306f\u30ad\u30e3\u30c3\u30b7\u30e5API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406\u306b\u3064\u3044\u3066\u306f\u30ea\u30bd\u30fc\u30b9API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30b5\u30f3\u30d7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u53c2\u7167</li> </ul>"},{"location":"ja/api/events/","title":"\u30a4\u30d9\u30f3\u30c8API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<p><code>mtaio.events</code>\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u578b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u5805\u7262\u306a\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u30b7\u30b9\u30c6\u30e0\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/events/#_1","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.events import EventEmitter\n\n# \u30a8\u30df\u30c3\u30bf\u30fc\u306e\u4f5c\u6210\nemitter = EventEmitter()\n\n# \u30cf\u30f3\u30c9\u30e9\u306e\u5b9a\u7fa9\n@emitter.on(\"user_login\")\nasync def handle_login(event):\n    user = event.data\n    print(f\"\u30e6\u30fc\u30b6\u30fc {user['name']} \u304c\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3057\u305f\")\n\n# \u30a4\u30d9\u30f3\u30c8\u306e\u767a\u884c\nawait emitter.emit(\"user_login\", {\n    \"name\": \"\u7530\u4e2d\",\n    \"id\": \"123\"\n})\n</code></pre>"},{"location":"ja/api/events/#_2","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class EventEmitter:\n    def __init__(self):\n        \"\"\"\u30a4\u30d9\u30f3\u30c8\u30a8\u30df\u30c3\u30bf\u30fc\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\"\"\"\n\n    def on(\n        self,\n        event_name: str,\n        priority: EventPriority = EventPriority.NORMAL\n    ) -&gt; Callable:\n        \"\"\"\n        \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3059\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u3002\n\n        Args:\n            event_name: \u51e6\u7406\u3059\u308b\u30a4\u30d9\u30f3\u30c8\u306e\u540d\u524d\n            priority: \u30cf\u30f3\u30c9\u30e9\u306e\u512a\u5148\u5ea6\u30ec\u30d9\u30eb\n\n        Returns:\n            \u30c7\u30b3\u30ec\u30fc\u30c8\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\n        \"\"\"\n\n    def once(\n        self,\n        event_name: str,\n        priority: EventPriority = EventPriority.NORMAL\n    ) -&gt; Callable:\n        \"\"\"1\u56de\u9650\u308a\u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u767b\u9332\u3057\u307e\u3059\u3002\"\"\"\n\n    async def emit(\n        self,\n        event_name: str,\n        data: Any,\n        metadata: Optional[Dict[str, Any]] = None\n    ) -&gt; None:\n        \"\"\"\n        \u30a4\u30d9\u30f3\u30c8\u3092\u767a\u884c\u3057\u307e\u3059\u3002\n\n        Args:\n            event_name: \u30a4\u30d9\u30f3\u30c8\u306e\u540d\u524d\n            data: \u30a4\u30d9\u30f3\u30c8\u30c7\u30fc\u30bf\n            metadata: \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30a4\u30d9\u30f3\u30c8\u30e1\u30bf\u30c7\u30fc\u30bf\n        \"\"\"\n</code></pre>"},{"location":"ja/api/events/#_3","title":"\u30a4\u30d9\u30f3\u30c8\u306e\u7a2e\u985e","text":""},{"location":"ja/api/events/#event","title":"Event","text":"<p>\u57fa\u672c\u30a4\u30d9\u30f3\u30c8\u30b3\u30f3\u30c6\u30ca\u30af\u30e9\u30b9\u3002</p> <pre><code>from mtaio.events import Event, ChangeType\n\n@dataclass\nclass Event[T]:\n    name: str              # \u30a4\u30d9\u30f3\u30c8\u540d\n    data: T               # \u30a4\u30d9\u30f3\u30c8\u30c7\u30fc\u30bf\n    propagate: bool = True # \u4f1d\u64ad\u3092\u7d99\u7d9a\u3059\u308b\u304b\u3069\u3046\u304b\n    metadata: Dict[str, Any] = field(default_factory=dict)\n</code></pre>"},{"location":"ja/api/events/#eventpriority","title":"EventPriority","text":"<p>\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u512a\u5148\u5ea6\u30ec\u30d9\u30eb\u3002</p> <pre><code>class EventPriority(Enum):\n    LOWEST = auto()   # \u6700\u4f4e\u512a\u5148\u5ea6\n    LOW = auto()      # \u4f4e\u512a\u5148\u5ea6\n    NORMAL = auto()   # \u901a\u5e38\u512a\u5148\u5ea6\n    HIGH = auto()     # \u9ad8\u512a\u5148\u5ea6\n    HIGHEST = auto()  # \u6700\u9ad8\u512a\u5148\u5ea6\n    MONITOR = auto()  # \u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u307f\n</code></pre>"},{"location":"ja/api/events/#_4","title":"\u9ad8\u5ea6\u306a\u6a5f\u80fd","text":""},{"location":"ja/api/events/#_5","title":"\u30a4\u30d9\u30f3\u30c8\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0","text":"<p>\u6761\u4ef6\u306b\u57fa\u3065\u3044\u3066\u30a4\u30d9\u30f3\u30c8\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0:</p> <pre><code>from mtaio.events import EventEmitter\n\nemitter = EventEmitter()\n\n# \u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3055\u308c\u305f\u30a8\u30df\u30c3\u30bf\u30fc\u306e\u4f5c\u6210\nfiltered = emitter.filter(\n    lambda event: event.data.get(\"priority\") == \"high\"\n)\n\n@filtered.on(\"alert\")\nasync def handle_high_priority_alert(event):\n    alert = event.data\n    print(f\"\u9ad8\u512a\u5148\u5ea6\u30a2\u30e9\u30fc\u30c8: {alert['message']}\")\n</code></pre>"},{"location":"ja/api/events/#_6","title":"\u30a4\u30d9\u30f3\u30c8\u306e\u5909\u63db","text":"<p>\u51e6\u7406\u524d\u306b\u30a4\u30d9\u30f3\u30c8\u3092\u5909\u63db:</p> <pre><code>from mtaio.events import EventEmitter, Event\n\n# \u5909\u63db\u3055\u308c\u305f\u30a8\u30df\u30c3\u30bf\u30fc\u306e\u4f5c\u6210\ntransformed = emitter.map(\n    lambda event: Event(\n        name=event.name,\n        data={**event.data, \"processed\": True}\n    )\n)\n\n@transformed.on(\"data_event\")\nasync def handle_processed_data(event):\n    # \u5909\u63db\u3055\u308c\u305f\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\n    pass\n</code></pre>"},{"location":"ja/api/events/#_7","title":"\u30d0\u30c3\u30c1\u64cd\u4f5c","text":"<p>\u8907\u6570\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u30b0\u30eb\u30fc\u30d7\u5316:</p> <pre><code>from mtaio.events import EventEmitter\n\nemitter = EventEmitter()\n\nasync def batch_operations():\n    async with emitter.batch_operations():\n        # \u30a4\u30d9\u30f3\u30c8\u304c\u30d0\u30c3\u30c1\u51e6\u7406\u3055\u308c\u308b\n        await emitter.emit(\"event1\", data1)\n        await emitter.emit(\"event2\", data2)\n        # \u30cf\u30f3\u30c9\u30e9\u306f\u5168\u3066\u306e\u30a4\u30d9\u30f3\u30c8\u306b\u3064\u3044\u3066\u4e00\u5ea6\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\n</code></pre>"},{"location":"ja/api/events/#_8","title":"\u30a4\u30d9\u30f3\u30c8\u30c1\u30e3\u30cd\u30eb","text":"<p>\u7279\u5b9a\u306e\u76ee\u7684\u306e\u305f\u3081\u306e\u30a4\u30d9\u30f3\u30c8\u30c1\u30e3\u30cd\u30eb\u3092\u4f5c\u6210:</p> <pre><code>from mtaio.events import Channel, Subscriber\n\nasync def channel_example():\n    channel = Channel[str](\"notifications\")\n\n    # \u30c1\u30e3\u30cd\u30eb\u306e\u8cfc\u8aad\n    subscriber = await channel.subscribe()\n\n    # \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u914d\u4fe1\n    await channel.publish(\"\u8cfc\u8aad\u8005\u306e\u7686\u69d8\u3078\")\n\n    # \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u53d7\u4fe1\n    message = await subscriber.receive()\n</code></pre>"},{"location":"ja/api/events/#_9","title":"\u30c8\u30d4\u30c3\u30af\u30d9\u30fc\u30b9\u306e\u30a4\u30d9\u30f3\u30c8","text":"<p>\u30c8\u30d4\u30c3\u30af\u3067\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406:</p> <pre><code>from mtaio.events import Channel\n\nasync def topic_example():\n    channel = Channel[str](\"events\")\n\n    # \u7279\u5b9a\u306e\u30c8\u30d4\u30c3\u30af\u3092\u8cfc\u8aad\n    subscriber = await channel.subscribe([\"user.*\", \"system.*\"])\n\n    # \u30c8\u30d4\u30c3\u30af\u3078\u306e\u914d\u4fe1\n    await channel.publish(\n        \"\u30e6\u30fc\u30b6\u30fc\u304c\u30ed\u30b0\u30a4\u30f3\u3057\u307e\u3057\u305f\",\n        topic=\"user.login\"\n    )\n</code></pre>"},{"location":"ja/api/events/#_10","title":"\u30a8\u30e9\u30fc\u51e6\u7406","text":""},{"location":"ja/api/events/#_11","title":"\u30a4\u30d9\u30f3\u30c8\u30a8\u30e9\u30fc","text":"<p>\u30a4\u30d9\u30f3\u30c8\u95a2\u9023\u306e\u30a8\u30e9\u30fc\u3092\u51e6\u7406:</p> <pre><code>from mtaio.exceptions import (\n    EventError,\n    EventEmitError,\n    EventHandlerError\n)\n\nasync def handle_errors():\n    try:\n        await emitter.emit(\"event\", data)\n    except EventEmitError:\n        # \u767a\u884c\u30a8\u30e9\u30fc\u306e\u51e6\u7406\n        pass\n    except EventHandlerError:\n        # \u30cf\u30f3\u30c9\u30e9\u30a8\u30e9\u30fc\u306e\u51e6\u7406\n        pass\n</code></pre>"},{"location":"ja/api/events/#_12","title":"\u30a8\u30e9\u30fc\u30a4\u30d9\u30f3\u30c8","text":"<p>\u30a8\u30e9\u30fc\u30a4\u30d9\u30f3\u30c8\u306e\u767a\u884c:</p> <pre><code>@emitter.on(\"error\")\nasync def handle_error(event):\n    error = event.data\n    print(f\"\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f: {error}\")\n\n# \u30a8\u30e9\u30fc\u30a4\u30d9\u30f3\u30c8\u306e\u767a\u884c\ntry:\n    await process_data()\nexcept Exception as e:\n    await emitter.emit(\"error\", e)\n</code></pre>"},{"location":"ja/api/events/#_13","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"ja/api/events/#_14","title":"\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u69cb\u6210","text":"<pre><code>class UserEventHandlers:\n    def __init__(self, emitter: EventEmitter):\n        self.emitter = emitter\n        self.setup_handlers()\n\n    def setup_handlers(self):\n        @self.emitter.on(\"user.created\")\n        async def handle_user_created(event):\n            pass\n\n        @self.emitter.on(\"user.updated\")\n        async def handle_user_updated(event):\n            pass\n\n# \u4f7f\u7528\u4f8b\nhandlers = UserEventHandlers(emitter)\n</code></pre>"},{"location":"ja/api/events/#_15","title":"\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406","text":"<pre><code>class EventManager:\n    def __init__(self):\n        self.emitter = EventEmitter()\n        self._handlers = []\n\n    def register_handler(self, event: str, handler: Callable):\n        self._handlers.append((event, handler))\n        self.emitter.on(event)(handler)\n\n    async def cleanup(self):\n        for event, handler in self._handlers:\n            self.emitter.remove_listener(event, handler)\n</code></pre>"},{"location":"ja/api/events/#_16","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316","text":"<ol> <li> <p>\u30a4\u30d9\u30f3\u30c8\u306e\u30d0\u30c3\u30c1\u51e6\u7406 <pre><code>async with emitter.batch_operations():\n    for item in items:\n        await emitter.emit(\"item.processed\", item)\n</code></pre></p> </li> <li> <p>\u512a\u5148\u5ea6\u51e6\u7406 <pre><code>@emitter.on(\"critical\", priority=EventPriority.HIGHEST)\nasync def handle_critical(event):\n    # \u91cd\u8981\u306a\u30a4\u30d9\u30f3\u30c8\u3092\u6700\u521d\u306b\u51e6\u7406\n    pass\n</code></pre></p> </li> <li> <p>\u30a4\u30d9\u30f3\u30c8\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0 <pre><code># \u65e9\u671f\u306b\u30a4\u30d9\u30f3\u30c8\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\nfiltered = emitter.filter(lambda e: e.data.get(\"important\"))\n\n@filtered.on(\"event\")\nasync def handle_important_events(event):\n    pass\n</code></pre></p> </li> </ol>"},{"location":"ja/api/events/#_17","title":"\u4f7f\u7528\u4f8b","text":""},{"location":"ja/api/events/#_18","title":"\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u30c7\u30fc\u30bf\u51e6\u7406","text":"<pre><code>from mtaio.events import EventEmitter\n\nclass DataProcessor:\n    def __init__(self):\n        self.emitter = EventEmitter()\n\n    async def process(self, data: dict):\n        # \u524d\u51e6\u7406\u30a4\u30d9\u30f3\u30c8\u306e\u767a\u884c\n        await self.emitter.emit(\"process.start\", data)\n\n        try:\n            result = await self.process_data(data)\n            await self.emitter.emit(\"process.complete\", result)\n        except Exception as e:\n            await self.emitter.emit(\"process.error\", e)\n</code></pre>"},{"location":"ja/api/events/#_19","title":"\u30a4\u30d9\u30f3\u30c8\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0","text":"<pre><code>class EventMonitor:\n    def __init__(self, emitter: EventEmitter):\n        @emitter.on(\"*\", priority=EventPriority.MONITOR)\n        async def monitor_all(event):\n            await self.log_event(event)\n\n    async def log_event(self, event: Event):\n        print(f\"\u30a4\u30d9\u30f3\u30c8: {event.name}, \u30c7\u30fc\u30bf: {event.data}\")\n</code></pre>"},{"location":"ja/api/events/#_20","title":"\u95a2\u9023\u9805\u76ee","text":"<ul> <li>\u57fa\u672c\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u30b3\u30a2API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30c7\u30b3\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u306f\u30c7\u30b3\u30ec\u30fc\u30bfAPI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30b5\u30f3\u30d7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u53c2\u7167</li> </ul>"},{"location":"ja/api/exceptions/","title":"\u4f8b\u5916API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<p><code>mtaio.exceptions</code>\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001mtaio\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u306e\u305f\u3081\u306e\u5305\u62ec\u7684\u306a\u4f8b\u5916\u968e\u5c64\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/exceptions/#_1","title":"\u4f8b\u5916\u306e\u968e\u5c64","text":""},{"location":"ja/api/exceptions/#_2","title":"\u57fa\u672c\u4f8b\u5916","text":"<pre><code>class MTAIOError(Exception):\n    \"\"\"\u3059\u3079\u3066\u306emtaio\u30a8\u30e9\u30fc\u306e\u57fa\u672c\u4f8b\u5916\u30af\u30e9\u30b9\u3002\"\"\"\n    def __init__(self, message: str, *args: Any, **kwargs: Any) -&gt; None:\n        self.message = message\n        super().__init__(message, *args)\n</code></pre> <p>\u3059\u3079\u3066\u306emtaio\u4f8b\u5916\u306f\u3053\u306e\u57fa\u672c\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/exceptions/#_3","title":"\u30b3\u30a2\u4f8b\u5916","text":""},{"location":"ja/api/exceptions/#executionerror","title":"ExecutionError","text":"<p>\u30bf\u30b9\u30af\u5b9f\u884c\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u767a\u751f\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.exceptions import ExecutionError\n\ntry:\n    async with TaskExecutor() as executor:\n        await executor.run(task)\nexcept ExecutionError as e:\n    print(f\"\u30bf\u30b9\u30af\u306e\u5b9f\u884c\u306b\u5931\u6557\u3057\u307e\u3057\u305f: {e}\")\n</code></pre>"},{"location":"ja/api/exceptions/#timeouterror","title":"TimeoutError","text":"<p>\u64cd\u4f5c\u304c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u305f\u5834\u5408\u306b\u767a\u751f\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.exceptions import TimeoutError\n\ntry:\n    async with TimeoutManager(5.0):\n        await long_running_operation()\nexcept TimeoutError as e:\n    print(f\"\u64cd\u4f5c\u304c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u307e\u3057\u305f: {e}\")\n</code></pre>"},{"location":"ja/api/exceptions/#retryerror","title":"RetryError","text":"<p>\u30ea\u30c8\u30e9\u30a4\u56de\u6570\u3092\u8d85\u904e\u3057\u305f\u5834\u5408\u306b\u767a\u751f\u3057\u307e\u3059\u3002</p> <pre><code>class RetryError(MTAIOError):\n    def __init__(\n        self,\n        message: str,\n        attempts: Optional[int] = None,\n        last_error: Optional[Exception] = None,\n    ):\n        super().__init__(message)\n        self.attempts = attempts\n        self.last_error = last_error\n\n# \u4f7f\u7528\u4f8b\ntry:\n    @with_retry(max_attempts=3)\n    async def unstable_operation():\n        pass\nexcept RetryError as e:\n    print(f\"{e.attempts}\u56de\u306e\u8a66\u884c\u5f8c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n    if e.last_error:\n        print(f\"\u6700\u5f8c\u306e\u30a8\u30e9\u30fc: {e.last_error}\")\n</code></pre>"},{"location":"ja/api/exceptions/#_4","title":"\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406\u4f8b\u5916","text":""},{"location":"ja/api/exceptions/#resourcelimiterror","title":"ResourceLimitError","text":"<p>\u30ea\u30bd\u30fc\u30b9\u5236\u9650\u3092\u8d85\u904e\u3057\u305f\u5834\u5408\u306b\u767a\u751f\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.exceptions import ResourceLimitError\n\ntry:\n    limiter = RateLimiter(10.0)  # 1\u79d2\u3042\u305f\u308a10\u56de\u306e\u64cd\u4f5c\n    await limiter.acquire()\nexcept ResourceLimitError as e:\n    print(f\"\u30ec\u30fc\u30c8\u5236\u9650\u3092\u8d85\u904e\u3057\u307e\u3057\u305f: {e}\")\n</code></pre>"},{"location":"ja/api/exceptions/#resourcelockerror","title":"ResourceLockError","text":"<p>\u30ea\u30bd\u30fc\u30b9\u306e\u30ed\u30c3\u30af\u64cd\u4f5c\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u767a\u751f\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.exceptions import ResourceLockError\n\ntry:\n    async with resource_lock:\n        await process_resource()\nexcept ResourceLockError as e:\n    print(f\"\u30ed\u30c3\u30af\u306e\u53d6\u5f97\u306b\u5931\u6557\u3057\u307e\u3057\u305f: {e}\")\n</code></pre>"},{"location":"ja/api/exceptions/#_5","title":"\u30ad\u30e3\u30c3\u30b7\u30e5\u4f8b\u5916","text":""},{"location":"ja/api/exceptions/#cacheerror","title":"CacheError","text":"<p>\u30ad\u30e3\u30c3\u30b7\u30e5\u64cd\u4f5c\u306e\u57fa\u672c\u4f8b\u5916\u3067\u3059\u3002</p> <pre><code>class CacheError(MTAIOError):\n    \"\"\"\u30ad\u30e3\u30c3\u30b7\u30e5\u95a2\u9023\u30a8\u30e9\u30fc\u306e\u57fa\u672c\u4f8b\u5916\"\"\"\n    pass\n\nclass CacheKeyError(CacheError):\n    \"\"\"\u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u304c\u7121\u52b9\u307e\u305f\u306f\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306b\u767a\u751f\"\"\"\n    pass\n\nclass CacheConnectionError(CacheError):\n    \"\"\"\u30ad\u30e3\u30c3\u30b7\u30e5\u63a5\u7d9a\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u767a\u751f\"\"\"\n    pass\n\n# \u4f7f\u7528\u4f8b\ntry:\n    await cache.get(\"key\")\nexcept CacheKeyError:\n    print(\"\u30ad\u30fc\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\nexcept CacheConnectionError:\n    print(\"\u30ad\u30e3\u30c3\u30b7\u30e5\u3078\u306e\u63a5\u7d9a\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\nexcept CacheError as e:\n    print(f\"\u30ad\u30e3\u30c3\u30b7\u30e5\u64cd\u4f5c\u304c\u5931\u6557\u3057\u307e\u3057\u305f: {e}\")\n</code></pre>"},{"location":"ja/api/exceptions/#_6","title":"\u30a4\u30d9\u30f3\u30c8\u4f8b\u5916","text":""},{"location":"ja/api/exceptions/#eventerror","title":"EventError","text":"<p>\u30a4\u30d9\u30f3\u30c8\u64cd\u4f5c\u306e\u57fa\u672c\u4f8b\u5916\u3067\u3059\u3002</p> <pre><code>class EventError(MTAIOError):\n    \"\"\"\u30a4\u30d9\u30f3\u30c8\u95a2\u9023\u30a8\u30e9\u30fc\u306e\u57fa\u672c\u4f8b\u5916\"\"\"\n    pass\n\nclass EventEmitError(EventError):\n    \"\"\"\u30a4\u30d9\u30f3\u30c8\u767a\u884c\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u767a\u751f\"\"\"\n    pass\n\nclass EventHandlerError(EventError):\n    \"\"\"\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u304c\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u767a\u751f\"\"\"\n    pass\n\n# \u4f7f\u7528\u4f8b\ntry:\n    await emitter.emit(\"event\", data)\nexcept EventEmitError:\n    print(\"\u30a4\u30d9\u30f3\u30c8\u306e\u767a\u884c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\nexcept EventHandlerError:\n    print(\"\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u304c\u5931\u6557\u3057\u307e\u3057\u305f\")\n</code></pre>"},{"location":"ja/api/exceptions/#_7","title":"\u30d7\u30ed\u30c8\u30b3\u30eb\u4f8b\u5916","text":""},{"location":"ja/api/exceptions/#protocolerror","title":"ProtocolError","text":"<p>\u30d7\u30ed\u30c8\u30b3\u30eb\u64cd\u4f5c\u306e\u57fa\u672c\u4f8b\u5916\u3067\u3059\u3002</p> <pre><code>class ProtocolError(MTAIOError):\n    \"\"\"\u30d7\u30ed\u30c8\u30b3\u30eb\u95a2\u9023\u30a8\u30e9\u30fc\u306e\u57fa\u672c\u4f8b\u5916\"\"\"\n    pass\n\nclass ASGIError(ProtocolError):\n    \"\"\"ASGI\u30d7\u30ed\u30c8\u30b3\u30eb\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u767a\u751f\"\"\"\n    pass\n\nclass MQTTError(ProtocolError):\n    \"\"\"MQTT\u30d7\u30ed\u30c8\u30b3\u30eb\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u767a\u751f\"\"\"\n    pass\n\n# \u4f7f\u7528\u4f8b\ntry:\n    await mqtt_client.connect()\nexcept MQTTError as e:\n    print(f\"MQTT\u63a5\u7d9a\u306b\u5931\u6557\u3057\u307e\u3057\u305f: {e}\")\n</code></pre>"},{"location":"ja/api/exceptions/#_8","title":"\u30a8\u30e9\u30fc\u51e6\u7406\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"ja/api/exceptions/#_9","title":"\u5177\u4f53\u7684\u306a\u4f8b\u5916\u51e6\u7406","text":"<p>\u6700\u3082\u5177\u4f53\u7684\u306a\u4f8b\u5916\u304b\u3089\u6700\u3082\u4e00\u822c\u7684\u306a\u4f8b\u5916\u306e\u9806\u3067\u51e6\u7406\u3057\u307e\u3059:</p> <pre><code>try:\n    await operation()\nexcept CacheKeyError:\n    # \u5177\u4f53\u7684\u306a\u30ad\u30fc\u30a8\u30e9\u30fc\u306e\u51e6\u7406\n    pass\nexcept CacheError:\n    # \u4e00\u822c\u7684\u306a\u30ad\u30e3\u30c3\u30b7\u30e5\u30a8\u30e9\u30fc\u306e\u51e6\u7406\n    pass\nexcept MTAIOError:\n    # \u4efb\u610f\u306emtaio\u30a8\u30e9\u30fc\u306e\u51e6\u7406\n    pass\nexcept Exception:\n    # \u4e88\u671f\u3057\u306a\u3044\u30a8\u30e9\u30fc\u306e\u51e6\u7406\n    pass\n</code></pre>"},{"location":"ja/api/exceptions/#_10","title":"\u30ab\u30b9\u30bf\u30e0\u4f8b\u5916\u30af\u30e9\u30b9","text":"<p>\u30ab\u30b9\u30bf\u30e0\u4f8b\u5916\u306e\u4f5c\u6210:</p> <pre><code>class CustomOperationError(MTAIOError):\n    def __init__(\n        self,\n        message: str,\n        operation_id: str,\n        *args: Any\n    ) -&gt; None:\n        super().__init__(message, *args)\n        self.operation_id = operation_id\n\n# \u4f7f\u7528\u4f8b\ntry:\n    raise CustomOperationError(\n        \"\u64cd\u4f5c\u304c\u5931\u6557\u3057\u307e\u3057\u305f\",\n        operation_id=\"123\"\n    )\nexcept CustomOperationError as e:\n    print(f\"\u64cd\u4f5c {e.operation_id} \u304c\u5931\u6557\u3057\u307e\u3057\u305f: {e.message}\")\n</code></pre>"},{"location":"ja/api/exceptions/#_11","title":"\u4f8b\u5916\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u95a2\u6570","text":"<pre><code>from mtaio.exceptions import format_exception, wrap_exception\n\n# \u8a73\u7d30\u4ed8\u304d\u3067\u4f8b\u5916\u3092\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\ntry:\n    await operation()\nexcept MTAIOError as e:\n    error_message = format_exception(e)\n    logger.error(error_message)\n\n# \u65b0\u3057\u3044\u578b\u3067\u4f8b\u5916\u3092\u30e9\u30c3\u30d7\ntry:\n    await operation()\nexcept ConnectionError as e:\n    raise wrap_exception(\n        e,\n        CacheConnectionError,\n        \"\u30ad\u30e3\u30c3\u30b7\u30e5\u63a5\u7d9a\u306b\u5931\u6557\u3057\u307e\u3057\u305f\"\n    )\n</code></pre>"},{"location":"ja/api/exceptions/#_12","title":"\u975e\u540c\u671f\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u306e\u30a8\u30e9\u30fc\u51e6\u7406","text":"<pre><code>class SafeResource:\n    async def __aenter__(self):\n        try:\n            await self.connect()\n            return self\n        except Exception as e:\n            raise ResourceError(\"\u30ea\u30bd\u30fc\u30b9\u306e\u53d6\u5f97\u306b\u5931\u6557\u3057\u307e\u3057\u305f\") from e\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        try:\n            await self.disconnect()\n        except Exception as e:\n            # \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u4e2d\u306e\u30a8\u30e9\u30fc\u306f\u30ed\u30b0\u306b\u8a18\u9332\u3059\u308b\u3060\u3051\n            logger.error(f\"\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u30a8\u30e9\u30fc: {e}\")\n</code></pre>"},{"location":"ja/api/exceptions/#_13","title":"\u4e00\u822c\u7684\u306a\u30a8\u30e9\u30fc\u30d1\u30bf\u30fc\u30f3","text":""},{"location":"ja/api/exceptions/#_14","title":"\u30ea\u30c8\u30e9\u30a4\u30d1\u30bf\u30fc\u30f3","text":"<pre><code>async def with_retry(\n    operation: Callable,\n    max_attempts: int = 3,\n    exceptions: Tuple[Type[Exception], ...] = (MTAIOError,)\n):\n    last_error = None\n    for attempt in range(max_attempts):\n        try:\n            return await operation()\n        except exceptions as e:\n            last_error = e\n            if attempt == max_attempts - 1:\n                raise RetryError(\n                    \"\u30ea\u30c8\u30e9\u30a4\u5f8c\u3082\u64cd\u4f5c\u304c\u5931\u6557\u3057\u307e\u3057\u305f\",\n                    attempts=attempt + 1,\n                    last_error=last_error\n                )\n            await asyncio.sleep(2 ** attempt)\n</code></pre>"},{"location":"ja/api/exceptions/#_15","title":"\u30b5\u30fc\u30ad\u30c3\u30c8\u30d6\u30ec\u30fc\u30ab\u30fc\u30d1\u30bf\u30fc\u30f3","text":"<pre><code>class CircuitBreakerError(MTAIOError):\n    def __init__(\n        self,\n        message: str,\n        failures: Optional[int] = None,\n        reset_timeout: Optional[float] = None\n    ):\n        super().__init__(message)\n        self.failures = failures\n        self.reset_timeout = reset_timeout\n\n# \u4f7f\u7528\u4f8b\nbreaker = CircuitBreaker(failure_threshold=5)\ntry:\n    await breaker.call(operation)\nexcept CircuitBreakerError as e:\n    print(f\"\u30b5\u30fc\u30ad\u30c3\u30c8\u30d6\u30ec\u30fc\u30ab\u30fc\u304c\u958b\u304d\u307e\u3057\u305f: {e.failures}\u56de\u306e\u5931\u6557\")\n</code></pre>"},{"location":"ja/api/exceptions/#_16","title":"\u95a2\u9023\u9805\u76ee","text":"<ul> <li>\u57fa\u672c\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u30b3\u30a2API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u30a4\u30d9\u30f3\u30c8API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30b5\u30f3\u30d7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u53c2\u7167</li> </ul>"},{"location":"ja/api/logging/","title":"\u30ed\u30ae\u30f3\u30b0API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<p><code>mtaio.logging</code>\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u69d8\u3005\u306a\u30cf\u30f3\u30c9\u30e9\u30fc\u3068\u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u975e\u540c\u671f\u30ed\u30ae\u30f3\u30b0\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/logging/#asynclogger","title":"AsyncLogger","text":"<p>\u975e\u540c\u671f\u30ed\u30ae\u30f3\u30b0\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\u30e1\u30a4\u30f3\u306e\u30ed\u30ae\u30f3\u30b0\u30af\u30e9\u30b9\u3067\u3059\u3002</p>"},{"location":"ja/api/logging/#_1","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.logging import AsyncLogger, AsyncFileHandler\n\n# \u30ed\u30ac\u30fc\u306e\u4f5c\u6210\nlogger = AsyncLogger(\"app\")\n\n# \u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u8ffd\u52a0\nhandler = AsyncFileHandler(\"app.log\")\nawait logger.add_handler(handler)\n\n# \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30ed\u30b0\u8a18\u9332\nawait logger.info(\"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u8d77\u52d5\u3057\u307e\u3057\u305f\")\nawait logger.error(\"\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\", extra={\"\u8a73\u7d30\": \"\u30a8\u30e9\u30fc\u60c5\u5831\"})\n</code></pre>"},{"location":"ja/api/logging/#_2","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class AsyncLogger:\n    def __init__(\n        self,\n        name: str,\n        level: int = logging.NOTSET,\n        handlers: Optional[List[AsyncLogHandler]] = None\n    ):\n        \"\"\"\n        \u975e\u540c\u671f\u30ed\u30ac\u30fc\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n        Args:\n            name: \u30ed\u30ac\u30fc\u540d\n            level: \u6700\u5c0f\u30ed\u30b0\u30ec\u30d9\u30eb\n            handlers: \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30cf\u30f3\u30c9\u30e9\u30fc\u30ea\u30b9\u30c8\n        \"\"\"\n\n    async def debug(\n        self,\n        message: str,\n        *,\n        exc_info: Optional[tuple] = None,\n        stack_info: Optional[str] = None,\n        extra: Optional[Dict[str, Any]] = None\n    ) -&gt; None:\n        \"\"\"\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8a18\u9332\u3057\u307e\u3059\u3002\"\"\"\n\n    async def info(self, message: str, **kwargs) -&gt; None:\n        \"\"\"\u60c5\u5831\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8a18\u9332\u3057\u307e\u3059\u3002\"\"\"\n\n    async def warning(self, message: str, **kwargs) -&gt; None:\n        \"\"\"\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8a18\u9332\u3057\u307e\u3059\u3002\"\"\"\n\n    async def error(self, message: str, **kwargs) -&gt; None:\n        \"\"\"\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8a18\u9332\u3057\u307e\u3059\u3002\"\"\"\n\n    async def critical(self, message: str, **kwargs) -&gt; None:\n        \"\"\"\u91cd\u5927\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8a18\u9332\u3057\u307e\u3059\u3002\"\"\"\n</code></pre>"},{"location":"ja/api/logging/#_3","title":"\u30cf\u30f3\u30c9\u30e9\u30fc","text":""},{"location":"ja/api/logging/#asyncfilehandler","title":"AsyncFileHandler","text":"<p>\u975e\u540c\u671fI/O\u3092\u4f7f\u7528\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u30d9\u30fc\u30b9\u306e\u30ed\u30b0\u30cf\u30f3\u30c9\u30e9\u30fc\u3002</p> <pre><code>from mtaio.logging import AsyncFileHandler\n\nhandler = AsyncFileHandler(\n    filename=\"app.log\",\n    mode=\"a\",\n    encoding=\"utf-8\",\n    max_bytes=10_000_000,  # 10MB\n    backup_count=5\n)\n\n# \u30d5\u30a9\u30fc\u30de\u30c3\u30bf\u30fc\u306e\u8ffd\u52a0\nformatter = logging.Formatter(\n    '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n)\nhandler.setFormatter(formatter)\n</code></pre>"},{"location":"ja/api/logging/#asyncrotatingfilehandler","title":"AsyncRotatingFileHandler","text":"<p>\u30ed\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u6a5f\u80fd\u3092\u6301\u3064\u30d5\u30a1\u30a4\u30eb\u30cf\u30f3\u30c9\u30e9\u30fc\u3002</p> <pre><code>from mtaio.logging import AsyncRotatingFileHandler\n\nhandler = AsyncRotatingFileHandler(\n    filename=\"app.log\",\n    max_bytes=1_000_000,  # 1MB\n    backup_count=3,\n    encoding=\"utf-8\"\n)\n</code></pre>"},{"location":"ja/api/logging/#asyncjsonfilehandler","title":"AsyncJsonFileHandler","text":"<p>JSON\u5f62\u5f0f\u3067\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u30cf\u30f3\u30c9\u30e9\u30fc\u3002</p> <pre><code>from mtaio.logging import AsyncJsonFileHandler\n\nhandler = AsyncJsonFileHandler(\n    filename=\"app.log.json\",\n    encoder_cls=json.JSONEncoder\n)\n\n# \u30ed\u30b0\u30a8\u30f3\u30c8\u30ea\u306fJSON\u5f62\u5f0f\u3067\u66f8\u304d\u8fbc\u307e\u308c\u307e\u3059\nawait logger.info(\n    \"\u30e6\u30fc\u30b6\u30fc\u30a2\u30af\u30b7\u30e7\u30f3\",\n    extra={\n        \"user_id\": \"123\",\n        \"action\": \"\u30ed\u30b0\u30a4\u30f3\"\n    }\n)\n</code></pre>"},{"location":"ja/api/logging/#_4","title":"\u30ed\u30b0\u30ec\u30b3\u30fc\u30c9","text":""},{"location":"ja/api/logging/#logrecord","title":"LogRecord","text":"<p>\u30ed\u30b0\u30ec\u30b3\u30fc\u30c9\u30c7\u30fc\u30bf\u306e\u30b3\u30f3\u30c6\u30ca\u3002</p> <pre><code>@dataclass\nclass LogRecord:\n    level: int\n    message: str\n    timestamp: float\n    logger_name: str\n    extra: Dict[str, Any]\n    exc_info: Optional[tuple] = None\n    stack_info: Optional[str] = None\n\n    @property\n    def levelname(self) -&gt; str:\n        \"\"\"\u30ec\u30d9\u30eb\u540d\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n        return logging.getLevelName(self.level)\n</code></pre>"},{"location":"ja/api/logging/#_5","title":"\u9ad8\u5ea6\u306a\u6a5f\u80fd","text":""},{"location":"ja/api/logging/#_6","title":"\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u30ed\u30b0","text":"<p>\u95a2\u9023\u3059\u308b\u30ed\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3067\u30b0\u30eb\u30fc\u30d7\u5316:</p> <pre><code>async with logger.transaction(exc_level=logging.ERROR):\n    # \u3053\u306e\u30d6\u30ed\u30c3\u30af\u5185\u306e\u3059\u3079\u3066\u306e\u30ed\u30b0\u304c\u30b0\u30eb\u30fc\u30d7\u5316\u3055\u308c\u307e\u3059\n    await logger.info(\"\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3092\u958b\u59cb\")\n    await process_data()\n    await logger.info(\"\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5b8c\u4e86\")\n</code></pre>"},{"location":"ja/api/logging/#_7","title":"\u30d0\u30c3\u30c1\u30ed\u30b0\u8a18\u9332","text":"<p>\u8907\u6570\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u52b9\u7387\u7684\u306b\u8a18\u9332:</p> <pre><code>messages = [\n    \"\u51e6\u7406\u3092\u958b\u59cb\",\n    \"\u30b9\u30c6\u30c3\u30d71\u5b8c\u4e86\",\n    \"\u30b9\u30c6\u30c3\u30d72\u5b8c\u4e86\",\n    \"\u51e6\u7406\u7d42\u4e86\"\n]\n\nawait logger.batch(logging.INFO, messages)\n</code></pre>"},{"location":"ja/api/logging/#_8","title":"\u30a8\u30e9\u30fc\u30ed\u30b0\u8a18\u9332","text":"<p>\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u4ed8\u304d\u306e\u5305\u62ec\u7684\u306a\u30a8\u30e9\u30fc\u30ed\u30b0\u8a18\u9332:</p> <pre><code>try:\n    await operation()\nexcept Exception as e:\n    await logger.error(\n        \"\u64cd\u4f5c\u306b\u5931\u6557\u3057\u307e\u3057\u305f\",\n        exc_info=True,\n        extra={\n            \"operation_id\": \"123\",\n            \"\u8a73\u7d30\": str(e)\n        }\n    )\n</code></pre>"},{"location":"ja/api/logging/#_9","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"ja/api/logging/#_10","title":"\u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u8a2d\u5b9a","text":"<pre><code>async def setup_logging():\n    # \u30ed\u30ac\u30fc\u306e\u4f5c\u6210\n    logger = AsyncLogger(\"app\", level=logging.INFO)\n\n    # \u3059\u3079\u3066\u306e\u30ed\u30b0\u7528\u306e\u30d5\u30a1\u30a4\u30eb\u30cf\u30f3\u30c9\u30e9\u30fc\n    file_handler = AsyncRotatingFileHandler(\n        \"app.log\",\n        max_bytes=10_000_000,\n        backup_count=5\n    )\n    file_handler.setLevel(logging.DEBUG)\n\n    # \u91cd\u8981\u306a\u30ed\u30b0\u7528\u306eJSON\u30cf\u30f3\u30c9\u30e9\u30fc\n    json_handler = AsyncJsonFileHandler(\"important.log.json\")\n    json_handler.setLevel(logging.ERROR)\n\n    # \u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u8ffd\u52a0\n    await logger.add_handler(file_handler)\n    await logger.add_handler(json_handler)\n\n    return logger\n</code></pre>"},{"location":"ja/api/logging/#_11","title":"\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u4ed8\u304d\u30ed\u30b0\u8a18\u9332","text":"<pre><code>class RequestLogger:\n    def __init__(self, logger: AsyncLogger):\n        self.logger = logger\n\n    async def log_request(\n        self,\n        request_id: str,\n        message: str,\n        **kwargs\n    ) -&gt; None:\n        await self.logger.info(\n            message,\n            extra={\n                \"request_id\": request_id,\n                **kwargs\n            }\n        )\n</code></pre>"},{"location":"ja/api/logging/#_12","title":"\u69cb\u9020\u5316\u30ed\u30b0\u8a18\u9332","text":"<pre><code>class StructuredLogger:\n    def __init__(self, logger: AsyncLogger):\n        self.logger = logger\n\n    async def log_event(\n        self,\n        event_name: str,\n        **data: Any\n    ) -&gt; None:\n        await self.logger.info(\n            f\"\u30a4\u30d9\u30f3\u30c8: {event_name}\",\n            extra={\n                \"event_type\": event_name,\n                \"event_data\": data,\n                \"timestamp\": time.time()\n            }\n        )\n</code></pre>"},{"location":"ja/api/logging/#_13","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u8003\u616e\u4e8b\u9805","text":"<ol> <li> <p>\u30d0\u30c3\u30c1\u51e6\u7406 <pre><code># \u52b9\u7387\u7684\u306a\u30d0\u30c3\u30c1\u30ed\u30b0\u8a18\u9332\nasync def log_operations(operations: List[str]):\n    await logger.batch(\n        logging.INFO,\n        [f\"\u64cd\u4f5c: {op}\" for op in operations]\n    )\n</code></pre></p> </li> <li> <p>\u30ed\u30b0\u30ec\u30d9\u30eb\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0 <pre><code># \u9069\u5207\u306a\u30ed\u30b0\u30ec\u30d9\u30eb\u306e\u8a2d\u5b9a\nlogger.setLevel(logging.INFO)  # \u672c\u756a\u74b0\u5883\nhandler.setLevel(logging.ERROR)  # \u91cd\u8981\u306a\u30a8\u30e9\u30fc\u306e\u307f\n</code></pre></p> </li> <li> <p>\u975e\u540c\u671f\u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u7ba1\u7406 <pre><code># \u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u9069\u5207\u306a\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\nasync def cleanup_logging():\n    for handler in logger.handlers:\n        await handler.stop()\n        await handler.close()\n</code></pre></p> </li> </ol>"},{"location":"ja/api/logging/#_14","title":"\u30a8\u30e9\u30fc\u51e6\u7406","text":"<pre><code>from mtaio.exceptions import LoggingError\n\ntry:\n    await logger.info(\"\u30e1\u30c3\u30bb\u30fc\u30b8\")\nexcept LoggingError as e:\n    print(f\"\u30ed\u30b0\u8a18\u9332\u306b\u5931\u6557\u3057\u307e\u3057\u305f: {e}\")\n    # \u6a19\u6e96\u30ed\u30ae\u30f3\u30b0\u306b\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\n    import logging\n    logging.error(\"\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u30ed\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\")\n</code></pre>"},{"location":"ja/api/logging/#_15","title":"\u7d71\u5408\u4f8b","text":""},{"location":"ja/api/logging/#web","title":"Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30ed\u30b0\u8a18\u9332","text":"<pre><code>class WebAppLogger:\n    def __init__(self):\n        self.logger = AsyncLogger(\"webapp\")\n        self.setup_handlers()\n\n    async def log_request(self, request, response):\n        await self.logger.info(\n            f\"\u30ea\u30af\u30a8\u30b9\u30c8: {request.method} {request.path}\",\n            extra={\n                \"method\": request.method,\n                \"path\": request.path,\n                \"status\": response.status_code,\n                \"duration\": response.duration\n            }\n        )\n</code></pre>"},{"location":"ja/api/logging/#_16","title":"\u30bf\u30b9\u30af\u76e3\u8996","text":"<pre><code>class TaskLogger:\n    def __init__(self, logger: AsyncLogger):\n        self.logger = logger\n\n    @contextmanager\n    async def track_task(self, task_id: str):\n        start_time = time.time()\n        try:\n            await self.logger.info(f\"\u30bf\u30b9\u30af {task_id} \u958b\u59cb\")\n            yield\n            duration = time.time() - start_time\n            await self.logger.info(\n                f\"\u30bf\u30b9\u30af {task_id} \u5b8c\u4e86\",\n                extra={\"duration\": duration}\n            )\n        except Exception as e:\n            await self.logger.error(\n                f\"\u30bf\u30b9\u30af {task_id} \u5931\u6557\",\n                exc_info=True,\n                extra={\"duration\": time.time() - start_time}\n            )\n</code></pre>"},{"location":"ja/api/logging/#_17","title":"\u95a2\u9023\u9805\u76ee","text":"<ul> <li>\u57fa\u672c\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u30b3\u30a2API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30a8\u30e9\u30fc\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u4f8b\u5916API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30b5\u30f3\u30d7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u53c2\u7167</li> </ul>"},{"location":"ja/api/monitoring/","title":"\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<p><code>mtaio.monitoring</code>\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u30b7\u30b9\u30c6\u30e0\u30ea\u30bd\u30fc\u30b9\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30e1\u30c8\u30ea\u30af\u30b9\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u306e\u305f\u3081\u306e\u30c4\u30fc\u30eb\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/monitoring/#_1","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.monitoring import ResourceMonitor\n\n# \u30e2\u30cb\u30bf\u30fc\u306e\u4f5c\u6210\nmonitor = ResourceMonitor(interval=1.0)  # 1\u79d2\u9593\u9694\n\n# \u30a2\u30e9\u30fc\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u8a2d\u5b9a\n@monitor.on_threshold_exceeded\nasync def handle_alert(metric: str, value: float, threshold: float):\n    print(f\"\u8b66\u544a: {metric}\u304c\u3057\u304d\u3044\u5024\u3092\u8d85\u904e ({value} &gt; {threshold})\")\n\n# \u3057\u304d\u3044\u5024\u306e\u8a2d\u5b9a\nmonitor.set_threshold(\"cpu_usage\", 80.0)  # CPU\u4f7f\u7528\u738780%\nmonitor.set_threshold(\"memory_usage\", 90.0)  # \u30e1\u30e2\u30ea\u4f7f\u7528\u738790%\n\n# \u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u958b\u59cb\nawait monitor.start()\n</code></pre>"},{"location":"ja/api/monitoring/#_2","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class ResourceMonitor:\n    def __init__(\n        self,\n        interval: float = 1.0,\n        history_size: int = 3600\n    ):\n        \"\"\"\n        \u30ea\u30bd\u30fc\u30b9\u30e2\u30cb\u30bf\u30fc\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n        Args:\n            interval: \u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u9593\u9694\uff08\u79d2\uff09\n            history_size: \u4fdd\u6301\u3059\u308b\u5c65\u6b74\u7d71\u8a08\u306e\u6570\n        \"\"\"\n\n    async def start(self) -&gt; None:\n        \"\"\"\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\"\"\"\n\n    async def stop(self) -&gt; None:\n        \"\"\"\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3092\u505c\u6b62\u3057\u307e\u3059\u3002\"\"\"\n\n    def set_threshold(\n        self,\n        metric: str,\n        value: float\n    ) -&gt; None:\n        \"\"\"\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u3057\u304d\u3044\u5024\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\"\"\"\n\n    async def get_current_stats(self) -&gt; SystemStats:\n        \"\"\"\u73fe\u5728\u306e\u30b7\u30b9\u30c6\u30e0\u7d71\u8a08\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n</code></pre>"},{"location":"ja/api/monitoring/#_3","title":"\u30b7\u30b9\u30c6\u30e0\u7d71\u8a08","text":""},{"location":"ja/api/monitoring/#systemstats","title":"SystemStats","text":"<p>\u30b7\u30b9\u30c6\u30e0\u7d71\u8a08\u30c7\u30fc\u30bf\u306e\u30b3\u30f3\u30c6\u30ca\u3002</p> <pre><code>@dataclass\nclass SystemStats:\n    timestamp: float\n    cpu: CPUStats\n    memory: MemoryStats\n    io: IOStats\n\n@dataclass\nclass CPUStats:\n    usage_percent: float\n    load_average: List[float]\n    thread_count: int\n\n@dataclass\nclass MemoryStats:\n    total: int\n    available: int\n    used: int\n    percent: float\n\n@dataclass\nclass IOStats:\n    read_bytes: int\n    write_bytes: int\n    read_count: int\n    write_count: int\n</code></pre>"},{"location":"ja/api/monitoring/#_4","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.monitoring import Profiler\n\n# \u30d7\u30ed\u30d5\u30a1\u30a4\u30e9\u30fc\u306e\u4f5c\u6210\nprofiler = Profiler()\n\n# \u95a2\u6570\u5b9f\u884c\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\n@profiler.trace\nasync def monitored_function():\n    await perform_operation()\n\n# \u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\u306e\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\nasync with profiler.trace_context(\"\u64cd\u4f5c\"):\n    await perform_operation()\n\n# \u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\nprofile = await profiler.get_profile()\nprint(f\"\u5408\u8a08\u5b9f\u884c\u6642\u9593: {profile.total_time:.2f}\u79d2\")\n</code></pre>"},{"location":"ja/api/monitoring/#_5","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class Profiler:\n    def __init__(\n        self,\n        enabled: bool = True,\n        trace_async_tasks: bool = True,\n        collect_stack_trace: bool = False\n    ):\n        \"\"\"\n        \u30d7\u30ed\u30d5\u30a1\u30a4\u30e9\u30fc\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n        Args:\n            enabled: \u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0\u3092\u6709\u52b9\u306b\u3059\u308b\u304b\u3069\u3046\u304b\n            trace_async_tasks: \u975e\u540c\u671f\u30bf\u30b9\u30af\u3092\u30c8\u30ec\u30fc\u30b9\u3059\u308b\u304b\u3069\u3046\u304b\n            collect_stack_trace: \u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3092\u53ce\u96c6\u3059\u308b\u304b\u3069\u3046\u304b\n        \"\"\"\n\n    def trace(\n        self,\n        func: Optional[Callable[..., Awaitable[T]]] = None,\n        *,\n        name: Optional[str] = None\n    ) -&gt; Callable:\n        \"\"\"\u975e\u540c\u671f\u95a2\u6570\u3092\u30c8\u30ec\u30fc\u30b9\u3059\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u3002\"\"\"\n</code></pre>"},{"location":"ja/api/monitoring/#_6","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30e1\u30c8\u30ea\u30af\u30b9","text":""},{"location":"ja/api/monitoring/#_7","title":"\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u30c7\u30fc\u30bf","text":"<pre><code>@dataclass\nclass ProfileTrace:\n    name: str\n    start_time: float\n    end_time: float\n    metadata: Dict[str, Any] = field(default_factory=dict)\n    stack_trace: Optional[str] = None\n    memory_start: int = 0\n    memory_end: int = 0\n\n    @property\n    def duration(self) -&gt; float:\n        \"\"\"\u64cd\u4f5c\u306e\u6240\u8981\u6642\u9593\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n        return self.end_time - self.start_time\n\n    @property\n    def memory_delta(self) -&gt; int:\n        \"\"\"\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u306e\u5909\u5316\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n        return self.memory_end - self.memory_start\n</code></pre>"},{"location":"ja/api/monitoring/#_8","title":"\u9ad8\u5ea6\u306a\u6a5f\u80fd","text":""},{"location":"ja/api/monitoring/#_9","title":"\u30ab\u30b9\u30bf\u30e0\u30e1\u30c8\u30ea\u30af\u30b9\u53ce\u96c6","text":"<pre><code>from mtaio.monitoring import ResourceMonitor\nfrom dataclasses import dataclass\n\n@dataclass\nclass CustomMetrics:\n    request_count: int = 0\n    error_count: int = 0\n    average_response_time: float = 0.0\n\nclass ApplicationMonitor(ResourceMonitor):\n    def __init__(self):\n        super().__init__()\n        self.metrics = CustomMetrics()\n\n    async def collect_metrics(self) -&gt; None:\n        while True:\n            # \u30e1\u30c8\u30ea\u30af\u30b9\u306e\u66f4\u65b0\n            stats = await self.get_current_stats()\n\n            # \u30e1\u30c8\u30ea\u30af\u30b9\u306e\u51e6\u7406\n            if self.metrics.error_count &gt; 100:\n                await self.alert(\"\u30a8\u30e9\u30fc\u7387\u304c\u9ad8\u304f\u306a\u3063\u3066\u3044\u307e\u3059\")\n\n            await asyncio.sleep(60)\n</code></pre>"},{"location":"ja/api/monitoring/#_10","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0","text":"<pre><code>from mtaio.monitoring import Profiler\n\nclass PerformanceProfiler:\n    def __init__(self):\n        self.profiler = Profiler(\n            trace_async_tasks=True,\n            collect_stack_trace=True\n        )\n\n    async def profile_operation(self):\n        async with self.profiler.trace_context(\"\u64cd\u4f5c\"):\n            # \u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u306e\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\n            await self.profiler.start_trace(\n                \"memory_usage\",\n                metadata={\"type\": \"memory\"}\n            )\n\n            # \u64cd\u4f5c\u306e\u5b9f\u884c\n            await perform_operation()\n\n            # \u7d50\u679c\u306e\u53d6\u5f97\n            profile = await self.profiler.get_profile()\n            return self.analyze_profile(profile)\n</code></pre>"},{"location":"ja/api/monitoring/#_11","title":"\u7d71\u5408\u4f8b","text":""},{"location":"ja/api/monitoring/#web","title":"Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0","text":"<pre><code>class WebAppMonitor:\n    def __init__(self):\n        self.monitor = ResourceMonitor()\n        self.profiler = Profiler()\n\n    async def monitor_request(self, request):\n        async with self.profiler.trace_context(\"http_request\"):\n            start_time = time.time()\n\n            try:\n                response = await process_request(request)\n                duration = time.time() - start_time\n\n                await self.monitor.record_metric(\n                    \"request_duration\",\n                    duration\n                )\n\n                return response\n\n            except Exception as e:\n                await self.monitor.record_metric(\n                    \"request_error\",\n                    1.0\n                )\n                raise\n</code></pre>"},{"location":"ja/api/monitoring/#_12","title":"\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30bf\u30b9\u30af\u306e\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0","text":"<pre><code>class TaskMonitor:\n    def __init__(self):\n        self.monitor = ResourceMonitor()\n\n    async def monitor_task(self, task_id: str):\n        @self.monitor.on_threshold_exceeded\n        async def handle_task_alert(metric, value, threshold):\n            await self.notify_admin(\n                f\"\u30bf\u30b9\u30af {task_id} \u306e {metric} \u304c\u3057\u304d\u3044\u5024\u3092\u8d85\u904e\u3057\u307e\u3057\u305f\"\n            )\n\n        while True:\n            stats = await self.get_task_stats(task_id)\n            await self.monitor.record_metrics({\n                \"task_memory\": stats.memory_usage,\n                \"task_cpu\": stats.cpu_usage\n            })\n            await asyncio.sleep(1)\n</code></pre>"},{"location":"ja/api/monitoring/#_13","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"ja/api/monitoring/#_14","title":"\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406","text":"<pre><code># \u9069\u5207\u306a\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\nasync def cleanup_monitoring():\n    monitor = ResourceMonitor()\n    try:\n        await monitor.start()\n        yield monitor\n    finally:\n        await monitor.stop()\n</code></pre>"},{"location":"ja/api/monitoring/#_15","title":"\u3057\u304d\u3044\u5024\u306e\u8a2d\u5b9a","text":"<pre><code># \u9069\u5207\u306a\u3057\u304d\u3044\u5024\u306e\u8a2d\u5b9a\ndef configure_thresholds(monitor: ResourceMonitor):\n    # \u30b7\u30b9\u30c6\u30e0\u30ea\u30bd\u30fc\u30b9\n    monitor.set_threshold(\"cpu_usage\", 80.0)\n    monitor.set_threshold(\"memory_usage\", 90.0)\n\n    # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30e1\u30c8\u30ea\u30af\u30b9\n    monitor.set_threshold(\"error_rate\", 5.0)\n    monitor.set_threshold(\"response_time\", 1.0)\n</code></pre>"},{"location":"ja/api/monitoring/#_16","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316","text":"<pre><code># \u52b9\u7387\u7684\u306a\u30e1\u30c8\u30ea\u30af\u30b9\u53ce\u96c6\nclass OptimizedMonitor(ResourceMonitor):\n    def __init__(self):\n        super().__init__(interval=5.0)  # \u53ce\u96c6\u983b\u5ea6\u3092\u6e1b\u3089\u3059\n        self._metrics_cache = {}\n\n    async def get_metric(self, name: str) -&gt; float:\n        if name in self._metrics_cache:\n            if time.time() - self._metrics_cache[name][\"timestamp\"] &lt; 1.0:\n                return self._metrics_cache[name][\"value\"]\n\n        value = await self._collect_metric(name)\n        self._metrics_cache[name] = {\n            \"value\": value,\n            \"timestamp\": time.time()\n        }\n        return value\n</code></pre>"},{"location":"ja/api/monitoring/#_17","title":"\u95a2\u9023\u9805\u76ee","text":"<ul> <li>\u57fa\u672c\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u30b3\u30a2API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u30a4\u30d9\u30f3\u30c8API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30ed\u30ae\u30f3\u30b0\u7d71\u5408\u306b\u3064\u3044\u3066\u306f\u30ed\u30ae\u30f3\u30b0API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30b5\u30f3\u30d7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u53c2\u7167</li> </ul>"},{"location":"ja/api/optimization/","title":"\u6700\u9069\u5316API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<p><code>mtaio.optimization</code>\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u975e\u540c\u671f\u64cd\u4f5c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6700\u9069\u5316\u3059\u308b\u305f\u3081\u306e\u30c4\u30fc\u30eb\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/optimization/#_1","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.optimization import Optimizer, Parameter, ParameterType\n\n# \u6700\u9069\u5316\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b9a\u7fa9\nparameters = [\n    Parameter(\n        name=\"batch_size\",\n        type=ParameterType.INTEGER,\n        min_value=1,\n        max_value=100\n    ),\n    Parameter(\n        name=\"workers\",\n        type=ParameterType.INTEGER,\n        min_value=1,\n        max_value=10\n    ),\n    Parameter(\n        name=\"strategy\",\n        type=ParameterType.CATEGORICAL,\n        choices=[\"fast\", \"balanced\", \"thorough\"]\n    )\n]\n\n# \u76ee\u7684\u95a2\u6570\u306e\u5b9a\u7fa9\nasync def objective(params: dict) -&gt; float:\n    # \u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u5b9f\u884c\n    result = await run_benchmark(\n        batch_size=params[\"batch_size\"],\n        workers=params[\"workers\"],\n        strategy=params[\"strategy\"]\n    )\n    return result.execution_time\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6700\u9069\u5316\noptimizer = Optimizer()\nresult = await optimizer.optimize(parameters, objective)\nprint(f\"\u6700\u9069\u306a\u30d1\u30e9\u30e1\u30fc\u30bf: {result.parameters}\")\n</code></pre>"},{"location":"ja/api/optimization/#_2","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class Optimizer:\n    def __init__(\n        self,\n        strategy: Optional[OptimizationStrategy] = None\n    ):\n        \"\"\"\n        \u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u30fc\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n        Args:\n            strategy: \u4f7f\u7528\u3059\u308b\u6700\u9069\u5316\u6226\u7565\uff08\u30c7\u30d5\u30a9\u30eb\u30c8: RandomSearchStrategy\uff09\n        \"\"\"\n\n    async def optimize(\n        self,\n        parameters: List[Parameter],\n        objective: Callable[[Dict[str, Any]], Awaitable[float]],\n        iterations: int = 100,\n        timeout: Optional[float] = None,\n    ) -&gt; OptimizationResult:\n        \"\"\"\n        \u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u9069\u5316\u3057\u307e\u3059\u3002\n\n        Args:\n            parameters: \u6700\u9069\u5316\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\n            objective: \u6700\u5c0f\u5316\u3059\u308b\u76ee\u7684\u95a2\u6570\n            iterations: \u53cd\u5fa9\u56de\u6570\n            timeout: \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\uff08\u79d2\uff09\n\n        Returns:\n            \u6700\u9069\u5316\u7d50\u679c\n        \"\"\"\n</code></pre>"},{"location":"ja/api/optimization/#_3","title":"\u30d1\u30e9\u30e1\u30fc\u30bf","text":""},{"location":"ja/api/optimization/#_4","title":"\u30d1\u30e9\u30e1\u30fc\u30bf\u5b9a\u7fa9","text":"<pre><code>@dataclass\nclass Parameter:\n    name: str\n    type: ParameterType\n    min_value: Optional[Union[int, float]] = None\n    max_value: Optional[Union[int, float]] = None\n    choices: Optional[List[Any]] = None\n    step: Optional[Union[int, float]] = None\n\nclass ParameterType(Enum):\n    INTEGER = auto()      # \u6574\u6570\u5024\n    FLOAT = auto()        # \u6d6e\u52d5\u5c0f\u6570\u70b9\u5024\n    CATEGORICAL = auto()  # \u30ab\u30c6\u30b4\u30ea\u5024\n</code></pre>"},{"location":"ja/api/optimization/#_5","title":"\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u4f8b","text":"<pre><code># \u6570\u5024\u30d1\u30e9\u30e1\u30fc\u30bf\nbatch_size = Parameter(\n    name=\"batch_size\",\n    type=ParameterType.INTEGER,\n    min_value=1,\n    max_value=1000,\n    step=10  # \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30b9\u30c6\u30c3\u30d7\u30b5\u30a4\u30ba\n)\n\nlearning_rate = Parameter(\n    name=\"learning_rate\",\n    type=ParameterType.FLOAT,\n    min_value=0.0001,\n    max_value=0.1\n)\n\n# \u30ab\u30c6\u30b4\u30ea\u30d1\u30e9\u30e1\u30fc\u30bf\nalgorithm = Parameter(\n    name=\"algorithm\",\n    type=ParameterType.CATEGORICAL,\n    choices=[\"sgd\", \"adam\", \"rmsprop\"]\n)\n</code></pre>"},{"location":"ja/api/optimization/#_6","title":"\u6700\u9069\u5316\u6226\u7565","text":""},{"location":"ja/api/optimization/#_7","title":"\u5229\u7528\u53ef\u80fd\u306a\u6226\u7565","text":""},{"location":"ja/api/optimization/#gridsearchstrategy","title":"GridSearchStrategy","text":"<p>\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u4f53\u7cfb\u7684\u306b\u63a2\u7d22\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.optimization import GridSearchStrategy\n\noptimizer = Optimizer(strategy=GridSearchStrategy())\nresult = await optimizer.optimize(parameters, objective)\n</code></pre>"},{"location":"ja/api/optimization/#randomsearchstrategy","title":"RandomSearchStrategy","text":"<p>\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.optimization import RandomSearchStrategy\n\noptimizer = Optimizer(strategy=RandomSearchStrategy())\nresult = await optimizer.optimize(parameters, objective)\n</code></pre>"},{"location":"ja/api/optimization/#bayesianstrategy","title":"BayesianStrategy","text":"<p>\u30d9\u30a4\u30ba\u6700\u9069\u5316\u3092\u4f7f\u7528\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u63a2\u7d22\u3057\u307e\u3059\u3002</p> <pre><code>from mtaio.optimization import BayesianStrategy\n\noptimizer = Optimizer(\n    strategy=BayesianStrategy(\n        exploration_rate=0.1\n    )\n)\nresult = await optimizer.optimize(parameters, objective)\n</code></pre>"},{"location":"ja/api/optimization/#_8","title":"\u30ab\u30b9\u30bf\u30e0\u6226\u7565","text":"<p>\u30ab\u30b9\u30bf\u30e0\u6700\u9069\u5316\u6226\u7565\u306e\u5b9f\u88c5:</p> <pre><code>class CustomStrategy(OptimizationStrategy):\n    async def optimize(\n        self,\n        parameters: List[Parameter],\n        objective: Callable[[Dict[str, Any]], Awaitable[float]],\n        iterations: int,\n    ) -&gt; OptimizationResult:\n        best_params = None\n        best_score = float(\"inf\")\n        history = []\n\n        for _ in range(iterations):\n            # \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u751f\u6210\n            params = self.generate_params(parameters)\n\n            # \u76ee\u7684\u95a2\u6570\u306e\u8a55\u4fa1\n            score = await objective(params)\n            history.append({\"parameters\": params, \"score\": score})\n\n            # \u6700\u826f\u7d50\u679c\u306e\u66f4\u65b0\n            if score &lt; best_score:\n                best_score = score\n                best_params = params\n\n        return OptimizationResult(\n            parameters=best_params,\n            score=best_score,\n            history=history,\n            iterations=iterations\n        )\n</code></pre>"},{"location":"ja/api/optimization/#_9","title":"\u7d50\u679c","text":""},{"location":"ja/api/optimization/#optimizationresult","title":"OptimizationResult","text":"<p>\u6700\u9069\u5316\u7d50\u679c\u306e\u30b3\u30f3\u30c6\u30ca:</p> <pre><code>@dataclass\nclass OptimizationResult:\n    parameters: Dict[str, Any]  # \u898b\u3064\u304b\u3063\u305f\u6700\u9069\u30d1\u30e9\u30e1\u30fc\u30bf\n    score: float                # \u6700\u826f\u306e\u76ee\u7684\u95a2\u6570\u30b9\u30b3\u30a2\n    history: List[Dict[str, Any]]  # \u6700\u9069\u5316\u306e\u5c65\u6b74\n    iterations: int             # \u5b9f\u884c\u3055\u308c\u305f\u7dcf\u53cd\u5fa9\u56de\u6570\n    elapsed_time: float        # \u8981\u3057\u305f\u7dcf\u6642\u9593\n    improvement: float         # \u521d\u671f\u30b9\u30b3\u30a2\u304b\u3089\u306e\u6539\u5584\u5ea6\n</code></pre>"},{"location":"ja/api/optimization/#_10","title":"\u9ad8\u5ea6\u306a\u6a5f\u80fd","text":""},{"location":"ja/api/optimization/#_11","title":"\u30d1\u30e9\u30e1\u30fc\u30bf\u7a7a\u9593\u306e\u5236\u7d04","text":"<pre><code>from mtaio.optimization import Optimizer, Parameter\n\n# \u4f9d\u5b58\u95a2\u4fc2\u306e\u3042\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b9a\u7fa9\nasync def objective(params: dict) -&gt; float:\n    if params[\"use_feature\"] and params[\"feature_count\"] &gt; 0:\n        # \u6307\u5b9a\u3055\u308c\u305f\u6570\u306e\u6a5f\u80fd\u3092\u4f7f\u7528\n        pass\n    return score\n\nparameters = [\n    Parameter(\n        name=\"use_feature\",\n        type=ParameterType.CATEGORICAL,\n        choices=[True, False]\n    ),\n    Parameter(\n        name=\"feature_count\",\n        type=ParameterType.INTEGER,\n        min_value=0,\n        max_value=10\n    )\n]\n</code></pre>"},{"location":"ja/api/optimization/#_12","title":"\u591a\u76ee\u7684\u6700\u9069\u5316","text":"<pre><code>async def multi_objective(params: dict) -&gt; float:\n    # \u8907\u6570\u306e\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u8a08\u7b97\n    latency = await measure_latency(params)\n    memory = await measure_memory(params)\n\n    # \u91cd\u307f\u4ed8\u3051\u3057\u3066\u30e1\u30c8\u30ea\u30af\u30b9\u3092\u7d50\u5408\n    return 0.7 * latency + 0.3 * memory\n</code></pre>"},{"location":"ja/api/optimization/#_13","title":"\u7d71\u5408\u4f8b","text":""},{"location":"ja/api/optimization/#_14","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316","text":"<pre><code>from mtaio.optimization import Optimizer\nfrom mtaio.core import TaskExecutor\n\nclass PerformanceOptimizer:\n    def __init__(self):\n        self.optimizer = Optimizer()\n        self.executor = TaskExecutor()\n\n    async def optimize_performance(self):\n        parameters = [\n            Parameter(\"concurrency\", ParameterType.INTEGER, 1, 20),\n            Parameter(\"batch_size\", ParameterType.INTEGER, 1, 1000)\n        ]\n\n        async def objective(params):\n            async with self.executor:\n                start_time = time.time()\n                await self.executor.gather(\n                    *tasks,\n                    limit=params[\"concurrency\"]\n                )\n                return time.time() - start_time\n\n        return await self.optimizer.optimize(parameters, objective)\n</code></pre>"},{"location":"ja/api/optimization/#_15","title":"\u30ea\u30bd\u30fc\u30b9\u6700\u9069\u5316","text":"<pre><code>from mtaio.optimization import Optimizer\nfrom mtaio.monitoring import ResourceMonitor\n\nclass ResourceOptimizer:\n    def __init__(self):\n        self.optimizer = Optimizer()\n        self.monitor = ResourceMonitor()\n\n    async def optimize_resources(self):\n        parameters = [\n            Parameter(\"memory_limit\", ParameterType.INTEGER, 100, 1000),\n            Parameter(\"cpu_limit\", ParameterType.INTEGER, 1, 8)\n        ]\n\n        async def objective(params):\n            # \u30ea\u30bd\u30fc\u30b9\u306e\u8a2d\u5b9a\n            await self.configure_limits(params)\n\n            # \u30ef\u30fc\u30af\u30ed\u30fc\u30c9\u306e\u5b9f\u884c\n            await self.run_workload()\n\n            # \u30ea\u30bd\u30fc\u30b9\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u53d6\u5f97\n            stats = await self.monitor.get_current_stats()\n            return stats.memory.used / stats.memory.total\n\n        return await self.optimizer.optimize(parameters, objective)\n</code></pre>"},{"location":"ja/api/optimization/#_16","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"ja/api/optimization/#_17","title":"\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a","text":"<pre><code># \u59a5\u5f53\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u7bc4\u56f2\u306e\u5b9a\u7fa9\nparameters = [\n    Parameter(\n        name=\"timeout\",\n        type=ParameterType.FLOAT,\n        min_value=0.1,\n        max_value=10.0,\n        step=0.1  # \u7d30\u304b\u3059\u304e\u308b\u7c92\u5ea6\u3092\u907f\u3051\u308b\n    )\n]\n\n# \u9069\u5207\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u578b\u306e\u4f7f\u7528\ncategorical_param = Parameter(\n    name=\"strategy\",\n    type=ParameterType.CATEGORICAL,\n    choices=[\"fast\", \"balanced\"]  # \u9650\u5b9a\u3055\u308c\u305f\u9078\u629e\u80a2\n)\n</code></pre>"},{"location":"ja/api/optimization/#_18","title":"\u76ee\u7684\u95a2\u6570\u306e\u8a2d\u8a08","text":"<pre><code>async def robust_objective(params: dict) -&gt; float:\n    try:\n        # \u8907\u6570\u56de\u306e\u8a55\u4fa1\u5b9f\u884c\n        scores = []\n        for _ in range(3):\n            score = await evaluate(params)\n            scores.append(score)\n\n        # \u5e73\u5747\u30b9\u30b3\u30a2\u3092\u8fd4\u3059\n        return statistics.mean(scores)\n    except Exception as e:\n        # \u30a8\u30e9\u30fc\u3092\u9069\u5207\u306b\u51e6\u7406\n        logger.error(f\"\u8a55\u4fa1\u306b\u5931\u6557\u3057\u307e\u3057\u305f: {e}\")\n        return float(\"inf\")\n</code></pre>"},{"location":"ja/api/optimization/#_19","title":"\u95a2\u9023\u9805\u76ee","text":"<ul> <li>\u57fa\u672c\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u30b3\u30a2API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306b\u3064\u3044\u3066\u306f\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30b5\u30f3\u30d7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u53c2\u7167</li> </ul>"},{"location":"ja/api/protocols/","title":"\u30d7\u30ed\u30c8\u30b3\u30ebAPI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<p><code>mtaio.protocols</code>\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001ASGI\u3001MQTT\u3001\u30e1\u30fc\u30eb\u30d7\u30ed\u30c8\u30b3\u30eb\u306a\u3069\u3001\u69d8\u3005\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u5b9f\u88c5\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/protocols/#asgi","title":"ASGI\u30d7\u30ed\u30c8\u30b3\u30eb","text":""},{"location":"ja/api/protocols/#asgiapplication","title":"ASGIApplication","text":"<p>\u57fa\u672c\u7684\u306aASGI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u88c5\u3067\u3059\u3002</p> <pre><code>from mtaio.protocols import ASGIApplication, Request, Response\n\nclass App(ASGIApplication):\n    async def handle_request(self, request: Request) -&gt; Response:\n        if request.path == \"/\":\n            return Response.json({\n                \"message\": \"mtaio\u3078\u3088\u3046\u3053\u305d\"\n            })\n        return Response.text(\"Not Found\", status_code=404)\n\napp = App()\n</code></pre>"},{"location":"ja/api/protocols/#request","title":"Request","text":"<p>ASGI\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30e9\u30c3\u30d1\u30fc\u3002</p> <pre><code>class Request:\n    @property\n    def method(self) -&gt; str:\n        \"\"\"HTTP\u30e1\u30bd\u30c3\u30c9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n\n    @property\n    def path(self) -&gt; str:\n        \"\"\"\u30ea\u30af\u30a8\u30b9\u30c8\u30d1\u30b9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n\n    @property\n    def query_string(self) -&gt; bytes:\n        \"\"\"\u751f\u306e\u30af\u30a8\u30ea\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n\n    @property\n    def headers(self) -&gt; Dict[str, str]:\n        \"\"\"\u30ea\u30af\u30a8\u30b9\u30c8\u30d8\u30c3\u30c0\u30fc\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n\n    async def body(self) -&gt; bytes:\n        \"\"\"\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n\n    async def json(self) -&gt; Any:\n        \"\"\"JSON\u30c7\u30b3\u30fc\u30c9\u3055\u308c\u305f\u30dc\u30c7\u30a3\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n\n    async def form(self) -&gt; Dict[str, str]:\n        \"\"\"\u89e3\u6790\u3055\u308c\u305f\u30d5\u30a9\u30fc\u30e0\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n</code></pre>"},{"location":"ja/api/protocols/#response","title":"Response","text":"<p>ASGI\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30e9\u30c3\u30d1\u30fc\u3002</p> <pre><code>class Response:\n    @classmethod\n    def text(\n        cls,\n        content: str,\n        status_code: int = 200,\n        headers: Optional[Dict[str, str]] = None\n    ) -&gt; \"Response\":\n        \"\"\"\u30c6\u30ad\u30b9\u30c8\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\"\"\"\n\n    @classmethod\n    def json(\n        cls,\n        content: Any,\n        status_code: int = 200,\n        headers: Optional[Dict[str, str]] = None\n    ) -&gt; \"Response\":\n        \"\"\"JSON\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\"\"\"\n\n    @classmethod\n    def html(\n        cls,\n        content: str,\n        status_code: int = 200,\n        headers: Optional[Dict[str, str]] = None\n    ) -&gt; \"Response\":\n        \"\"\"HTML\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\"\"\"\n</code></pre>"},{"location":"ja/api/protocols/#router","title":"Router","text":"<p>URL\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u5b9f\u88c5\u3067\u3059\u3002</p> <pre><code>from mtaio.protocols import Router\n\nrouter = Router()\n\n@router.route(\"/users/{user_id}\")\nasync def get_user(request, user_id: str):\n    return Response.json({\n        \"user_id\": user_id\n    })\n\n@router.route(\"/users\", methods=[\"POST\"])\nasync def create_user(request):\n    data = await request.json()\n    return Response.json(data, status_code=201)\n</code></pre>"},{"location":"ja/api/protocols/#mqtt","title":"MQTT\u30d7\u30ed\u30c8\u30b3\u30eb","text":""},{"location":"ja/api/protocols/#mqttclient","title":"MQTTClient","text":"<p>MQTT\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u5b9f\u88c5\u3067\u3059\u3002</p> <pre><code>from mtaio.protocols import MQTTClient, QoS\n\n# \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u4f5c\u6210\nclient = MQTTClient()\n\n# \u30e1\u30c3\u30bb\u30fc\u30b8\u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u8a2d\u5b9a\n@client.on_message\nasync def handle_message(message):\n    print(f\"\u53d7\u4fe1: {message.payload}\")\n\n# \u63a5\u7d9a\u3068\u30b5\u30d6\u30b9\u30af\u30e9\u30a4\u30d6\nasync with client:\n    await client.connect(\"localhost\", 1883)\n    await client.subscribe(\"test/topic\", qos=QoS.AT_LEAST_ONCE)\n\n    # \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u914d\u4fe1\n    await client.publish(\n        \"test/topic\",\n        \"MQTT\u304b\u3089\u3053\u3093\u306b\u3061\u306f\",\n        qos=QoS.AT_LEAST_ONCE\n    )\n</code></pre>"},{"location":"ja/api/protocols/#mqttmessage","title":"MQTTMessage","text":"<p>MQTT\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30b3\u30f3\u30c6\u30ca\u3067\u3059\u3002</p> <pre><code>@dataclass\nclass MQTTMessage:\n    topic: str\n    payload: Union[str, bytes]\n    qos: QoS = QoS.AT_MOST_ONCE\n    retain: bool = False\n    message_id: Optional[int] = None\n</code></pre>"},{"location":"ja/api/protocols/#qos","title":"QoS","text":"<p>MQTT\u306e\u30b5\u30fc\u30d3\u30b9\u54c1\u8cea\uff08QoS\uff09\u30ec\u30d9\u30eb\u3067\u3059\u3002</p> <pre><code>class QoS(enum.IntEnum):\n    AT_MOST_ONCE = 0  # \u6700\u59271\u56de\n    AT_LEAST_ONCE = 1 # \u6700\u4f4e1\u56de\n    EXACTLY_ONCE = 2  # \u6b63\u78ba\u306b1\u56de\n</code></pre>"},{"location":"ja/api/protocols/#_1","title":"\u30e1\u30fc\u30eb\u30d7\u30ed\u30c8\u30b3\u30eb","text":""},{"location":"ja/api/protocols/#asyncimapclient","title":"AsyncIMAPClient","text":"<p>\u975e\u540c\u671fIMAP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u5b9f\u88c5\u3067\u3059\u3002</p> <pre><code>from mtaio.protocols import AsyncIMAPClient\n\nasync with AsyncIMAPClient() as client:\n    # \u63a5\u7d9a\u3068\u30ed\u30b0\u30a4\u30f3\n    await client.connect(\"imap.example.com\", 993)\n    await client.login(\"user@example.com\", \"password\")\n\n    # \u30e1\u30fc\u30eb\u30dc\u30c3\u30af\u30b9\u306e\u9078\u629e\n    await client.select_mailbox(\"INBOX\")\n\n    # \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u53d6\u5f97\n    messages = await client.fetch_messages(\n        criteria=\"UNSEEN\",\n        limit=10\n    )\n</code></pre>"},{"location":"ja/api/protocols/#asyncsmtpclient","title":"AsyncSMTPClient","text":"<p>\u975e\u540c\u671fSMTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u5b9f\u88c5\u3067\u3059\u3002</p> <pre><code>from mtaio.protocols import AsyncSMTPClient, MailMessage, Attachment\n\nasync with AsyncSMTPClient() as client:\n    # \u63a5\u7d9a\u3068\u30ed\u30b0\u30a4\u30f3\n    await client.connect(\"smtp.example.com\", 587)\n    await client.login(\"user@example.com\", \"password\")\n\n    # \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u4f5c\u6210\n    message = MailMessage(\n        subject=\"\u30c6\u30b9\u30c8\u30e1\u30c3\u30bb\u30fc\u30b8\",\n        sender=\"sender@example.com\",\n        recipients=[\"recipient@example.com\"],\n        text_content=\"mtaio\u304b\u3089\u3053\u3093\u306b\u3061\u306f\",\n        html_content=\"&lt;h1&gt;mtaio\u304b\u3089\u3053\u3093\u306b\u3061\u306f&lt;/h1&gt;\"\n    )\n\n    # \u6dfb\u4ed8\u30d5\u30a1\u30a4\u30eb\u306e\u8ffd\u52a0\n    attachment = Attachment(\n        filename=\"document.pdf\",\n        content=pdf_content,\n        content_type=\"application/pdf\"\n    )\n    message.attachments.append(attachment)\n\n    # \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1\n    await client.send_message(message)\n</code></pre>"},{"location":"ja/api/protocols/#_2","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"ja/api/protocols/#asgi_1","title":"ASGI\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3","text":"<pre><code># \u5171\u901a\u6a5f\u80fd\u306b\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3092\u4f7f\u7528\nclass LoggingMiddleware(ASGIMiddleware):\n    async def __call__(self, scope, receive, send):\n        start_time = time.time()\n        await self.app(scope, receive, send)\n        duration = time.time() - start_time\n        logger.info(f\"\u30ea\u30af\u30a8\u30b9\u30c8\u51e6\u7406\u6642\u9593: {duration:.2f}\u79d2\")\n\n# \u30a8\u30e9\u30fc\u3092\u9069\u5207\u306b\u51e6\u7406\nclass App(ASGIApplication):\n    async def handle_error(self, error: Exception, send):\n        if isinstance(error, ValidationError):\n            response = Response.json(\n                {\"error\": str(error)},\n                status_code=400\n            )\n        else:\n            response = Response.json(\n                {\"error\": \"\u5185\u90e8\u30b5\u30fc\u30d0\u30fc\u30a8\u30e9\u30fc\"},\n                status_code=500\n            )\n        await response(send)\n</code></pre>"},{"location":"ja/api/protocols/#mqtt_1","title":"MQTT\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3","text":"<pre><code># \u4fe1\u983c\u6027\u306e\u3042\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u5b9f\u88c5\nclass ReliableMQTTClient(MQTTClient):\n    async def reliable_publish(\n        self,\n        topic: str,\n        payload: str,\n        retries: int = 3\n    ):\n        for attempt in range(retries):\n            try:\n                await self.publish(\n                    topic,\n                    payload,\n                    qos=QoS.EXACTLY_ONCE\n                )\n                return\n            except MQTTError:\n                if attempt == retries - 1:\n                    raise\n                await asyncio.sleep(1)\n</code></pre>"},{"location":"ja/api/protocols/#_3","title":"\u30e1\u30fc\u30eb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3","text":"<pre><code># \u6dfb\u4ed8\u30d5\u30a1\u30a4\u30eb\u306e\u52b9\u7387\u7684\u306a\u51e6\u7406\nclass MailHandler:\n    def __init__(self):\n        self.imap = AsyncIMAPClient()\n        self.smtp = AsyncSMTPClient()\n\n    async def forward_with_attachments(\n        self,\n        message: MailMessage,\n        forward_to: str\n    ):\n        # \u6dfb\u4ed8\u30d5\u30a1\u30a4\u30eb\u306e\u4e26\u5217\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n        tasks = [\n            self.download_attachment(att)\n            for att in message.attachments\n        ]\n        attachments = await asyncio.gather(*tasks)\n\n        # \u65b0\u3057\u3044\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u4f5c\u6210\n        forward = MailMessage(\n            subject=f\"\u8ee2\u9001: {message.subject}\",\n            sender=self.smtp.username,\n            recipients=[forward_to],\n            text_content=message.text_content,\n            attachments=attachments\n        )\n\n        await self.smtp.send_message(forward)\n</code></pre>"},{"location":"ja/api/protocols/#_4","title":"\u30a8\u30e9\u30fc\u51e6\u7406","text":"<pre><code>from mtaio.exceptions import (\n    ProtocolError,\n    ASGIError,\n    MQTTError,\n    MailError\n)\n\n# ASGI\u30a8\u30e9\u30fc\u51e6\u7406\ntry:\n    await app(scope, receive, send)\nexcept ASGIError as e:\n    logger.error(f\"ASGI\u30a8\u30e9\u30fc: {e}\")\n    # \u30a8\u30e9\u30fc\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u51e6\u7406\n\n# MQTT\u30a8\u30e9\u30fc\u51e6\u7406\ntry:\n    await client.publish(topic, message)\nexcept MQTTError as e:\n    logger.error(f\"MQTT\u30a8\u30e9\u30fc: {e}\")\n    # \u30ea\u30c8\u30e9\u30a4\u30ed\u30b8\u30c3\u30af\u306e\u5b9f\u88c5\n\n# \u30e1\u30fc\u30eb\u30a8\u30e9\u30fc\u51e6\u7406\ntry:\n    await smtp.send_message(message)\nexcept MailError as e:\n    logger.error(f\"\u30e1\u30fc\u30eb\u9001\u4fe1\u30a8\u30e9\u30fc: {e}\")\n    # \u518d\u8a66\u884c\u306e\u305f\u3081\u306e\u30ad\u30e5\u30fc\u767b\u9332\n</code></pre>"},{"location":"ja/api/protocols/#_5","title":"\u95a2\u9023\u9805\u76ee","text":"<ul> <li>\u57fa\u672c\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u30b3\u30a2API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u30a4\u30d9\u30f3\u30c8API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30b5\u30f3\u30d7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u53c2\u7167</li> </ul>"},{"location":"ja/api/resources/","title":"\u30ea\u30bd\u30fc\u30b9API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<p><code>mtaio.resources</code>\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u30ec\u30fc\u30c8\u5236\u9650\u3001\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3001\u540c\u6642\u5b9f\u884c\u5236\u5fa1\u3092\u542b\u3080\u30b7\u30b9\u30c6\u30e0\u30ea\u30bd\u30fc\u30b9\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/resources/#_1","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.resources import RateLimiter\n\n# \u30ec\u30fc\u30c8\u5236\u9650\u306e\u4f5c\u6210\nlimiter = RateLimiter(10.0)  # 1\u79d2\u3042\u305f\u308a10\u56de\u306e\u64cd\u4f5c\n\n# \u30c7\u30b3\u30ec\u30fc\u30bf\u3068\u3057\u3066\u306e\u4f7f\u7528\n@limiter.limit\nasync def rate_limited_operation():\n    await perform_operation()\n\n# \u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u3068\u3057\u3066\u306e\u4f7f\u7528\nasync def manual_rate_limit():\n    async with limiter:\n        await perform_operation()\n</code></pre>"},{"location":"ja/api/resources/#_2","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class RateLimiter:\n    def __init__(\n        self,\n        rate: float,\n        burst: Optional[int] = None\n    ):\n        \"\"\"\n        \u30ec\u30fc\u30c8\u5236\u9650\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n        Args:\n            rate: 1\u79d2\u3042\u305f\u308a\u306e\u6700\u5927\u64cd\u4f5c\u56de\u6570\n            burst: \u6700\u5927\u30d0\u30fc\u30b9\u30c8\u30b5\u30a4\u30ba\uff08None\u306e\u5834\u5408\u306f\u30ec\u30fc\u30c8\u30d9\u30fc\u30b9\u306e\u30d0\u30fc\u30b9\u30c8\uff09\n        \"\"\"\n\n    async def acquire(self, tokens: int = 1) -&gt; None:\n        \"\"\"\n        \u30ec\u30fc\u30c8\u5236\u9650\u304b\u3089\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n        Args:\n            tokens: \u53d6\u5f97\u3059\u308b\u30c8\u30fc\u30af\u30f3\u6570\n\n        Raises:\n            ResourceLimitError: \u30ec\u30fc\u30c8\u5236\u9650\u3092\u8d85\u904e\u3057\u305f\u5834\u5408\n        \"\"\"\n\n    def limit(\n        self,\n        func: Optional[Callable[..., Awaitable[T]]] = None,\n        *,\n        tokens: int = 1\n    ) -&gt; Callable[..., Awaitable[T]]:\n        \"\"\"\u95a2\u6570\u306b\u30ec\u30fc\u30c8\u5236\u9650\u3092\u9069\u7528\u3059\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u3002\"\"\"\n</code></pre>"},{"location":"ja/api/resources/#timeoutmanager","title":"TimeoutManager","text":"<p>\u975e\u540c\u671f\u64cd\u4f5c\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u5236\u5fa1\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/resources/#_3","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.resources import TimeoutManager\n\nasync def operation_with_timeout():\n    # \u4e00\u9023\u306e\u64cd\u4f5c\u306b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\n    async with TimeoutManager(5.0) as tm:  # 5\u79d2\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\n        result = await tm.run(long_running_operation())\n\n        # \u7279\u5b9a\u306e\u64cd\u4f5c\u306b\u7570\u306a\u308b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\n        result2 = await tm.run(\n            another_operation(),\n            timeout=2.0  # 2\u79d2\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\n        )\n</code></pre>"},{"location":"ja/api/resources/#_4","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class TimeoutManager:\n    def __init__(self, default_timeout: Optional[float] = None):\n        \"\"\"\n        \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n        Args:\n            default_timeout: \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\uff08\u79d2\uff09\n        \"\"\"\n\n    async def run(\n        self,\n        coro: Awaitable[T],\n        *,\n        timeout: Optional[float] = None\n    ) -&gt; T:\n        \"\"\"\n        \u30b3\u30eb\u30fc\u30c1\u30f3\u3092\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u4ed8\u304d\u3067\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n        Args:\n            coro: \u5b9f\u884c\u3059\u308b\u30b3\u30eb\u30fc\u30c1\u30f3\n            timeout: \u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u4e0a\u66f8\u304d\n\n        Returns:\n            \u30b3\u30eb\u30fc\u30c1\u30f3\u306e\u5b9f\u884c\u7d50\u679c\n\n        Raises:\n            TimeoutError: \u64cd\u4f5c\u304c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u305f\u5834\u5408\n        \"\"\"\n</code></pre>"},{"location":"ja/api/resources/#concurrencylimiter","title":"ConcurrencyLimiter","text":"<p>\u540c\u6642\u5b9f\u884c\u64cd\u4f5c\u306e\u6570\u3092\u5236\u5fa1\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/resources/#_5","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.resources import ConcurrencyLimiter\n\n# \u6700\u59275\u3064\u306e\u540c\u6642\u5b9f\u884c\u64cd\u4f5c\u3092\u8a31\u53ef\u3059\u308b\u30ea\u30df\u30c3\u30bf\u30fc\u3092\u4f5c\u6210\nlimiter = ConcurrencyLimiter(5)\n\n@limiter.limit\nasync def concurrent_operation():\n    await process_task()\n\n# \u624b\u52d5\u3067\u306e\u4f7f\u7528\nasync def manual_concurrency():\n    async with limiter:\n        await perform_operation()\n</code></pre>"},{"location":"ja/api/resources/#_6","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class ConcurrencyLimiter:\n    def __init__(self, limit: int):\n        \"\"\"\n        \u540c\u6642\u5b9f\u884c\u5236\u9650\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\n        Args:\n            limit: \u6700\u5927\u540c\u6642\u5b9f\u884c\u6570\n        \"\"\"\n\n    async def acquire(self) -&gt; None:\n        \"\"\"\n        \u5b9f\u884c\u8a31\u53ef\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n        Raises:\n            ResourceLimitError: \u5236\u9650\u3092\u8d85\u904e\u3057\u305f\u5834\u5408\n        \"\"\"\n\n    def limit(\n        self,\n        func: Callable[..., Awaitable[T]]\n    ) -&gt; Callable[..., Awaitable[T]]:\n        \"\"\"\u540c\u6642\u5b9f\u884c\u3092\u5236\u9650\u3059\u308b\u30c7\u30b3\u30ec\u30fc\u30bf\u3002\"\"\"\n</code></pre>"},{"location":"ja/api/resources/#resourcegroup","title":"ResourceGroup","text":"<p>\u8907\u6570\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u4e00\u7dd2\u306b\u7ba1\u7406\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/resources/#_7","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<pre><code>from mtaio.resources import ResourceGroup\n\nasync def manage_resources():\n    group = ResourceGroup()\n\n    # \u30b0\u30eb\u30fc\u30d7\u306b\u30ea\u30bd\u30fc\u30b9\u3092\u8ffd\u52a0\n    rate_limiter = await group.add(RateLimiter(10.0))\n    timeout = await group.add(TimeoutManager(5.0))\n\n    # \u30ea\u30bd\u30fc\u30b9\u306f\u81ea\u52d5\u7684\u306b\u7ba1\u7406\u3055\u308c\u308b\n    async with group:\n        async with timeout:\n            await rate_limiter.acquire()\n            await perform_operation()\n</code></pre>"},{"location":"ja/api/resources/#_8","title":"\u30af\u30e9\u30b9\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<pre><code>class ResourceGroup:\n    async def add(self, resource: Any) -&gt; Any:\n        \"\"\"\n        \u30ea\u30bd\u30fc\u30b9\u3092\u30b0\u30eb\u30fc\u30d7\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n        Args:\n            resource: \u7ba1\u7406\u3059\u308b\u30ea\u30bd\u30fc\u30b9\n\n        Returns:\n            \u8ffd\u52a0\u3055\u308c\u305f\u30ea\u30bd\u30fc\u30b9\n        \"\"\"\n\n    async def remove(self, resource: Any) -&gt; None:\n        \"\"\"\n        \u30ea\u30bd\u30fc\u30b9\u3092\u30b0\u30eb\u30fc\u30d7\u304b\u3089\u524a\u9664\u3057\u307e\u3059\u3002\n\n        Args:\n            resource: \u524a\u9664\u3059\u308b\u30ea\u30bd\u30fc\u30b9\n        \"\"\"\n</code></pre>"},{"location":"ja/api/resources/#_9","title":"\u9ad8\u5ea6\u306a\u6a5f\u80fd","text":""},{"location":"ja/api/resources/#_10","title":"\u9069\u5fdc\u578b\u30ec\u30fc\u30c8\u5236\u9650","text":"<pre><code>from mtaio.resources import RateLimiter\nfrom typing import Dict\n\nclass AdaptiveRateLimiter(RateLimiter):\n    def __init__(self):\n        self.rates: Dict[str, float] = {}\n        self._current_load = 0.0\n\n    async def acquire(self, resource_id: str) -&gt; None:\n        rate = self.rates.get(resource_id, 1.0)\n        if self._current_load &gt; 0.8:  # 80%\u306e\u8ca0\u8377\n            rate *= 0.5  # \u30ec\u30fc\u30c8\u3092\u524a\u6e1b\n        await super().acquire(tokens=1/rate)\n\n    def adjust_rate(self, resource_id: str, load: float) -&gt; None:\n        self._current_load = load\n        if load &gt; 0.9:  # \u9ad8\u8ca0\u8377\n            self.rates[resource_id] *= 0.8\n        elif load &lt; 0.5:  # \u4f4e\u8ca0\u8377\n            self.rates[resource_id] *= 1.2\n</code></pre>"},{"location":"ja/api/resources/#_11","title":"\u30ab\u30b9\u30b1\u30fc\u30c9\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8","text":"<pre><code>from mtaio.resources import TimeoutManager\nfrom contextlib import asynccontextmanager\n\nclass TimeoutController:\n    def __init__(self):\n        self.timeouts = TimeoutManager()\n\n    @asynccontextmanager\n    async def cascading_timeout(self, timeouts: list[float]):\n        \"\"\"\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u4ed8\u304d\u306e\u30ab\u30b9\u30b1\u30fc\u30c9\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u5b9f\u88c5\u3002\"\"\"\n        for timeout in timeouts:\n            try:\n                async with self.timeouts.timeout(timeout):\n                    yield\n                break\n            except TimeoutError:\n                if timeout == timeouts[-1]:\n                    raise\n                continue\n</code></pre>"},{"location":"ja/api/resources/#_12","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"ja/api/resources/#_13","title":"\u30ea\u30bd\u30fc\u30b9\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7","text":"<pre><code>from contextlib import AsyncExitStack\n\nasync def cleanup_resources():\n    async with AsyncExitStack() as stack:\n        # \u30b9\u30bf\u30c3\u30af\u306b\u30ea\u30bd\u30fc\u30b9\u3092\u8ffd\u52a0\n        rate_limiter = await stack.enter_async_context(RateLimiter(10.0))\n        timeout = await stack.enter_async_context(TimeoutManager(5.0))\n\n        # \u30ea\u30bd\u30fc\u30b9\u306f\u81ea\u52d5\u7684\u306b\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3055\u308c\u308b\n</code></pre>"},{"location":"ja/api/resources/#_14","title":"\u30a8\u30e9\u30fc\u51e6\u7406","text":"<pre><code>from mtaio.exceptions import ResourceLimitError, TimeoutError\n\nasync def handle_resource_errors():\n    try:\n        async with TimeoutManager(5.0) as tm:\n            await tm.run(operation())\n    except TimeoutError:\n        logger.error(\"\u64cd\u4f5c\u304c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u307e\u3057\u305f\")\n    except ResourceLimitError as e:\n        logger.error(f\"\u30ea\u30bd\u30fc\u30b9\u5236\u9650\u3092\u8d85\u904e\u3057\u307e\u3057\u305f: {e}\")\n</code></pre>"},{"location":"ja/api/resources/#_15","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316","text":"<ol> <li> <p>\u30ec\u30fc\u30c8\u5236\u9650\u6226\u7565 <pre><code># \u4fdd\u8b77\u3068\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u30d0\u30e9\u30f3\u30b9\u3092\u53d6\u308b\nrate_limiter = RateLimiter(\n    rate=100.0,    # 1\u79d2\u3042\u305f\u308a100\u64cd\u4f5c\n    burst=20       # 20\u64cd\u4f5c\u306e\u30d0\u30fc\u30b9\u30c8\u3092\u8a31\u53ef\n)\n</code></pre></p> </li> <li> <p>\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u8a2d\u5b9a <pre><code># \u9069\u5207\u306a\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\ntimeout_manager = TimeoutManager(\n    default_timeout=30.0  # \u30c7\u30d5\u30a9\u30eb\u30c830\u79d2\n)\n</code></pre></p> </li> <li> <p>\u540c\u6642\u5b9f\u884c\u5236\u5fa1 <pre><code># \u30b7\u30b9\u30c6\u30e0\u5bb9\u91cf\u306b\u57fa\u3065\u3044\u3066\u540c\u6642\u5b9f\u884c\u3092\u5236\u9650\nconcurrency_limiter = ConcurrencyLimiter(\n    limit=cpu_count() * 2  # CPU\u30b3\u30a2\u3042\u305f\u308a2\u64cd\u4f5c\n)\n</code></pre></p> </li> </ol>"},{"location":"ja/api/resources/#_16","title":"\u30a8\u30e9\u30fc\u51e6\u7406\u306e\u4f8b","text":"<pre><code>from mtaio.exceptions import (\n    ResourceError,\n    ResourceLimitError,\n    TimeoutError\n)\n\nasync def handle_errors():\n    try:\n        async with RateLimiter(10.0) as limiter:\n            await limiter.acquire()\n\n    except ResourceLimitError:\n        # \u30ec\u30fc\u30c8\u5236\u9650\u8d85\u904e\u306e\u51e6\u7406\n        logger.warning(\"\u30ec\u30fc\u30c8\u5236\u9650\u3092\u8d85\u904e\u3057\u307e\u3057\u305f\")\n        await asyncio.sleep(1)\n\n    except TimeoutError:\n        # \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u51e6\u7406\n        logger.error(\"\u64cd\u4f5c\u304c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u307e\u3057\u305f\")\n\n    except ResourceError as e:\n        # \u4e00\u822c\u7684\u306a\u30ea\u30bd\u30fc\u30b9\u30a8\u30e9\u30fc\u306e\u51e6\u7406\n        logger.error(f\"\u30ea\u30bd\u30fc\u30b9\u30a8\u30e9\u30fc: {e}\")\n</code></pre>"},{"location":"ja/api/resources/#_17","title":"\u7d71\u5408\u4f8b","text":""},{"location":"ja/api/resources/#web","title":"Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3","text":"<pre><code>from mtaio.resources import RateLimiter, TimeoutManager\n\nclass RateLimitedAPI:\n    def __init__(self):\n        self.rate_limiter = RateLimiter(100.0)  # 1\u79d2\u3042\u305f\u308a100\u30ea\u30af\u30a8\u30b9\u30c8\n        self.timeout = TimeoutManager(5.0)      # 5\u79d2\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\n\n    async def handle_request(self, request):\n        async with self.timeout:\n            await self.rate_limiter.acquire()\n            return await process_request(request)\n</code></pre>"},{"location":"ja/api/resources/#_18","title":"\u30bf\u30b9\u30af\u51e6\u7406","text":"<pre><code>from mtaio.resources import ConcurrencyLimiter\n\nclass TaskProcessor:\n    def __init__(self):\n        self.limiter = ConcurrencyLimiter(10)  # 10\u500b\u306e\u540c\u6642\u30bf\u30b9\u30af\n\n    async def process_tasks(self, tasks: list):\n        async with self.limiter:\n            results = []\n            for task in tasks:\n                result = await self.process_task(task)\n                results.append(result)\n            return results\n</code></pre>"},{"location":"ja/api/resources/#_19","title":"\u95a2\u9023\u9805\u76ee","text":"<ul> <li>\u57fa\u672c\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u30b3\u30a2API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30a4\u30d9\u30f3\u30c8\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u30a4\u30d9\u30f3\u30c8API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30b5\u30f3\u30d7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u53c2\u7167</li> </ul>"},{"location":"ja/api/typing/","title":"\u578b\u5b9a\u7fa9API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9","text":"<p><code>mtaio.typing</code>\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u3001\u3088\u308a\u826f\u3044\u30b3\u30fc\u30c9\u88dc\u5b8c\u3068\u9759\u7684\u578b\u30c1\u30a7\u30c3\u30af\u3092\u53ef\u80fd\u306b\u3059\u308b\u3001mtaio\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u5168\u4f53\u3067\u4f7f\u7528\u3055\u308c\u308b\u578b\u5b9a\u7fa9\u3068\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002</p>"},{"location":"ja/api/typing/#_1","title":"\u57fa\u672c\u7684\u306a\u578b","text":""},{"location":"ja/api/typing/#_2","title":"\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u5909\u6570","text":"<pre><code>from mtaio.typing import T, T_co, T_contra, K, V\n\n# \u57fa\u672c\u7684\u306a\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u5909\u6570\nT = TypeVar(\"T\")               # \u4e0d\u5909\u578b\u5909\u6570\nT_co = TypeVar(\"T_co\", covariant=True)       # \u5171\u5909\u578b\u5909\u6570\nT_contra = TypeVar(\"T_contra\", contravariant=True)  # \u53cd\u5171\u5909\u578b\u5909\u6570\nK = TypeVar(\"K\")               # \u30ad\u30fc\u578b\u5909\u6570\nV = TypeVar(\"V\")               # \u5024\u578b\u5909\u6570\n</code></pre>"},{"location":"ja/api/typing/#_3","title":"\u4e00\u822c\u7684\u306a\u578b\u30a8\u30a4\u30ea\u30a2\u30b9","text":"<pre><code>from mtaio.typing import (\n    JSON,\n    PathLike,\n    TimeValue,\n    Primitive\n)\n\n# JSON\u4e92\u63db\u306e\u578b\nJSON = Union[Dict[str, Any], List[Any], str, int, float, bool, None]\n\n# \u30d1\u30b9\u5f62\u5f0f\u306e\u578b\nPathLike = Union[str, Path]\n\n# \u6642\u9593\u5024\u306e\u578b\nTimeValue = Union[int, float, timedelta]\n\n# \u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u578b\nPrimitive = Union[str, int, float, bool, None]\n</code></pre>"},{"location":"ja/api/typing/#_4","title":"\u95a2\u6570\u578b","text":""},{"location":"ja/api/typing/#_5","title":"\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u578b","text":"<pre><code>from mtaio.typing import (\n    Callback,\n    AsyncCallback,\n    ErrorCallback,\n    AsyncErrorCallback\n)\n\n# \u540c\u671f\u304a\u3088\u3073\u975e\u540c\u671f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\nCallback = Callable[..., Any]\nAsyncCallback = Callable[..., Awaitable[Any]]\n\n# \u30a8\u30e9\u30fc\u51e6\u7406\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\nErrorCallback = Callable[[Exception], Any]\nAsyncErrorCallback = Callable[[Exception], Awaitable[Any]]\n\n# \u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\nCleanupCallback = Callable[[], Any]\nAsyncCleanupCallback = Callable[[], Awaitable[Any]]\n</code></pre>"},{"location":"ja/api/typing/#_6","title":"\u95a2\u6570\u578b\u5b9a\u7fa9","text":"<pre><code>from mtaio.typing import (\n    SyncFunc,\n    AsyncFunc,\n    AsyncCallable,\n    CoroFunc,\n    AnyFunc,\n    Decorator\n)\n\n# \u95a2\u6570\u578b\nSyncFunc = Callable[..., T]\nAsyncFunc = Callable[..., Awaitable[T]]\nAsyncCallable = Callable[..., Awaitable[T]]\nCoroFunc = TypeVar('CoroFunc', bound=AsyncCallable[Any])\n\n# \u7d44\u307f\u5408\u308f\u305b\u305f\u95a2\u6570\u578b\nAnyFunc = Union[SyncFunc[T], AsyncFunc[T]]\n\n# \u30c7\u30b3\u30ec\u30fc\u30bf\u578b\nDecorator = Callable[[AnyFunc[T]], AnyFunc[T]]\n</code></pre>"},{"location":"ja/api/typing/#_7","title":"\u30d7\u30ed\u30c8\u30b3\u30eb\u5b9a\u7fa9","text":""},{"location":"ja/api/typing/#_8","title":"\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406","text":"<pre><code>from mtaio.typing import Resource, ResourceManager\n\n@runtime_checkable\nclass Resource(Protocol):\n    \"\"\"\u30ea\u30bd\u30fc\u30b9\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3002\"\"\"\n\n    async def acquire(self) -&gt; None:\n        \"\"\"\u30ea\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n        ...\n\n    async def release(self) -&gt; None:\n        \"\"\"\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\u3057\u307e\u3059\u3002\"\"\"\n        ...\n\nclass ResourceManager(AsyncContextManager[Resource], Protocol):\n    \"\"\"\u30ea\u30bd\u30fc\u30b9\u30de\u30cd\u30fc\u30b8\u30e3\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3002\"\"\"\n\n    async def __aenter__(self) -&gt; Resource:\n        \"\"\"\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306b\u5165\u308a\u3001\u30ea\u30bd\u30fc\u30b9\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n        ...\n\n    async def __aexit__(\n        self,\n        exc_type: Optional[Type[BaseException]],\n        exc_val: Optional[BaseException],\n        exc_tb: Any,\n    ) -&gt; Optional[bool]:\n        \"\"\"\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u629c\u3051\u3001\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\u3057\u307e\u3059\u3002\"\"\"\n        ...\n</code></pre>"},{"location":"ja/api/typing/#_9","title":"\u30a4\u30d9\u30f3\u30c8\u51e6\u7406","text":"<pre><code>from mtaio.typing import Event, EventHandler\n\n@runtime_checkable\nclass Event(Protocol[T]):\n    \"\"\"\u30a4\u30d9\u30f3\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3002\"\"\"\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"\u30a4\u30d9\u30f3\u30c8\u540d\u3002\"\"\"\n        ...\n\n    @property\n    def data(self) -&gt; T:\n        \"\"\"\u30a4\u30d9\u30f3\u30c8\u30c7\u30fc\u30bf\u3002\"\"\"\n        ...\n\nclass EventHandler(Protocol[T]):\n    \"\"\"\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3002\"\"\"\n\n    async def handle(self, event: Event[T]) -&gt; None:\n        \"\"\"\u30a4\u30d9\u30f3\u30c8\u3092\u51e6\u7406\u3057\u307e\u3059\u3002\"\"\"\n        ...\n</code></pre>"},{"location":"ja/api/typing/#_10","title":"\u30ad\u30e3\u30c3\u30b7\u30e5\u578b","text":"<pre><code>from mtaio.typing import CacheKey, CacheValue\n\n@runtime_checkable\nclass CacheKey(Protocol):\n    \"\"\"\u30ad\u30e3\u30c3\u30b7\u30e5\u30ad\u30fc\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3002\"\"\"\n\n    def __str__(self) -&gt; str:\n        \"\"\"\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u307e\u3059\u3002\"\"\"\n        ...\n\n    def __hash__(self) -&gt; int:\n        \"\"\"\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n        ...\n\nclass CacheValue(Protocol):\n    \"\"\"\u30ad\u30e3\u30c3\u30b7\u30e5\u5024\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3002\"\"\"\n\n    async def serialize(self) -&gt; bytes:\n        \"\"\"\u5024\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u307e\u3059\u3002\"\"\"\n        ...\n\n    @classmethod\n    async def deserialize(cls, data: bytes) -&gt; Any:\n        \"\"\"\u5024\u3092\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u307e\u3059\u3002\"\"\"\n        ...\n</code></pre>"},{"location":"ja/api/typing/#_11","title":"\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u578b","text":""},{"location":"ja/api/typing/#_12","title":"\u7d50\u679c\u578b","text":"<pre><code>from mtaio.typing import Result\n\nclass Result(Generic[T]):\n    \"\"\"\u64cd\u4f5c\u7d50\u679c\u306e\u30b3\u30f3\u30c6\u30ca\u3002\"\"\"\n\n    def __init__(\n        self,\n        value: Optional[T] = None,\n        error: Optional[Exception] = None\n    ) -&gt; None:\n        self.value = value\n        self.error = error\n        self.success = error is None\n\n    def unwrap(self) -&gt; T:\n        \"\"\"\n        \u5024\u3092\u53d6\u5f97\u3059\u308b\u304b\u3001\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u307e\u3059\u3002\n\n        Returns:\n            \u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5024\n\n        Raises:\n            \u30a8\u30e9\u30fc\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u305d\u306e\u30a8\u30e9\u30fc\n        \"\"\"\n        if self.error:\n            raise self.error\n        if self.value is None:\n            raise ValueError(\"\u7d50\u679c\u306b\u5024\u304c\u3042\u308a\u307e\u305b\u3093\")\n        return self.value\n</code></pre>"},{"location":"ja/api/typing/#_13","title":"\u8a2d\u5b9a\u578b","text":"<pre><code>from mtaio.typing import ConfigProtocol, Config\n\n@runtime_checkable\nclass ConfigProtocol(Protocol):\n    \"\"\"\u8a2d\u5b9a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3002\"\"\"\n\n    def get(self, key: str, default: Any = None) -&gt; Any:\n        \"\"\"\u8a2d\u5b9a\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n        ...\n\n    def get_path(self, key: str, default: Optional[PathLike] = None) -&gt; PathLike:\n        \"\"\"\u30d1\u30b9\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n        ...\n\n    def get_timedelta(self, key: str, default: Optional[TimeValue] = None) -&gt; timedelta:\n        \"\"\"\u6642\u9593\u5dee\u5206\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\"\"\"\n        ...\n\nclass Config(Dict[str, Any], ConfigProtocol):\n    \"\"\"\u8a2d\u5b9a\u306e\u5b9f\u88c5\u3002\"\"\"\n    pass\n</code></pre>"},{"location":"ja/api/typing/#_14","title":"\u30d5\u30a1\u30af\u30c8\u30ea\u578b","text":"<pre><code>from mtaio.typing import Factory, AsyncFactory\n\nclass Factory(Protocol[T]):\n    \"\"\"\u30d5\u30a1\u30af\u30c8\u30ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3002\"\"\"\n\n    def create(self) -&gt; T:\n        \"\"\"\u65b0\u3057\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\"\"\"\n        ...\n\nclass AsyncFactory(Protocol[T]):\n    \"\"\"\u975e\u540c\u671f\u30d5\u30a1\u30af\u30c8\u30ea\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3002\"\"\"\n\n    async def create(self) -&gt; T:\n        \"\"\"\u65b0\u3057\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u975e\u540c\u671f\u306b\u4f5c\u6210\u3057\u307e\u3059\u3002\"\"\"\n        ...\n</code></pre>"},{"location":"ja/api/typing/#_15","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"ja/api/typing/#_16","title":"\u578b\u30d2\u30f3\u30c8\u306e\u4f7f\u7528","text":"<pre><code>from mtaio.typing import AsyncFunc, Result\n\n# \u95a2\u6570\u306e\u578b\u30d2\u30f3\u30c8\nasync def process_data(func: AsyncFunc[str]) -&gt; Result[str]:\n    try:\n        result = await func()\n        return Result(value=result)\n    except Exception as e:\n        return Result(error=e)\n\n# \u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u4f7f\u7528\nclass DataProcessor(AsyncFactory[str]):\n    async def create(self) -&gt; str:\n        return await self.process()\n\n    async def process(self) -&gt; str:\n        # \u51e6\u7406\u306e\u5b9f\u88c5\n        return \"\u51e6\u7406\u6e08\u307f\u30c7\u30fc\u30bf\"\n</code></pre>"},{"location":"ja/api/typing/#_17","title":"\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u306e\u4f7f\u7528","text":"<pre><code>from mtaio.typing import T, CacheValue\n\nclass CustomCache(Generic[T]):\n    async def get(self, key: str) -&gt; Optional[T]:\n        ...\n\n    async def set(self, key: str, value: T) -&gt; None:\n        ...\n\n# \u7279\u5b9a\u306e\u578b\u3067\u306e\u5b9f\u88c5\ncache = CustomCache[str]()\n</code></pre>"},{"location":"ja/api/typing/#_18","title":"\u30d7\u30ed\u30c8\u30b3\u30eb\u306e\u7d99\u627f","text":"<pre><code>from mtaio.typing import Resource, EventHandler\n\nclass ManagedResource(Resource, EventHandler[str]):\n    async def acquire(self) -&gt; None:\n        ...\n\n    async def release(self) -&gt; None:\n        ...\n\n    async def handle(self, event: Event[str]) -&gt; None:\n        ...\n</code></pre>"},{"location":"ja/api/typing/#_19","title":"\u30a8\u30e9\u30fc\u51e6\u7406","text":"<pre><code>from mtaio.typing import Result, AsyncFunc\n\nasync def safe_operation(func: AsyncFunc[T]) -&gt; Result[T]:\n    try:\n        result = await func()\n        return Result(value=result)\n    except Exception as e:\n        logger.error(f\"\u64cd\u4f5c\u304c\u5931\u6557\u3057\u307e\u3057\u305f: {e}\")\n        return Result(error=e)\n\n# \u4f7f\u7528\u4f8b\nresult = await safe_operation(async_function)\nif result.success:\n    value = result.unwrap()\nelse:\n    handle_error(result.error)\n</code></pre>"},{"location":"ja/api/typing/#_20","title":"\u7d71\u5408\u4f8b","text":""},{"location":"ja/api/typing/#_21","title":"\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406","text":"<pre><code>from mtaio.typing import Resource, ResourceManager\n\nclass DatabaseConnection(Resource):\n    async def acquire(self) -&gt; None:\n        await self.connect()\n\n    async def release(self) -&gt; None:\n        await self.disconnect()\n\nclass ConnectionManager(ResourceManager[DatabaseConnection]):\n    async def __aenter__(self) -&gt; DatabaseConnection:\n        conn = DatabaseConnection()\n        await conn.acquire()\n        return conn\n\n    async def __aexit__(self, *args) -&gt; None:\n        await self.resource.release()\n</code></pre>"},{"location":"ja/api/typing/#_22","title":"\u30a4\u30d9\u30f3\u30c8\u30b7\u30b9\u30c6\u30e0","text":"<pre><code>from mtaio.typing import Event, EventHandler\n\nclass DataEvent(Event[Dict[str, Any]]):\n    def __init__(self, name: str, data: Dict[str, Any]):\n        self._name = name\n        self._data = data\n\n    @property\n    def name(self) -&gt; str:\n        return self._name\n\n    @property\n    def data(self) -&gt; Dict[str, Any]:\n        return self._data\n\nclass DataHandler(EventHandler[Dict[str, Any]]):\n    async def handle(self, event: Event[Dict[str, Any]]) -&gt; None:\n        await self.process_data(event.data)\n</code></pre>"},{"location":"ja/api/typing/#_23","title":"\u95a2\u9023\u9805\u76ee","text":"<ul> <li>\u57fa\u672c\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u30b3\u30a2API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30a8\u30e9\u30fc\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u4f8b\u5916API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167</li> <li>\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u30b5\u30f3\u30d7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u53c2\u7167</li> </ul>"},{"location":"ja/guides/advanced-usage/","title":"\u9ad8\u5ea6\u306a\u4f7f\u3044\u65b9","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001\u9ad8\u5ea6\u306a\u975e\u540c\u671f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306emtaio\u306e\u9ad8\u5ea6\u306a\u6a5f\u80fd\u3068\u30d1\u30bf\u30fc\u30f3\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"ja/guides/advanced-usage/#_2","title":"\u9ad8\u5ea6\u306a\u30a4\u30d9\u30f3\u30c8\u30d1\u30bf\u30fc\u30f3","text":""},{"location":"ja/guides/advanced-usage/#_3","title":"\u30a4\u30d9\u30f3\u30c8\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3","text":"<p>\u30a4\u30d9\u30f3\u30c8\u3068\u30c7\u30fc\u30bf\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u8907\u96d1\u306a\u30ef\u30fc\u30af\u30d5\u30ed\u30fc\u3092\u4f5c\u6210:</p> <pre><code>from mtaio.events import EventEmitter\nfrom mtaio.data import Pipeline, Stage\n\nclass ValidationStage(Stage[dict, dict]):\n    async def process(self, data: dict) -&gt; dict:\n        if \"user_id\" not in data:\n            raise ValueError(\"user_id\u304c\u898b\u3064\u304b\u308a\u307e\u305b\u3093\")\n        return data\n\nclass EnrichmentStage(Stage[dict, dict]):\n    async def process(self, data: dict) -&gt; dict:\n        data[\"timestamp\"] = time.time()\n        return data\n\nasync def setup_event_pipeline():\n    pipeline = Pipeline()\n    emitter = EventEmitter()\n\n    # \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u8a2d\u5b9a\n    pipeline.add_stage(ValidationStage())\n    pipeline.add_stage(EnrichmentStage())\n\n    @emitter.on(\"user_action\")\n    async def handle_user_action(event):\n        async with pipeline:\n            processed_data = await pipeline.process(event.data)\n            await emitter.emit(\"processed_action\", processed_data)\n\n    return emitter\n</code></pre>"},{"location":"ja/guides/advanced-usage/#_4","title":"\u30a4\u30d9\u30f3\u30c8\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3068\u5909\u63db","text":"<pre><code>from mtaio.events import EventEmitter, Event\n\nasync def setup_event_processing():\n    emitter = EventEmitter()\n\n    # \u30a4\u30d9\u30f3\u30c8\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\n    filtered = emitter.filter(\n        lambda event: event.data.get(\"priority\") == \"high\"\n    )\n\n    # \u30a4\u30d9\u30f3\u30c8\u306e\u5909\u63db\n    transformed = emitter.map(\n        lambda event: Event(\n            event.name,\n            {**event.data, \"processed\": True}\n        )\n    )\n\n    # \u8907\u6570\u306e\u30a8\u30df\u30c3\u30bf\u30fc\u3092\u9023\u9396\n    emitter.pipe(filtered)\n    filtered.pipe(transformed)\n</code></pre>"},{"location":"ja/guides/advanced-usage/#_5","title":"\u9ad8\u5ea6\u306a\u30ad\u30e3\u30c3\u30b7\u30e5\u6226\u7565","text":""},{"location":"ja/guides/advanced-usage/#_6","title":"\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u968e\u5c64\u5316","text":"<p>\u6700\u9069\u306a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u305f\u3081\u306e\u30de\u30eb\u30c1\u30ec\u30d9\u30eb\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u5b9f\u88c5:</p> <pre><code>from mtaio.cache import TTLCache, DistributedCache\nfrom typing import Optional, TypeVar, Generic\n\nT = TypeVar(\"T\")\n\nclass LayeredCache(Generic[T]):\n    def __init__(self):\n        self.local = TTLCache[T](default_ttl=60.0)  # 1\u5206\u306e\u30ed\u30fc\u30ab\u30eb\u30ad\u30e3\u30c3\u30b7\u30e5\n        self.distributed = DistributedCache[T]([\n            (\"localhost\", 5000),\n            (\"localhost\", 5001)\n        ])\n\n    async def get(self, key: str) -&gt; Optional[T]:\n        # \u307e\u305a\u30ed\u30fc\u30ab\u30eb\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u8a66\u884c\n        value = await self.local.get(key)\n        if value is not None:\n            return value\n\n        # \u5206\u6563\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u8a66\u884c\n        value = await self.distributed.get(key)\n        if value is not None:\n            # \u30ed\u30fc\u30ab\u30eb\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u66f4\u65b0\n            await self.local.set(key, value)\n            return value\n\n        return None\n\n    async def set(self, key: str, value: T) -&gt; None:\n        # \u4e21\u65b9\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u66f4\u65b0\n        await self.local.set(key, value)\n        await self.distributed.set(key, value)\n</code></pre>"},{"location":"ja/guides/advanced-usage/#_7","title":"\u30ad\u30e3\u30c3\u30b7\u30e5\u7121\u52b9\u5316\u30d1\u30bf\u30fc\u30f3","text":"<pre><code>from mtaio.cache import TTLCache\nfrom mtaio.events import EventEmitter\n\nclass CacheInvalidator:\n    def __init__(self):\n        self.cache = TTLCache[str]()\n        self.emitter = EventEmitter()\n\n        @self.emitter.on(\"data_updated\")\n        async def invalidate_cache(event):\n            keys = event.data.get(\"affected_keys\", [])\n            for key in keys:\n                await self.cache.delete(key)\n\n            if event.data.get(\"clear_all\", False):\n                await self.cache.clear()\n\n    async def update_data(self, key: str, value: str) -&gt; None:\n        await self.cache.set(key, value)\n        await self.emitter.emit(\"data_updated\", {\n            \"affected_keys\": [key]\n        })\n</code></pre>"},{"location":"ja/guides/advanced-usage/#_8","title":"\u9ad8\u5ea6\u306a\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406","text":""},{"location":"ja/guides/advanced-usage/#_9","title":"\u30ab\u30b9\u30bf\u30e0\u30ea\u30bd\u30fc\u30b9\u30ea\u30df\u30c3\u30bf\u30fc","text":"<p>\u7279\u5b9a\u306e\u30cb\u30fc\u30ba\u306b\u5408\u308f\u305b\u305f\u30ea\u30bd\u30fc\u30b9\u30ea\u30df\u30c3\u30bf\u30fc\u306e\u4f5c\u6210:</p> <pre><code>from mtaio.resources import ResourceLimiter\nfrom mtaio.typing import AsyncFunc\nfrom typing import Dict\n\nclass AdaptiveRateLimiter(ResourceLimiter):\n    def __init__(self):\n        self.rates: Dict[str, float] = {}\n        self._current_load = 0.0\n\n    async def acquire(self, resource_id: str) -&gt; None:\n        rate = self.rates.get(resource_id, 1.0)\n        if self._current_load &gt; 0.8:  # 80%\u306e\u8ca0\u8377\n            rate *= 0.5  # \u30ec\u30fc\u30c8\u3092\u524a\u6e1b\n        await super().acquire(tokens=1/rate)\n\n    def adjust_rate(self, resource_id: str, load: float) -&gt; None:\n        self._current_load = load\n        if load &gt; 0.9:  # \u9ad8\u8ca0\u8377\n            self.rates[resource_id] *= 0.8\n        elif load &lt; 0.5:  # \u4f4e\u8ca0\u8377\n            self.rates[resource_id] *= 1.2\n</code></pre>"},{"location":"ja/guides/advanced-usage/#_10","title":"\u8907\u96d1\u306a\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u30d1\u30bf\u30fc\u30f3","text":"<pre><code>from mtaio.resources import TimeoutManager\nfrom contextlib import asynccontextmanager\n\nclass TimeoutController:\n    def __init__(self):\n        self.timeouts = TimeoutManager()\n\n    @asynccontextmanager\n    async def cascading_timeout(self, timeouts: list[float]):\n        \"\"\"\u6bb5\u968e\u7684\u306a\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3068\u30d5\u30a9\u30fc\u30eb\u30d0\u30c3\u30af\u52d5\u4f5c\u3092\u5b9f\u88c5\"\"\"\n        for timeout in timeouts:\n            try:\n                async with self.timeouts.timeout(timeout):\n                    yield\n                break\n            except TimeoutError:\n                if timeout == timeouts[-1]:\n                    raise\n                continue\n</code></pre>"},{"location":"ja/guides/advanced-usage/#_11","title":"\u9ad8\u5ea6\u306a\u30c7\u30fc\u30bf\u51e6\u7406","text":""},{"location":"ja/guides/advanced-usage/#_12","title":"\u30ab\u30b9\u30bf\u30e0\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u30b9\u30c6\u30fc\u30b8","text":"<p>\u8907\u96d1\u306a\u30c7\u30fc\u30bf\u5909\u63db\u306e\u305f\u3081\u306e\u7279\u6b8a\u306a\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u30b9\u30c6\u30fc\u30b8\u306e\u4f5c\u6210:</p> <pre><code>from mtaio.data import Pipeline, Stage\nfrom typing import Any, AsyncIterator\n\nclass BatchProcessingStage(Stage[Any, Any]):\n    def __init__(self, batch_size: int):\n        self.batch_size = batch_size\n        self.batch = []\n\n    async def process(self, item: Any) -&gt; AsyncIterator[Any]:\n        self.batch.append(item)\n\n        if len(self.batch) &gt;= self.batch_size:\n            result = await self._process_batch(self.batch)\n            self.batch = []\n            return result\n\n    async def _process_batch(self, batch: list[Any]) -&gt; Any:\n        # \u30d0\u30c3\u30c1\u51e6\u7406\u30ed\u30b8\u30c3\u30af\u306e\u5b9f\u88c5\n        return batch\n</code></pre>"},{"location":"ja/guides/advanced-usage/#_13","title":"\u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406","text":"<p>\u8907\u96d1\u306a\u30b9\u30c8\u30ea\u30fc\u30e0\u51e6\u7406\u30d1\u30bf\u30fc\u30f3\u306e\u5b9f\u88c5:</p> <pre><code>from mtaio.data import Stream\nfrom typing import TypeVar, AsyncIterator\n\nT = TypeVar(\"T\")\n\nclass StreamProcessor(Stream[T]):\n    async def window(\n        self,\n        size: int,\n        slide: int = 1\n    ) -&gt; AsyncIterator[list[T]]:\n        \"\"\"\u30b9\u30e9\u30a4\u30c7\u30a3\u30f3\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\u306e\u5b9f\u88c5\"\"\"\n        buffer: list[T] = []\n\n        async for item in self:\n            buffer.append(item)\n            if len(buffer) &gt;= size:\n                yield buffer[-size:]\n                buffer = buffer[slide:]\n\n    async def batch_by_time(\n        self,\n        seconds: float\n    ) -&gt; AsyncIterator[list[T]]:\n        \"\"\"\u6642\u9593\u30d9\u30fc\u30b9\u306e\u30d0\u30c3\u30c1\u51e6\u7406\"\"\"\n        batch: list[T] = []\n        start_time = time.monotonic()\n\n        async for item in self:\n            batch.append(item)\n            if time.monotonic() - start_time &gt;= seconds:\n                yield batch\n                batch = []\n                start_time = time.monotonic()\n</code></pre>"},{"location":"ja/guides/advanced-usage/#_14","title":"\u9ad8\u5ea6\u306a\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0","text":""},{"location":"ja/guides/advanced-usage/#_15","title":"\u30ab\u30b9\u30bf\u30e0\u30e1\u30c8\u30ea\u30af\u30b9\u53ce\u96c6","text":"<pre><code>from mtaio.monitoring import ResourceMonitor\nfrom dataclasses import dataclass\n\n@dataclass\nclass CustomMetrics:\n    request_count: int = 0\n    error_count: int = 0\n    average_response_time: float = 0.0\n\nclass ApplicationMonitor(ResourceMonitor):\n    def __init__(self):\n        super().__init__()\n        self.metrics = CustomMetrics()\n\n    async def collect_metrics(self) -&gt; None:\n        while True:\n            stats = await self.get_current_stats()\n\n            # \u30ab\u30b9\u30bf\u30e0\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u66f4\u65b0\n            self.metrics.average_response_time = (\n                stats.latency_sum / stats.request_count\n                if stats.request_count &gt; 0 else 0.0\n            )\n\n            # \u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30a2\u30e9\u30fc\u30c8\u3092\u767a\u884c\n            if self.metrics.error_count &gt; 100:\n                await self.alert(\"\u9ad8\u3044\u30a8\u30e9\u30fc\u7387\u304c\u691c\u51fa\u3055\u308c\u307e\u3057\u305f\")\n\n            await asyncio.sleep(60)  # 1\u5206\u3054\u3068\u306b\u53ce\u96c6\n</code></pre>"},{"location":"ja/guides/advanced-usage/#_16","title":"\u672c\u756a\u74b0\u5883\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"ja/guides/advanced-usage/#_17","title":"\u30a8\u30e9\u30fc\u30ea\u30ab\u30d0\u30ea\u30fc","text":"<pre><code>from mtaio.core import TaskExecutor\nfrom mtaio.exceptions import MTAIOError\n\nclass ResilientExecutor:\n    def __init__(self):\n        self.executor = TaskExecutor()\n        self.retry_count = 3\n\n    async def execute_with_recovery(\n        self,\n        func: AsyncFunc[T],\n        *args: Any,\n        **kwargs: Any\n    ) -&gt; T:\n        for attempt in range(self.retry_count):\n            try:\n                return await self.executor.run(\n                    func(*args, **kwargs)\n                )\n            except MTAIOError as e:\n                if attempt == self.retry_count - 1:\n                    raise\n                await asyncio.sleep(2 ** attempt)  # \u6307\u6570\u30d0\u30c3\u30af\u30aa\u30d5\n</code></pre>"},{"location":"ja/guides/advanced-usage/#_18","title":"\u30ea\u30bd\u30fc\u30b9\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7","text":"<pre><code>from mtaio.resources import ResourceManager\nfrom typing import AsyncIterator\n\nclass ManagedResources:\n    def __init__(self):\n        self.resources: list[AsyncCloseable] = []\n\n    async def acquire(self, resource: AsyncCloseable) -&gt; None:\n        self.resources.append(resource)\n\n    async def cleanup(self) -&gt; None:\n        while self.resources:\n            resource = self.resources.pop()\n            await resource.close()\n\n    @asynccontextmanager\n    async def resource_scope(self) -&gt; AsyncIterator[None]:\n        try:\n            yield\n        finally:\n            await self.cleanup()\n</code></pre>"},{"location":"ja/guides/advanced-usage/#_19","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<ul> <li>\u30b5\u30f3\u30d7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u30c1\u30a7\u30c3\u30af</li> <li>API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u78ba\u8a8d</li> <li>\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u306b\u53c2\u52a0</li> </ul>"},{"location":"ja/guides/basic-usage/","title":"\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001\u5b9f\u8df5\u7684\u306a\u4f8b\u3092\u901a\u3057\u3066mtaio\u306e\u57fa\u672c\u7684\u306a\u6a5f\u80fd\u3092\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"ja/guides/basic-usage/#_2","title":"\u57fa\u672c\u6a5f\u80fd","text":""},{"location":"ja/guides/basic-usage/#_3","title":"\u30bf\u30b9\u30af\u5b9f\u884c","text":"<p><code>TaskExecutor</code>\u306f\u975e\u540c\u671f\u30bf\u30b9\u30af\u306e\u5236\u5fa1\u3055\u308c\u305f\u5b9f\u884c\u3092\u63d0\u4f9b\u3057\u307e\u3059:</p> <pre><code>from mtaio.core import TaskExecutor\n\nasync def process_item(item: str) -&gt; str:\n    return f\"\u51e6\u7406\u6e08\u307f: {item}\"\n\nasync def main():\n    # \u57fa\u672c\u7684\u306a\u4f7f\u7528\u65b9\u6cd5\n    async with TaskExecutor() as executor:\n        # \u5358\u4e00\u30bf\u30b9\u30af\u306e\u51e6\u7406\n        result = await executor.run(process_item(\"\u30c7\u30fc\u30bf\"))\n\n        # \u4e26\u884c\u6027\u5236\u9650\u4ed8\u304d\u3067\u8907\u6570\u306e\u30bf\u30b9\u30af\u3092\u51e6\u7406\n        items = [\"\u9805\u76ee1\", \"\u9805\u76ee2\", \"\u9805\u76ee3\", \"\u9805\u76ee4\"]\n        results = await executor.gather(\n            *(process_item(item) for item in items),\n            limit=2  # \u6700\u59272\u3064\u306e\u540c\u6642\u5b9f\u884c\u30bf\u30b9\u30af\n        )\n\n    # \u9805\u76ee\u306b\u5bfe\u3059\u308b\u30de\u30c3\u30d7\u64cd\u4f5c\n    async with TaskExecutor() as executor:\n        results = await executor.map(process_item, items, limit=2)\n</code></pre>"},{"location":"ja/guides/basic-usage/#_4","title":"\u975e\u540c\u671f\u30ad\u30e5\u30fc","text":"<p>\u975e\u540c\u671f\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u306e\u7ba1\u7406:</p> <pre><code>from mtaio.core import AsyncQueue\n\nasync def producer_consumer():\n    queue = AsyncQueue[str](maxsize=10)\n\n    # \u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u30fc\n    await queue.put(\"\u9805\u76ee\")\n\n    # \u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u30fc\n    item = await queue.get()\n    queue.task_done()\n\n    # \u3059\u3079\u3066\u306e\u30bf\u30b9\u30af\u306e\u5b8c\u4e86\u3092\u5f85\u6a5f\n    await queue.join()\n</code></pre>"},{"location":"ja/guides/basic-usage/#_5","title":"\u30a4\u30d9\u30f3\u30c8\u51e6\u7406","text":"<p>\u30a4\u30d9\u30f3\u30c8\u30b7\u30b9\u30c6\u30e0\u306f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u9593\u306e\u758e\u7d50\u5408\u306a\u901a\u4fe1\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059:</p> <pre><code>from mtaio.events import EventEmitter\n\n# \u30a8\u30df\u30c3\u30bf\u30fc\u306e\u4f5c\u6210\nemitter = EventEmitter()\n\n# \u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u5b9a\u7fa9\n@emitter.on(\"user_action\")\nasync def handle_user_action(event):\n    user = event.data\n    print(f\"\u30e6\u30fc\u30b6\u30fc {user['name']} \u304c\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u307e\u3057\u305f\")\n\n@emitter.once(\"startup\")  # 1\u56de\u9650\u308a\u306e\u30cf\u30f3\u30c9\u30e9\u30fc\nasync def handle_startup(event):\n    print(\"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u8d77\u52d5\u3057\u307e\u3057\u305f\")\n\n# \u30a4\u30d9\u30f3\u30c8\u306e\u767a\u884c\nawait emitter.emit(\"startup\", {\"time\": \"2024-01-01\"})\nawait emitter.emit(\"user_action\", {\"name\": \"\u7530\u4e2d\"})\n</code></pre>"},{"location":"ja/guides/basic-usage/#_6","title":"\u30ad\u30e3\u30c3\u30b7\u30e5","text":"<p>mtaio\u306f\u69d8\u3005\u306a\u30ad\u30e3\u30c3\u30b7\u30e5\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u307e\u3059:</p>"},{"location":"ja/guides/basic-usage/#ttl","title":"TTL\u30ad\u30e3\u30c3\u30b7\u30e5","text":"<pre><code>from mtaio.cache import TTLCache\n\n# 5\u5206\u9593\u306eTTL\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f5c\u6210\ncache = TTLCache[str](\n    default_ttl=300.0,\n    max_size=1000\n)\n\n# \u57fa\u672c\u7684\u306a\u64cd\u4f5c\nawait cache.set(\"\u30ad\u30fc\", \"\u5024\")\nvalue = await cache.get(\"\u30ad\u30fc\")\n\n# \u30ab\u30b9\u30bf\u30e0TTL\u306e\u4f7f\u7528\nawait cache.set(\"\u30ad\u30fc2\", \"\u50242\", ttl=60.0)  # 60\u79d2\n\n# \u30d0\u30c3\u30c1\u64cd\u4f5c\nawait cache.set_many({\n    \"\u30ad\u30fc1\": \"\u50241\",\n    \"\u30ad\u30fc2\": \"\u50242\"\n})\n</code></pre>"},{"location":"ja/guides/basic-usage/#_7","title":"\u5206\u6563\u30ad\u30e3\u30c3\u30b7\u30e5","text":"<pre><code>from mtaio.cache import DistributedCache\n\n# \u8907\u6570\u30ce\u30fc\u30c9\u306e\u5206\u6563\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u4f5c\u6210\ncache = DistributedCache[str](\n    nodes=[\n        (\"localhost\", 5000),\n        (\"localhost\", 5001)\n    ],\n    replication_factor=2\n)\n\nasync with cache:\n    await cache.set(\"\u30ad\u30fc\", \"\u5024\")\n    value = await cache.get(\"\u30ad\u30fc\")\n</code></pre>"},{"location":"ja/guides/basic-usage/#_8","title":"\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406","text":""},{"location":"ja/guides/basic-usage/#_9","title":"\u30ec\u30fc\u30c8\u5236\u9650","text":"<pre><code>from mtaio.resources import RateLimiter\n\n# \u30ec\u30fc\u30c8\u5236\u9650\u306e\u4f5c\u6210\nlimiter = RateLimiter(10.0)  # 1\u79d2\u3042\u305f\u308a10\u56de\u306e\u64cd\u4f5c\n\n@limiter.limit\nasync def rate_limited_operation():\n    # \u3053\u306e\u95a2\u6570\u306f1\u79d2\u3042\u305f\u308a10\u56de\u306b\u5236\u9650\u3055\u308c\u307e\u3059\n    pass\n\n# \u624b\u52d5\u3067\u306e\u30ec\u30fc\u30c8\u5236\u9650\nasync def manual_rate_limit():\n    async with limiter:\n        # \u30ec\u30fc\u30c8\u5236\u9650\u3055\u308c\u305f\u30b3\u30fc\u30c9\u30d6\u30ed\u30c3\u30af\n        pass\n</code></pre>"},{"location":"ja/guides/basic-usage/#_10","title":"\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u7ba1\u7406","text":"<pre><code>from mtaio.resources import TimeoutManager\n\nasync def operation_with_timeout():\n    async with TimeoutManager(5.0) as tm:  # 5\u79d2\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\n        result = await tm.run(long_running_operation())\n\n        # \u7279\u5b9a\u306e\u64cd\u4f5c\u306b\u7570\u306a\u308b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\n        result2 = await tm.run(\n            another_operation(),\n            timeout=2.0  # 2\u79d2\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\n        )\n</code></pre>"},{"location":"ja/guides/basic-usage/#_11","title":"\u30a8\u30e9\u30fc\u51e6\u7406","text":"<p>mtaio\u306f\u5305\u62ec\u7684\u306a\u4f8b\u5916\u968e\u5c64\u3092\u63d0\u4f9b\u3057\u307e\u3059:</p> <pre><code>from mtaio.exceptions import (\n    MTAIOError,\n    TimeoutError,\n    CacheError,\n    RateLimitError\n)\n\nasync def safe_operation():\n    try:\n        await rate_limited_operation()\n    except RateLimitError:\n        # \u30ec\u30fc\u30c8\u5236\u9650\u8d85\u904e\u306e\u51e6\u7406\n        pass\n    except TimeoutError:\n        # \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u51e6\u7406\n        pass\n    except MTAIOError as e:\n        # mtaio\u56fa\u6709\u306e\u30a8\u30e9\u30fc\u306e\u51e6\u7406\n        print(f\"\u64cd\u4f5c\u304c\u5931\u6557\u3057\u307e\u3057\u305f: {e}\")\n</code></pre>"},{"location":"ja/guides/basic-usage/#_12","title":"\u578b\u5b89\u5168\u6027","text":"<p>mtaio\u306f\u5b8c\u5168\u306a\u578b\u4ed8\u3051\u3068\u30bf\u30a4\u30d7\u30c1\u30a7\u30c3\u30af\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059:</p> <pre><code>from mtaio.typing import AsyncFunc, CacheKey, CacheValue\n\nclass CustomCache(CacheValue):\n    def __init__(self, data: str):\n        self.data = data\n\n    async def serialize(self) -&gt; bytes:\n        return self.data.encode()\n\n    @classmethod\n    async def deserialize(cls, data: bytes) -&gt; 'CustomCache':\n        return cls(data.decode())\n\n# \u578b\u5b89\u5168\u306a\u95a2\u6570\u5b9a\u7fa9\nasync def process_data(func: AsyncFunc[str]) -&gt; str:\n    return await func()\n</code></pre>"},{"location":"ja/guides/basic-usage/#_13","title":"\u4e00\u822c\u7684\u306a\u30d1\u30bf\u30fc\u30f3","text":""},{"location":"ja/guides/basic-usage/#_14","title":"\u51e6\u7406\u306e\u9023\u9396","text":"<pre><code>from mtaio.data import Pipeline\nfrom mtaio.events import EventEmitter\n\n# \u51e6\u7406\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u4f5c\u6210\npipeline = Pipeline()\nemitter = EventEmitter()\n\n# \u51e6\u7406\u30b9\u30c6\u30fc\u30b8\u306e\u8ffd\u52a0\npipeline.add_stage(DataValidationStage())\npipeline.add_stage(DataTransformStage())\npipeline.add_stage(DataStorageStage())\n\n# \u30a4\u30d9\u30f3\u30c8\u4ed8\u304d\u306e\u30c7\u30fc\u30bf\u51e6\u7406\nasync def process():\n    async with pipeline:\n        for item in items:\n            result = await pipeline.process(item)\n            await emitter.emit(\"item_processed\", result)\n</code></pre>"},{"location":"ja/guides/basic-usage/#_15","title":"\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0","text":"<pre><code>from mtaio.monitoring import ResourceMonitor\n\n# \u30e2\u30cb\u30bf\u30fc\u306e\u4f5c\u6210\nmonitor = ResourceMonitor(interval=1.0)\n\n@monitor.on_threshold_exceeded\nasync def handle_threshold(metric: str, value: float, threshold: float):\n    print(f\"\u8b66\u544a: {metric}\u304c\u3057\u304d\u3044\u5024\u3092\u8d85\u3048\u307e\u3057\u305f: {value} &gt; {threshold}\")\n\n# \u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u958b\u59cb\nawait monitor.start()\nmonitor.set_threshold(\"cpu_usage\", 80.0)  # CPU\u4f7f\u7528\u738780%\u306e\u3057\u304d\u3044\u5024\n</code></pre>"},{"location":"ja/guides/basic-usage/#_16","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u3053\u308c\u3089\u306e\u57fa\u672c\u3092\u7406\u89e3\u3057\u305f\u3089\u3001\u4ee5\u4e0b\u306b\u9032\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059:</p> <ol> <li>\u3088\u308a\u8907\u96d1\u306a\u30d1\u30bf\u30fc\u30f3\u306b\u3064\u3044\u3066\u306f\u9ad8\u5ea6\u306a\u4f7f\u3044\u65b9\u3092\u53c2\u7167</li> <li>\u8a73\u7d30\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3064\u3044\u3066\u306fAPI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u78ba\u8a8d</li> <li>\u3088\u308a\u591a\u304f\u306e\u4f8b\u306b\u3064\u3044\u3066\u306f\u30b5\u30f3\u30d7\u30eb\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u53c2\u7167</li> </ol>"},{"location":"ja/guides/deployment/","title":"\u30c7\u30d7\u30ed\u30a4\u30ac\u30a4\u30c9","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001\u672c\u756a\u74b0\u5883\u3067mtaio\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u969b\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u3068\u8003\u616e\u4e8b\u9805\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"ja/guides/deployment/#_2","title":"\u74b0\u5883\u8a2d\u5b9a","text":""},{"location":"ja/guides/deployment/#_3","title":"\u30b7\u30b9\u30c6\u30e0\u8981\u4ef6","text":"<ul> <li>Python 3.11\u4ee5\u964d</li> <li>\u30aa\u30da\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u30b7\u30b9\u30c6\u30e0: Python\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u4efb\u610f\u306e\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0(Linux, macOS, Windows)</li> <li>\u30e1\u30e2\u30ea: \u30ef\u30fc\u30af\u30ed\u30fc\u30c9\u306b\u4f9d\u5b58\u3001\u63a8\u5968\u6700\u5c0f512MB</li> <li>CPU: \u6700\u4f4e1\u30b3\u30a2\u3001\u4e26\u884c\u51e6\u7406\u306b\u306f2\u30b3\u30a2\u4ee5\u4e0a\u3092\u63a8\u5968</li> </ul>"},{"location":"ja/guides/deployment/#_4","title":"\u74b0\u5883\u5909\u6570","text":"<p>\u74b0\u5883\u5909\u6570\u3092\u4f7f\u7528\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a:</p> <pre><code>import os\nfrom mtaio.core import TaskExecutor\nfrom mtaio.cache import TTLCache\n\n# \u74b0\u5883\u5909\u6570\u304b\u3089\u8a2d\u5b9a\u3092\u8aad\u307f\u8fbc\u307f\nconfig = {\n    \"max_workers\": int(os.getenv(\"MTAIO_MAX_WORKERS\", \"4\")),\n    \"cache_ttl\": float(os.getenv(\"MTAIO_CACHE_TTL\", \"300\")),\n    \"cache_size\": int(os.getenv(\"MTAIO_CACHE_SIZE\", \"1000\")),\n    \"log_level\": os.getenv(\"MTAIO_LOG_LEVEL\", \"INFO\"),\n}\n\n# \u8a2d\u5b9a\u3067\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u521d\u671f\u5316\nexecutor = TaskExecutor(max_workers=config[\"max_workers\"])\ncache = TTLCache[str](\n    default_ttl=config[\"cache_ttl\"],\n    max_size=config[\"cache_size\"]\n)\n</code></pre>"},{"location":"ja/guides/deployment/#_5","title":"\u672c\u756a\u74b0\u5883\u306e\u8a2d\u5b9a","text":""},{"location":"ja/guides/deployment/#_6","title":"\u30ed\u30ae\u30f3\u30b0\u8a2d\u5b9a","text":"<p>\u672c\u756a\u74b0\u5883\u7528\u306e\u30ed\u30ae\u30f3\u30b0\u8a2d\u5b9a:</p> <pre><code>import logging\nfrom mtaio.logging import AsyncFileHandler\n\nasync def setup_logging():\n    logger = logging.getLogger(\"mtaio\")\n    logger.setLevel(logging.INFO)\n\n    # \u30ed\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u4ed8\u304d\u30d5\u30a1\u30a4\u30eb\u30cf\u30f3\u30c9\u30e9\n    handler = AsyncFileHandler(\n        filename=\"app.log\",\n        max_bytes=10_000_000,  # 10MB\n        backup_count=5\n    )\n\n    # \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u8ffd\u52a0\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    handler.setFormatter(formatter)\n\n    logger.addHandler(handler)\n</code></pre>"},{"location":"ja/guides/deployment/#_7","title":"\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406","text":"<p>\u672c\u756a\u74b0\u5883\u7528\u306e\u30ea\u30bd\u30fc\u30b9\u5236\u9650\u306e\u8a2d\u5b9a:</p> <pre><code>from mtaio.resources import (\n    RateLimiter,\n    ConcurrencyLimiter,\n    TimeoutManager\n)\n\nasync def configure_resources():\n    # \u30ec\u30fc\u30c8\u5236\u9650\n    rate_limiter = RateLimiter(\n        rate=float(os.getenv(\"MTAIO_RATE_LIMIT\", \"100\")),  # 1\u79d2\u3042\u305f\u308a\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u6570\n        burst=int(os.getenv(\"MTAIO_BURST_LIMIT\", \"200\"))\n    )\n\n    # \u540c\u6642\u5b9f\u884c\u5236\u9650\n    concurrency_limiter = ConcurrencyLimiter(\n        limit=int(os.getenv(\"MTAIO_CONCURRENCY_LIMIT\", \"50\"))\n    )\n\n    # \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u7ba1\u7406\n    timeout_manager = TimeoutManager(\n        default_timeout=float(os.getenv(\"MTAIO_DEFAULT_TIMEOUT\", \"30\"))\n    )\n\n    return rate_limiter, concurrency_limiter, timeout_manager\n</code></pre>"},{"location":"ja/guides/deployment/#_8","title":"\u30d8\u30eb\u30b9\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0","text":"<p>\u30d8\u30eb\u30b9\u30c1\u30a7\u30c3\u30af\u3068\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u5b9f\u88c5:</p> <pre><code>from mtaio.monitoring import ResourceMonitor\nfrom mtaio.events import EventEmitter\n\nclass HealthMonitor:\n    def __init__(self):\n        self.monitor = ResourceMonitor()\n        self.emitter = EventEmitter()\n\n    async def start(self):\n        # \u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u3057\u304d\u3044\u5024\u3092\u8a2d\u5b9a\n        self.monitor.set_threshold(\"cpu_usage\", 80.0)  # CPU 80%\n        self.monitor.set_threshold(\"memory_usage\", 90.0)  # \u30e1\u30e2\u30ea 90%\n\n        @self.monitor.on_threshold_exceeded\n        async def handle_threshold(metric, value, threshold):\n            await self.emitter.emit(\"health_alert\", {\n                \"metric\": metric,\n                \"value\": value,\n                \"threshold\": threshold\n            })\n\n        await self.monitor.start()\n\n    async def get_health_status(self) -&gt; dict:\n        stats = await self.monitor.get_current_stats()\n        return {\n            \"status\": \"healthy\" if stats.cpu.usage_percent &lt; 80 else \"degraded\",\n            \"cpu_usage\": stats.cpu.usage_percent,\n            \"memory_usage\": stats.memory.percent,\n            \"uptime\": stats.uptime\n        }\n</code></pre>"},{"location":"ja/guides/deployment/#_9","title":"\u30a8\u30e9\u30fc\u51e6\u7406","text":"<p>\u5305\u62ec\u7684\u306a\u30a8\u30e9\u30fc\u51e6\u7406\u306e\u5b9f\u88c5:</p> <pre><code>from mtaio.exceptions import MTAIOError\nfrom typing import Optional\n\nclass ErrorHandler:\n    def __init__(self):\n        self.logger = logging.getLogger(\"mtaio.errors\")\n\n    async def handle_error(\n        self,\n        error: Exception,\n        context: Optional[dict] = None\n    ) -&gt; None:\n        if isinstance(error, MTAIOError):\n            # mtaio\u56fa\u6709\u306e\u30a8\u30e9\u30fc\u3092\u51e6\u7406\n            await self._handle_mtaio_error(error, context)\n        else:\n            # \u4e88\u671f\u3057\u306a\u3044\u30a8\u30e9\u30fc\u3092\u51e6\u7406\n            await self._handle_unexpected_error(error, context)\n\n    async def _handle_mtaio_error(\n        self,\n        error: MTAIOError,\n        context: Optional[dict]\n    ) -&gt; None:\n        self.logger.error(\n            \"mtaio\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\",\n            extra={\n                \"error_type\": type(error).__name__,\n                \"message\": str(error),\n                \"context\": context\n            }\n        )\n\n    async def _handle_unexpected_error(\n        self,\n        error: Exception,\n        context: Optional[dict]\n    ) -&gt; None:\n        self.logger.critical(\n            \"\u4e88\u671f\u3057\u306a\u3044\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\",\n            exc_info=error,\n            extra={\"context\": context}\n        )\n</code></pre>"},{"location":"ja/guides/deployment/#_10","title":"\u30c7\u30d7\u30ed\u30a4\u4f8b","text":"<p>\u5b8c\u5168\u306a\u30c7\u30d7\u30ed\u30a4\u8a2d\u5b9a\u306e\u4f8b:</p> <pre><code>import asyncio\nfrom contextlib import AsyncExitStack\n\nasync def main():\n    # \u30ea\u30bd\u30fc\u30b9\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u7528\u306eexit stack\u3092\u521d\u671f\u5316\n    async with AsyncExitStack() as stack:\n        # \u30ed\u30ae\u30f3\u30b0\u306e\u8a2d\u5b9a\n        await setup_logging()\n        logger = logging.getLogger(\"mtaio\")\n\n        try:\n            # \u30ea\u30bd\u30fc\u30b9\u306e\u8a2d\u5b9a\n            rate_limiter, concurrency_limiter, timeout_manager = (\n                await configure_resources()\n            )\n\n            # \u30d8\u30eb\u30b9\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u306e\u8a2d\u5b9a\n            health_monitor = HealthMonitor()\n            await stack.enter_async_context(health_monitor)\n\n            # \u30a8\u30e9\u30fc\u51e6\u7406\u306e\u8a2d\u5b9a\n            error_handler = ErrorHandler()\n\n            # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u521d\u671f\u5316\n            app = Application(\n                rate_limiter=rate_limiter,\n                concurrency_limiter=concurrency_limiter,\n                timeout_manager=timeout_manager,\n                error_handler=error_handler\n            )\n\n            # \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8d77\u52d5\n            await app.start()\n            logger.info(\"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u6b63\u5e38\u306b\u8d77\u52d5\u3057\u307e\u3057\u305f\")\n\n            # \u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u30b7\u30b0\u30ca\u30eb\u3092\u5f85\u6a5f\n            await asyncio.Event().wait()\n\n        except Exception as e:\n            logger.critical(\"\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u8d77\u52d5\u306b\u5931\u6557\u3057\u307e\u3057\u305f\", exc_info=e)\n            raise\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"ja/guides/deployment/#_11","title":"\u30c7\u30d7\u30ed\u30a4\u30c1\u30a7\u30c3\u30af\u30ea\u30b9\u30c8","text":"<p>\u672c\u756a\u74b0\u5883\u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u524d\u306b\u78ba\u8a8d\u3059\u3079\u304d\u9805\u76ee:</p> <ol> <li> <p>\u8a2d\u5b9a</p> <ul> <li>\u2713 \u74b0\u5883\u5909\u6570\u304c\u6b63\u3057\u304f\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b</li> <li>\u2713 \u30ea\u30bd\u30fc\u30b9\u5236\u9650\u304c\u9069\u5207\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b</li> <li>\u2713 \u30ed\u30ae\u30f3\u30b0\u304c\u9069\u5207\u306a\u30ec\u30d9\u30eb\u3068\u30ed\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b</li> </ul> </li> <li> <p>\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0</p> <ul> <li>\u2713 \u30d8\u30eb\u30b9\u30c1\u30a7\u30c3\u30af\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u304b</li> <li>\u2713 \u30e1\u30c8\u30ea\u30af\u30b9\u53ce\u96c6\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b</li> <li>\u2713 \u30a2\u30e9\u30fc\u30c8\u306e\u3057\u304d\u3044\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b</li> </ul> </li> <li> <p>\u30a8\u30e9\u30fc\u51e6\u7406</p> <ul> <li>\u2713 \u5305\u62ec\u7684\u306a\u30a8\u30e9\u30fc\u51e6\u7406\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u304b</li> <li>\u2713 \u30a8\u30e9\u30fc\u30ed\u30ae\u30f3\u30b0\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b</li> <li>\u2713 \u30ea\u30ab\u30d0\u30ea\u30fc\u624b\u9806\u304c\u6587\u66f8\u5316\u3055\u308c\u3066\u3044\u308b\u304b</li> </ul> </li> <li> <p>\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9</p> <ul> <li>\u2713 \u30ad\u30e3\u30c3\u30b7\u30e5\u8a2d\u5b9a\u304c\u6700\u9069\u5316\u3055\u308c\u3066\u3044\u308b\u304b</li> <li>\u2713 \u30ea\u30bd\u30fc\u30b9\u5236\u9650\u304c\u8abf\u6574\u3055\u308c\u3066\u3044\u308b\u304b</li> <li>\u2713 \u540c\u6642\u5b9f\u884c\u306e\u5236\u9650\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b</li> </ul> </li> <li> <p>\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3</p> <ul> <li>\u2713 \u6a5f\u5bc6\u30c7\u30fc\u30bf\u304c\u9069\u5207\u306b\u4fdd\u8b77\u3055\u308c\u3066\u3044\u308b\u304b</li> <li>\u2713 \u30a2\u30af\u30bb\u30b9\u5236\u5fa1\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u304b</li> <li>\u2713 \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u304b</li> </ul> </li> </ol>"},{"location":"ja/guides/deployment/#_12","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<ul> <li>\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u30ac\u30a4\u30c9\u3067\u30c7\u30d7\u30ed\u30a4\u306e\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3046</li> <li>\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u3067\u4e00\u822c\u7684\u306a\u554f\u984c\u3092\u78ba\u8a8d\u3059\u308b</li> <li>\u30b5\u30dd\u30fc\u30c8\u306b\u3064\u3044\u3066\u306f\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u306b\u53c2\u52a0\u3059\u308b</li> </ul>"},{"location":"ja/guides/getting-started/","title":"mtaio\u3092\u59cb\u3081\u308b","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306fmtaio\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3001\u57fa\u672c\u7684\u306a\u6982\u5ff5\u3001\u305d\u3057\u3066\u7c21\u5358\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\u65b9\u6cd5\u3092\u9806\u3092\u8ffd\u3063\u3066\u89e3\u8aac\u3057\u307e\u3059\u3002</p>"},{"location":"ja/guides/getting-started/#_1","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>\u307e\u305a\u3001pip\u3092\u4f7f\u7528\u3057\u3066mtaio\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059:</p> <pre><code>pip install mtaio\n</code></pre>"},{"location":"ja/guides/getting-started/#_2","title":"\u57fa\u672c\u7684\u306a\u6982\u5ff5","text":"<p>mtaio\u306f\u4ee5\u4e0b\u306e\u6838\u3068\u306a\u308b\u6982\u5ff5\u306b\u57fa\u3065\u3044\u3066\u69cb\u7bc9\u3055\u308c\u3066\u3044\u307e\u3059:</p> <ol> <li>\u975e\u540c\u671f\u512a\u5148: \u3059\u3079\u3066\u304cPython\u306e<code>asyncio</code>\u3068\u9023\u643a\u3059\u308b\u3088\u3046\u306b\u8a2d\u8a08</li> <li>\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406: \u30b7\u30b9\u30c6\u30e0\u30ea\u30bd\u30fc\u30b9\u3092\u52b9\u7387\u7684\u306b\u6271\u3046\u305f\u3081\u306e\u7d44\u307f\u8fbc\u307f\u30c4\u30fc\u30eb</li> <li>\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5: \u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u69cb\u7bc9\u3059\u308b\u305f\u3081\u306e\u30a4\u30d9\u30f3\u30c8\u30d9\u30fc\u30b9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3</li> <li>\u578b\u5b89\u5168\u6027: \u3088\u308a\u826f\u3044\u958b\u767a\u4f53\u9a13\u306e\u305f\u3081\u306e\u5b8c\u5168\u306a\u578b\u30d2\u30f3\u30c8\u30b5\u30dd\u30fc\u30c8</li> </ol>"},{"location":"ja/guides/getting-started/#mtaio_1","title":"\u6700\u521d\u306emtaio\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3","text":"<p>mtaio\u306e\u57fa\u672c\u6a5f\u80fd\u3092\u793a\u3059\u7c21\u5358\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002</p> <pre><code>import asyncio\nfrom mtaio.events import EventEmitter\nfrom mtaio.cache import TTLCache\nfrom mtaio.core import TaskExecutor\n\n# \u30c7\u30fc\u30bf\u30d7\u30ed\u30bb\u30c3\u30b5\u30af\u30e9\u30b9\u306e\u4f5c\u6210\nclass DataProcessor:\n    def __init__(self):\n        self.emitter = EventEmitter()\n        self.cache = TTLCache[str](default_ttl=60.0)  # 60\u79d2\u306eTTL\n        self.executor = TaskExecutor()\n\n    async def process_data(self, data: str) -&gt; str:\n        # \u307e\u305a\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u78ba\u8a8d\n        cached_result = await self.cache.get(data)\n        if cached_result is not None:\n            await self.emitter.emit(\"cache_hit\", data)\n            return cached_result\n\n        # \u30c7\u30fc\u30bf\u3092\u51e6\u7406\n        async with self.executor as executor:\n            result = await executor.run(self.compute_result, data)\n\n        # \u7d50\u679c\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\n        await self.cache.set(data, result)\n        await self.emitter.emit(\"process_complete\", result)\n        return result\n\n    async def compute_result(self, data: str) -&gt; str:\n        # \u91cd\u3044\u8a08\u7b97\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\n        await asyncio.sleep(1)\n        return data.upper()\n\n# \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u4f5c\u6210\nasync def handle_cache_hit(event):\n    print(f\"\u30ad\u30e3\u30c3\u30b7\u30e5\u30d2\u30c3\u30c8: {event.data}\")\n\nasync def handle_process_complete(event):\n    print(f\"\u51e6\u7406\u5b8c\u4e86 - \u7d50\u679c: {event.data}\")\n\n# \u30e1\u30a4\u30f3\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\nasync def main():\n    # \u30d7\u30ed\u30bb\u30c3\u30b5\u306e\u521d\u671f\u5316\n    processor = DataProcessor()\n\n    # \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u30fc\u306e\u767b\u9332\n    processor.emitter.on(\"cache_hit\")(handle_cache_hit)\n    processor.emitter.on(\"process_complete\")(handle_process_complete)\n\n    # \u30c7\u30fc\u30bf\u306e\u51e6\u7406\n    data_items = [\"hello\", \"world\", \"hello\", \"mtaio\"]\n    for data in data_items:\n        result = await processor.process_data(data)\n        print(f\"'{data}'\u306e\u51e6\u7406\u7d50\u679c: {result}\")\n\n# \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u5b9f\u884c\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre> <p>\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u4ee5\u4e0b\u306e\u6a5f\u80fd\u3092\u793a\u3057\u3066\u3044\u307e\u3059:</p> <ol> <li><code>EventEmitter</code>\u3092\u4f7f\u7528\u3057\u305f\u30a4\u30d9\u30f3\u30c8\u51e6\u7406</li> <li><code>TTLCache</code>\u3092\u4f7f\u7528\u3057\u305f\u30ad\u30e3\u30c3\u30b7\u30e5</li> <li><code>TaskExecutor</code>\u3092\u4f7f\u7528\u3057\u305f\u30bf\u30b9\u30af\u5b9f\u884c</li> <li>\u9069\u5207\u306aasync/await\u306e\u4f7f\u7528</li> </ol>"},{"location":"ja/guides/getting-started/#_3","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u57fa\u672c\u3092\u7406\u89e3\u3057\u305f\u3089\u3001\u4ee5\u4e0b\u306e\u30b9\u30c6\u30c3\u30d7\u306b\u9032\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059:</p> <ol> <li>mtaio\u306e\u57fa\u672c\u6a5f\u80fd\u306b\u3064\u3044\u3066\u3055\u3089\u306b\u5b66\u3076</li> <li>\u9ad8\u5ea6\u306a\u4f7f\u7528\u30d1\u30bf\u30fc\u30f3\u3092\u63a2\u308b</li> <li>API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u78ba\u8a8d\u3059\u308b</li> <li>\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u308b</li> </ol>"},{"location":"ja/guides/getting-started/#_4","title":"\u4e00\u822c\u7684\u306a\u30d1\u30bf\u30fc\u30f3","text":"<p>mtaio\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3088\u304f\u4f7f\u7528\u3055\u308c\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u7d39\u4ecb\u3057\u307e\u3059:</p>"},{"location":"ja/guides/getting-started/#_5","title":"\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406","text":"<pre><code>from mtaio.resources import RateLimiter\n\nlimiter = RateLimiter(10.0)  # 1\u79d2\u3042\u305f\u308a10\u56de\u306e\u64cd\u4f5c\n\n@limiter.limit\nasync def rate_limited_operation():\n    # \u51e6\u7406\u5185\u5bb9\u3092\u3053\u3053\u306b\u8a18\u8ff0\n    pass\n</code></pre>"},{"location":"ja/guides/getting-started/#_6","title":"\u30a4\u30d9\u30f3\u30c8\u99c6\u52d5\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3","text":"<pre><code>from mtaio.events import EventEmitter\n\nemitter = EventEmitter()\n\n@emitter.on(\"event_name\")\nasync def handle_event(event):\n    # \u30a4\u30d9\u30f3\u30c8\u51e6\u7406\n    pass\n\n# \u30a4\u30d9\u30f3\u30c8\u306e\u767a\u884c\nawait emitter.emit(\"event_name\", data)\n</code></pre>"},{"location":"ja/guides/getting-started/#_7","title":"\u30ad\u30e3\u30c3\u30b7\u30e5\u6226\u7565","text":"<pre><code>from mtaio.cache import TTLCache\nfrom mtaio.decorators import with_cache\n\ncache = TTLCache[str](default_ttl=300.0)  # 5\u5206\n\n@with_cache(cache)\nasync def cached_operation(key: str) -&gt; str:\n    # \u91cd\u3044\u51e6\u7406\n    return result\n</code></pre>"},{"location":"ja/guides/getting-started/#_8","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":"<ol> <li> <p>\u578b\u30d2\u30f3\u30c8: \u30b3\u30fc\u30c9\u54c1\u8cea\u3068IDE\u652f\u63f4\u306e\u305f\u3081\u306b\u5e38\u306b\u578b\u30d2\u30f3\u30c8\u3092\u4f7f\u7528:    <pre><code>from mtaio.typing import AsyncFunc\n\nasync def process_data(data: str) -&gt; str:\n    # \u51e6\u7406\n    return result\n</code></pre></p> </li> <li> <p>\u30ea\u30bd\u30fc\u30b9\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7: \u9069\u5207\u306a\u30ea\u30bd\u30fc\u30b9\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u306e\u305f\u3081\u306basync\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30de\u30cd\u30fc\u30b8\u30e3\u3092\u4f7f\u7528:    <pre><code>async with TaskExecutor() as executor:\n    # executor\u3092\u4f7f\u7528\u3057\u305f\u51e6\u7406\n    pass  # \u30ea\u30bd\u30fc\u30b9\u306f\u81ea\u52d5\u7684\u306b\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3055\u308c\u308b\n</code></pre></p> </li> <li> <p>\u30a8\u30e9\u30fc\u51e6\u7406: mtaio\u306e\u4f8b\u5916\u968e\u5c64\u3092\u4f7f\u7528\u3057\u305f\u9069\u5207\u306a\u30a8\u30e9\u30fc\u51e6\u7406:    <pre><code>from mtaio.exceptions import MTAIOError\n\ntry:\n    await operation()\nexcept MTAIOError as e:\n    # mtaio\u56fa\u6709\u306e\u30a8\u30e9\u30fc\u3092\u51e6\u7406\n    pass\n</code></pre></p> </li> <li> <p>\u8a2d\u5b9a: \u8a2d\u5b9a\u3092\u5206\u96e2\u3057\u3001\u74b0\u5883\u5909\u6570\u3092\u4f7f\u7528:    <pre><code>import os\nfrom mtaio.cache import TTLCache\n\ncache = TTLCache[str](\n    default_ttl=float(os.getenv('CACHE_TTL', '300')),\n    max_size=int(os.getenv('CACHE_SIZE', '1000'))\n)\n</code></pre></p> </li> </ol>"},{"location":"ja/guides/getting-started/#_9","title":"\u30d8\u30eb\u30d7\u306e\u5165\u624b","text":"<p>\u554f\u984c\u304c\u767a\u751f\u3057\u305f\u5834\u5408:</p> <ol> <li>\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30ac\u30a4\u30c9\u3092\u78ba\u8a8d</li> <li>GitHub\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u985e\u4f3c\u306e\u554f\u984c\u3092\u691c\u7d22</li> <li>\u672a\u89e3\u6c7a\u306e\u554f\u984c\u306e\u5834\u5408\u306f\u65b0\u3057\u3044issue\u3092\u4f5c\u6210</li> </ol> <p>\u6b21\u306f\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u306b\u9032\u307f\u3001mtaio\u306e\u6a5f\u80fd\u306b\u3064\u3044\u3066\u3088\u308a\u8a73\u3057\u304f\u5b66\u3073\u307e\u3057\u3087\u3046\u3002</p>"},{"location":"ja/guides/installation/","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30ac\u30a4\u30c9","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001Python\u306e\u74b0\u5883\u306bmtaio\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"ja/guides/installation/#_2","title":"\u52d5\u4f5c\u8981\u4ef6","text":"<ul> <li>Python 3.11\u4ee5\u964d</li> <li>\u8ffd\u52a0\u306e\u4f9d\u5b58\u95a2\u4fc2\u306a\u3057</li> </ul>"},{"location":"ja/guides/installation/#_3","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5","text":""},{"location":"ja/guides/installation/#pip","title":"pip\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408","text":"<p>\u6700\u3082\u7c21\u5358\u306a\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\u306fpip\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\u3059:</p> <pre><code>pip install mtaio\n</code></pre>"},{"location":"ja/guides/installation/#poetry","title":"Poetry\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408","text":"<p>Poetry\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408:</p> <pre><code>poetry add mtaio\n</code></pre>"},{"location":"ja/guides/installation/#pipenv","title":"pipenv\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408","text":"<p>Pipenv\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408:</p> <pre><code>pipenv install mtaio\n</code></pre>"},{"location":"ja/guides/installation/#_4","title":"\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306e\u78ba\u8a8d","text":"<p>\u4ee5\u4e0b\u306e\u3088\u3046\u306bPython\u3092\u5b9f\u884c\u3057\u3066mtaio\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u3067\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059:</p> <pre><code>import mtaio\nprint(mtaio.__version__)  # \u73fe\u5728\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c\u8868\u793a\u3055\u308c\u307e\u3059\n</code></pre>"},{"location":"ja/guides/installation/#_5","title":"\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u78ba\u8a8d","text":"<p>mtaio\u306fPython 3.11\u4ee5\u964d\u304c\u5fc5\u8981\u3067\u3059\u3002Python\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u78ba\u8a8d\u3067\u304d\u307e\u3059:</p> <pre><code>python --version\n</code></pre> <p>\u53e4\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306ePython\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001mtaio\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u524d\u306b\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002</p>"},{"location":"ja/guides/installation/#_6","title":"\u6a5f\u80fd","text":"<p>mtaio\u306b\u306f\u4ee5\u4e0b\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3059\u3079\u3066\u540c\u68b1\u3055\u308c\u3066\u3044\u307e\u3059:</p> <ul> <li>\u30b3\u30a2\u6a5f\u80fd(<code>mtaio.core</code>)</li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u30b7\u30b9\u30c6\u30e0(<code>mtaio.cache</code>)</li> <li>\u30a4\u30d9\u30f3\u30c8\u51e6\u7406(<code>mtaio.events</code>)</li> <li>\u30c7\u30fc\u30bf\u51e6\u7406(<code>mtaio.data</code>)</li> <li>\u30d7\u30ed\u30c8\u30b3\u30eb\u5b9f\u88c5(<code>mtaio.protocols</code>)</li> <li>\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406(<code>mtaio.resources</code>)</li> <li>\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u30c4\u30fc\u30eb(<code>mtaio.monitoring</code>)</li> <li>\u30ed\u30ae\u30f3\u30b0\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3(<code>mtaio.logging</code>)</li> <li>\u578b\u5b9a\u7fa9(<code>mtaio.typing</code>)</li> <li>\u30c7\u30b3\u30ec\u30fc\u30bf\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3(<code>mtaio.decorators</code>)</li> <li>\u4f8b\u5916\u51e6\u7406(<code>mtaio.exceptions</code>)</li> </ul> <p>\u3059\u3079\u3066\u306e\u6a5f\u80fd\u304c\u57fa\u672c\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u8ffd\u52a0\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002</p>"},{"location":"ja/guides/installation/#_7","title":"\u958b\u767a\u7528\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>\u958b\u767a\u76ee\u7684\u306e\u5834\u5408\u3001\u30bd\u30fc\u30b9\u304b\u3089\u76f4\u63a5\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059:</p> <pre><code>git clone https://github.com/t3tra-dev/mtaio.git\ncd mtaio\npip install -e .\n</code></pre>"},{"location":"ja/guides/installation/#_8","title":"\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb","text":"<p>mtaio\u3092\u30a2\u30f3\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408:</p> <pre><code>pip uninstall mtaio\n</code></pre>"},{"location":"ja/guides/installation/#_9","title":"\u6b21\u306e\u30b9\u30c6\u30c3\u30d7","text":"<p>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u306f:</p> <ol> <li>\u306f\u3058\u3081\u306b\u3092\u8aad\u3093\u3067mtaio\u306e\u6982\u8981\u3092\u7406\u89e3\u3059\u308b</li> <li>\u57fa\u672c\u7684\u306a\u4f7f\u3044\u65b9\u3067\u4e00\u822c\u7684\u306a\u4f7f\u7528\u30d1\u30bf\u30fc\u30f3\u3092\u78ba\u8a8d\u3059\u308b</li> <li>API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3067\u8a73\u7d30\u306a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3059\u308b</li> </ol>"},{"location":"ja/guides/installation/#_10","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0","text":"<p>\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u554f\u984c\u304c\u767a\u751f\u3057\u305f\u5834\u5408:</p> <ol> <li>Python 3.11\u4ee5\u964d\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b</li> <li>pip\u304c\u6700\u65b0\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b: <code>pip install --upgrade pip</code></li> <li>\u30bd\u30fc\u30b9\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5834\u5408\u306f\u3001Git\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b</li> </ol> <p>\u554f\u984c\u304c\u89e3\u6c7a\u3057\u306a\u3044\u5834\u5408\u306f\u3001\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30ac\u30a4\u30c9\u3092\u78ba\u8a8d\u3059\u308b\u304b\u3001GitHub\u3067issue\u3092\u4f5c\u6210\u3057\u3066\u304f\u3060\u3055\u3044\u3002</p>"},{"location":"ja/guides/troubleshooting/","title":"\u30c8\u30e9\u30d6\u30eb\u30b7\u30e5\u30fc\u30c6\u30a3\u30f3\u30b0\u30ac\u30a4\u30c9","text":"<p>\u3053\u306e\u30ac\u30a4\u30c9\u3067\u306f\u3001mtaio\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u767a\u751f\u3059\u308b\u4e00\u822c\u7684\u306a\u554f\u984c\u306e\u8a3a\u65ad\u3068\u89e3\u6c7a\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002</p>"},{"location":"ja/guides/troubleshooting/#_2","title":"\u4e00\u822c\u7684\u306a\u554f\u984c","text":""},{"location":"ja/guides/troubleshooting/#_3","title":"\u30ea\u30bd\u30fc\u30b9\u7ba1\u7406","text":""},{"location":"ja/guides/troubleshooting/#_4","title":"\u9ad8\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf","text":"<p>\u554f\u984c: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u304c\u7d99\u7d9a\u7684\u306b\u5897\u52a0\u3059\u308b\u3002</p> <p>\u8003\u3048\u3089\u308c\u308b\u539f\u56e0:</p> <ul> <li>\u30ea\u30bd\u30fc\u30b9\u304c\u9069\u5207\u306b\u9589\u3058\u3089\u308c\u3066\u3044\u306a\u3044</li> <li>\u30ad\u30e3\u30c3\u30b7\u30e5\u30b5\u30a4\u30ba\u304c\u9069\u5207\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044</li> <li>\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3067\u306e\u30e1\u30e2\u30ea\u30ea\u30fc\u30af</li> </ul> <p>\u89e3\u6c7a\u7b56:</p> <pre><code>from mtaio.resources import ResourceManager\nfrom mtaio.cache import TTLCache\n\n# \u9069\u5207\u306a\u30ea\u30bd\u30fc\u30b9\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\nasync with ResourceManager() as manager:\n    # \u30ea\u30bd\u30fc\u30b9\u306f\u81ea\u52d5\u7684\u306b\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3055\u308c\u308b\n    pass\n\n# \u9069\u5207\u306a\u30b5\u30a4\u30ba\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u8a2d\u5b9a\ncache = TTLCache[str](\n    max_size=1000,  # \u30ad\u30e3\u30c3\u30b7\u30e5\u30b5\u30a4\u30ba\u3092\u5236\u9650\n    default_ttl=300.0  # 5\u5206\u5f8c\u306b\u30a2\u30a4\u30c6\u30e0\u3092\u30af\u30ea\u30a2\n)\n\n# \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\nemitter = EventEmitter()\n@emitter.on(\"event\")\nasync def handler(event):\n    # \u30a4\u30d9\u30f3\u30c8\u306e\u51e6\u7406\n    pass\n\n# \u4e0d\u8981\u306b\u306a\u3063\u305f\u30cf\u30f3\u30c9\u30e9\u3092\u524a\u9664\nemitter.remove_listener(\"event\", handler)\n</code></pre>"},{"location":"ja/guides/troubleshooting/#_5","title":"\u30bf\u30b9\u30af\u5b9f\u884c\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8","text":"<p>\u554f\u984c: \u30bf\u30b9\u30af\u304c\u983b\u7e41\u306b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3059\u308b\u304b\u3001\u5b9f\u884c\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u308b\u3002</p> <p>\u89e3\u6c7a\u7b56:</p> <pre><code>from mtaio.core import TaskExecutor\nfrom mtaio.resources import TimeoutManager\n\n# \u9069\u5207\u306a\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3092\u8a2d\u5b9a\nasync with TimeoutManager(default_timeout=30.0) as tm:\n    async with TaskExecutor() as executor:\n        # \u540c\u6642\u5b9f\u884c\u6570\u306e\u5236\u9650\u3092\u8a2d\u5b9a\n        result = await executor.gather(\n            *tasks,\n            limit=5  # \u540c\u6642\u5b9f\u884c\u30bf\u30b9\u30af\u3092\u5236\u9650\n        )\n</code></pre>"},{"location":"ja/guides/troubleshooting/#_6","title":"\u30a4\u30d9\u30f3\u30c8\u51e6\u7406","text":""},{"location":"ja/guides/troubleshooting/#_7","title":"\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u30e1\u30e2\u30ea\u30ea\u30fc\u30af","text":"<p>\u554f\u984c: \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u767b\u9332\u306b\u3088\u308a\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u304c\u5897\u52a0\u3059\u308b\u3002</p> <p>\u89e3\u6c7a\u7b56:</p> <pre><code>from mtaio.events import EventEmitter\nimport weakref\n\nclass EventHandlers:\n    def __init__(self):\n        self._handlers = weakref.WeakSet()\n        self.emitter = EventEmitter()\n\n    def register(self, handler):\n        self._handlers.add(handler)\n        self.emitter.on(\"event\")(handler)\n\n    def cleanup(self):\n        self._handlers.clear()\n</code></pre>"},{"location":"ja/guides/troubleshooting/#_8","title":"\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u672a\u767b\u9332","text":"<p>\u554f\u984c: \u30a4\u30d9\u30f3\u30c8\u304c\u51e6\u7406\u3055\u308c\u306a\u3044\u3002</p> <p>\u89e3\u6c7a\u7b56:</p> <pre><code>from mtaio.events import EventEmitter\n\nasync def setup_handlers():\n    emitter = EventEmitter()\n\n    # \u30a8\u30e9\u30fc\u51e6\u7406\u3092\u8ffd\u52a0\n    @emitter.on(\"error\")\n    async def handle_error(event):\n        print(f\"\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f: {event.data}\")\n\n    # \u30cf\u30f3\u30c9\u30e9\u767b\u9332\u3092\u78ba\u8a8d\n    if emitter.listener_count(\"error\") == 0:\n        raise RuntimeError(\"\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30e9\u304c\u767b\u9332\u3055\u308c\u3066\u3044\u307e\u305b\u3093\")\n</code></pre>"},{"location":"ja/guides/troubleshooting/#_9","title":"\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u554f\u984c","text":""},{"location":"ja/guides/troubleshooting/#_10","title":"\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u4e0d\u6574\u5408","text":"<p>\u554f\u984c: \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u7570\u306a\u308b\u90e8\u5206\u3067\u30ad\u30e3\u30c3\u30b7\u30e5\u30c7\u30fc\u30bf\u304c\u4e0d\u6574\u5408\u306b\u306a\u308b\u3002</p> <p>\u89e3\u6c7a\u7b56:</p> <pre><code>from mtaio.cache import DistributedCache\nfrom mtaio.events import EventEmitter\n\nasync def setup_cache():\n    cache = DistributedCache[str]([\n        (\"localhost\", 5000),\n        (\"localhost\", 5001)\n    ])\n    emitter = EventEmitter()\n\n    @emitter.on(\"data_changed\")\n    async def invalidate_cache(event):\n        affected_keys = event.data.get(\"keys\", [])\n        for key in affected_keys:\n            await cache.delete(key)\n</code></pre>"},{"location":"ja/guides/troubleshooting/#_11","title":"\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u554f\u984c","text":"<p>\u554f\u984c: \u30ad\u30e3\u30c3\u30b7\u30e5\u64cd\u4f5c\u304c\u9045\u3044\u307e\u305f\u306f\u975e\u52b9\u7387\u3002</p> <p>\u89e3\u6c7a\u7b56:</p> <pre><code>from mtaio.cache import TTLCache\nfrom mtaio.monitoring import ResourceMonitor\n\nasync def optimize_cache():\n    # \u30ad\u30e3\u30c3\u30b7\u30e5\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\n    monitor = ResourceMonitor()\n    cache = TTLCache[str](\n        default_ttl=60.0,  # \u983b\u7e41\u306b\u5909\u66f4\u3055\u308c\u308b\u30c7\u30fc\u30bf\u306b\u306f\u77ed\u3044TTL\n        max_size=1000\n    )\n\n    # \u30ad\u30e3\u30c3\u30b7\u30e5\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u8ffd\u52a0\n    @monitor.on_metric(\"cache_hits\")\n    async def track_cache_hits(value):\n        if value &lt; 0.5:  # \u30d2\u30c3\u30c8\u7387\u304c50%\u672a\u6e80\n            print(\"\u30ad\u30e3\u30c3\u30b7\u30e5\u30d2\u30c3\u30c8\u7387\u304c\u4f4e\u3044\u305f\u3081\u3001TTL\u306e\u8abf\u6574\u3092\u691c\u8a0e\u3057\u3066\u304f\u3060\u3055\u3044\")\n</code></pre>"},{"location":"ja/guides/troubleshooting/#_12","title":"\u30c7\u30d0\u30c3\u30b0\u30c4\u30fc\u30eb","text":""},{"location":"ja/guides/troubleshooting/#_13","title":"\u30ed\u30ae\u30f3\u30b0\u306e\u8a2d\u5b9a","text":"<p>\u30c7\u30d0\u30c3\u30b0\u7528\u306e\u8a73\u7d30\u306a\u30ed\u30ae\u30f3\u30b0\u3092\u8a2d\u5b9a:</p> <pre><code>import logging\nfrom mtaio.logging import AsyncFileHandler\n\nasync def setup_debug_logging():\n    logger = logging.getLogger(\"mtaio\")\n    logger.setLevel(logging.DEBUG)\n\n    handler = AsyncFileHandler(\"debug.log\")\n    formatter = logging.Formatter(\n        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    )\n    handler.setFormatter(formatter)\n    logger.addHandler(handler)\n</code></pre>"},{"location":"ja/guides/troubleshooting/#_14","title":"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0","text":"<p>\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u3092\u7279\u5b9a\u3059\u308b\u305f\u3081\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30d7\u30ed\u30d5\u30a1\u30a4\u30ea\u30f3\u30b0:</p> <pre><code>from mtaio.monitoring import Profiler\n\nasync def profile_application():\n    profiler = Profiler()\n\n    @profiler.trace\n    async def monitored_function():\n        # \u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u5bfe\u8c61\u306e\u95a2\u6570\n        pass\n\n    # \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u30e1\u30c8\u30ea\u30af\u30b9\u306e\u53d6\u5f97\n    profile = await profiler.get_profile()\n    print(f\"\u5b9f\u884c\u6642\u9593: {profile.total_time:.2f}\u79d2\")\n    print(f\"\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf: {profile.memory_usage} MB\")\n</code></pre>"},{"location":"ja/guides/troubleshooting/#_15","title":"\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8","text":""},{"location":"ja/guides/troubleshooting/#_16","title":"\u4e00\u822c\u7684\u306a\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u89e3\u6c7a\u7b56","text":"<ol> <li> <p><code>MTAIOError: Resource limit exceeded</code></p> <ul> <li>\u539f\u56e0: \u540c\u6642\u5b9f\u884c\u64cd\u4f5c\u304c\u591a\u3059\u304e\u308b</li> <li>\u89e3\u6c7a\u7b56: \u30ea\u30bd\u30fc\u30b9\u5236\u9650\u306e\u8abf\u6574\u307e\u305f\u306f\u30ec\u30fc\u30c8\u5236\u9650\u306e\u8ffd\u52a0</li> </ul> </li> <li> <p><code>TimeoutError: Operation timed out</code></p> <ul> <li>\u539f\u56e0: \u64cd\u4f5c\u306e\u5b8c\u4e86\u306b\u6642\u9593\u304c\u304b\u304b\u308a\u3059\u304e\u305f</li> <li>\u89e3\u6c7a\u7b56: \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306e\u5897\u52a0\u307e\u305f\u306f\u64cd\u4f5c\u306e\u6700\u9069\u5316</li> </ul> </li> <li> <p><code>CacheError: Cache connection failed</code></p> <ul> <li>\u539f\u56e0: \u30ad\u30e3\u30c3\u30b7\u30e5\u30b5\u30fc\u30d0\u30fc\u306b\u63a5\u7d9a\u3067\u304d\u306a\u3044</li> <li>\u89e3\u6c7a\u7b56: \u30ad\u30e3\u30c3\u30b7\u30e5\u30b5\u30fc\u30d0\u30fc\u306e\u72b6\u614b\u3068\u8a2d\u5b9a\u3092\u78ba\u8a8d</li> </ul> </li> <li> <p><code>EventError: Event handler failed</code></p> <ul> <li>\u539f\u56e0: \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3067\u306e\u4f8b\u5916\u767a\u751f</li> <li>\u89e3\u6c7a\u7b56: \u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306b\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u8ffd\u52a0</li> </ul> </li> </ol>"},{"location":"ja/guides/troubleshooting/#_17","title":"\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9","text":""},{"location":"ja/guides/troubleshooting/#_18","title":"\u30a8\u30e9\u30fc\u51e6\u7406","text":"<p>\u5305\u62ec\u7684\u306a\u30a8\u30e9\u30fc\u51e6\u7406\u306e\u5b9f\u88c5:</p> <pre><code>from mtaio.exceptions import MTAIOError\n\nasync def handle_errors():\n    try:\n        # \u30b3\u30fc\u30c9\u3092\u3053\u3053\u306b\u8a18\u8ff0\n        pass\n    except MTAIOError as e:\n        # mtaio\u56fa\u6709\u306e\u30a8\u30e9\u30fc\u3092\u51e6\u7406\n        logger.error(f\"mtaio\u30a8\u30e9\u30fc: {e}\")\n    except Exception as e:\n        # \u4e88\u671f\u3057\u306a\u3044\u30a8\u30e9\u30fc\u3092\u51e6\u7406\n        logger.exception(\"\u4e88\u671f\u3057\u306a\u3044\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\")\n</code></pre>"},{"location":"ja/guides/troubleshooting/#_19","title":"\u30ea\u30bd\u30fc\u30b9\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7","text":"<p>\u9069\u5207\u306a\u30ea\u30bd\u30fc\u30b9\u306e\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3092\u78ba\u4fdd:</p> <pre><code>from contextlib import AsyncExitStack\n\nasync def cleanup_resources():\n    async with AsyncExitStack() as stack:\n        # \u30b9\u30bf\u30c3\u30af\u306b\u30ea\u30bd\u30fc\u30b9\u3092\u8ffd\u52a0\n        executor = await stack.enter_async_context(TaskExecutor())\n        cache = await stack.enter_async_context(TTLCache[str]())\n\n        # \u30ea\u30bd\u30fc\u30b9\u306f\u81ea\u52d5\u7684\u306b\u30af\u30ea\u30fc\u30f3\u30a2\u30c3\u30d7\u3055\u308c\u308b\n</code></pre>"},{"location":"ja/guides/troubleshooting/#_20","title":"\u30b5\u30dd\u30fc\u30c8\u306e\u53d6\u5f97","text":"<p>\u554f\u984c\u304c\u89e3\u6c7a\u3057\u306a\u3044\u5834\u5408\u306f:</p> <ol> <li>\u6b63\u3057\u3044\u4f7f\u7528\u65b9\u6cd5\u306b\u3064\u3044\u3066API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u78ba\u8a8d\u3059\u308b</li> <li>\u65e2\u5b58\u306eGitHub\u306eIssue\u3092\u691c\u7d22\u3059\u308b</li> <li>\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\u3067\u8cea\u554f\u3059\u308b</li> </ol> <p>\u554f\u984c\u3092\u5831\u544a\u3059\u308b\u969b\u306f\u3001\u4ee5\u4e0b\u306e\u60c5\u5831\u3092\u542b\u3081\u3066\u304f\u3060\u3055\u3044:</p> <ul> <li>Python\u306e\u30d0\u30fc\u30b8\u30e7\u30f3</li> <li>mtaio\u306e\u30d0\u30fc\u30b8\u30e7\u30f3</li> <li>\u6700\u5c0f\u9650\u306e\u518d\u73fe\u53ef\u80fd\u306a\u4f8b</li> <li>\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9</li> <li>\u95a2\u9023\u3059\u308b\u8a2d\u5b9a\u60c5\u5831</li> </ul>"}]}